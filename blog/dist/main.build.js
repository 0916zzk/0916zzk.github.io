/*! For license information please see main.build.js.LICENSE.txt */
(()=>{var __webpack_modules__={755:(t,e,n)=>{var r=n(633);t.exports=(r.default||r).template({1:function(t,e,n,r,o){var i,a=null!=e?e:t.nullContext||{},s=t.hooks.helperMissing,l="function",u=t.escapeExpression,c=t.lookupProperty||function(t,e){if(Object.prototype.hasOwnProperty.call(t,e))return t[e]};return'            <div class="form-group row">\r\n                <label class="col-sm-2">'+u(typeof(i=null!=(i=c(n,"label")||(null!=e?c(e,"label"):e))?i:s)===l?i.call(a,{name:"label",hash:{},data:o,loc:{start:{line:13,column:40},end:{line:13,column:49}}}):i)+'</label>\r\n                <div class="col-sm-10" data-display="error">\r\n                    <input type="'+u(typeof(i=null!=(i=c(n,"type")||(null!=e?c(e,"type"):e))?i:s)===l?i.call(a,{name:"type",hash:{},data:o,loc:{start:{line:15,column:33},end:{line:15,column:41}}}):i)+'" name="'+u(typeof(i=null!=(i=c(n,"query")||(null!=e?c(e,"query"):e))?i:s)===l?i.call(a,{name:"query",hash:{},data:o,loc:{start:{line:15,column:49},end:{line:15,column:58}}}):i)+'" data-input-query="'+u(typeof(i=null!=(i=c(n,"query")||(null!=e?c(e,"query"):e))?i:s)===l?i.call(a,{name:"query",hash:{},data:o,loc:{start:{line:15,column:78},end:{line:15,column:87}}}):i)+'" placeholder="'+u(typeof(i=null!=(i=c(n,"placeholder")||(null!=e?c(e,"placeholder"):e))?i:s)===l?i.call(a,{name:"placeholder",hash:{},data:o,loc:{start:{line:15,column:102},end:{line:15,column:117}}}):i)+'">\r\n                </div>\r\n            </div>\r\n'},3:function(t,e,n,r,o){var i,a,s=null!=e?e:t.nullContext||{},l=t.hooks.helperMissing,u="function",c=t.escapeExpression,f=t.lookupProperty||function(t,e){if(Object.prototype.hasOwnProperty.call(t,e))return t[e]};return'            <button type="'+(null!=(i=f(n,"if").call(s,null!=e?f(e,"isSubmit"):e,{name:"if",hash:{},fn:t.program(4,o,0),inverse:t.program(6,o,0),data:o,loc:{start:{line:24,column:26},end:{line:24,column:69}}}))?i:"")+'" class="btn btn-default"\r\n                data-modal-btn="'+c(typeof(a=null!=(a=f(n,"targetName")||(null!=e?f(e,"targetName"):e))?a:l)===u?a.call(s,{name:"targetName",hash:{},data:o,loc:{start:{line:25,column:32},end:{line:25,column:46}}}):a)+'">'+c(typeof(a=null!=(a=f(n,"name")||(null!=e?f(e,"name"):e))?a:l)===u?a.call(s,{name:"name",hash:{},data:o,loc:{start:{line:25,column:48},end:{line:25,column:56}}}):a)+"</button>\r\n"},4:function(t,e,n,r,o){return"submit"},6:function(t,e,n,r,o){return"button"},compiler:[8,">= 4.3.0"],main:function(t,e,n,r,o){var i,a,s=null!=e?e:t.nullContext||{},l=t.hooks.helperMissing,u="function",c=t.escapeExpression,f=t.lookupProperty||function(t,e){if(Object.prototype.hasOwnProperty.call(t,e))return t[e]};return'<div class="blog-modal-wrap">\r\n    <div class="blog-modal-header" data-drag="true">\r\n        <button type="button" class="close" data-dismiss="modal" aria-label="Close"\r\n            data-modal-btn="close">&times;</button>\r\n        <h4 class="blog-modal-title">'+c(typeof(a=null!=(a=f(n,"title")||(null!=e?f(e,"title"):e))?a:l)===u?a.call(s,{name:"title",hash:{},data:o,loc:{start:{line:5,column:37},end:{line:5,column:46}}}):a)+'</h4>\r\n\r\n    </div>\r\n    <form id="'+c(typeof(a=null!=(a=f(n,"formType")||(null!=e?f(e,"formType"):e))?a:l)===u?a.call(s,{name:"formType",hash:{},data:o,loc:{start:{line:8,column:14},end:{line:8,column:26}}}):a)+'" action="javascript:;">\r\n        <div class="blog-modal-body">\r\n\r\n'+(null!=(i=f(n,"each").call(s,null!=e?f(e,"formData"):e,{name:"each",hash:{},fn:t.program(1,o,0),inverse:t.noop,data:o,loc:{start:{line:11,column:12},end:{line:18,column:21}}}))?i:"")+'\r\n        </div>\r\n\r\n        <div class="blog-modal-footer">\r\n'+(null!=(i=f(n,"each").call(s,null!=e?f(e,"btns"):e,{name:"each",hash:{},fn:t.program(3,o,0),inverse:t.noop,data:o,loc:{start:{line:23,column:12},end:{line:26,column:21}}}))?i:"")+"        </div>\r\n    </form>\r\n</div>"},useData:!0})},879:(t,e,n)=>{var r=n(633);t.exports=(r.default||r).template({1:function(t,e,n,r,o){return'<div class="blog-header-avatar">\r\n    <img src="./image/avatar.jpeg" alt="">\r\n    <div class="blog-header-userbox">\r\n        <ul class="blog-header-user">\r\n            <li data-router="write">创作中心</li>\r\n            <li>个人空间</li>\r\n        </ul>\r\n    </div>\r\n</div>\r\n'},3:function(t,e,n,r,o){return'<a href="#" class="btn btn-primary btn-lg" data-modal="login">登录</a> <a href="#" data-modal="register">注册</a>\r\n'},compiler:[8,">= 4.3.0"],main:function(t,e,n,r,o){var i,a=t.lookupProperty||function(t,e){if(Object.prototype.hasOwnProperty.call(t,e))return t[e]};return null!=(i=a(n,"if").call(null!=e?e:t.nullContext||{},null!=e?a(e,"isLogin"):e,{name:"if",hash:{},fn:t.program(1,o,0),inverse:t.program(3,o,0),data:o,loc:{start:{line:1,column:0},end:{line:13,column:7}}}))?i:""},useData:!0})},77:(t,e,n)=>{var r=n(633);t.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(t,e,n,r,o){return'<div class="blog-write"></div>\r\n</div>'},useData:!0})},261:(t,e,n)=>{"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}e.__esModule=!0;var i=o(n(871)),a=r(n(613)),s=r(n(769)),l=o(n(849)),u=o(n(624)),c=r(n(148));function f(){var t=new i.HandlebarsEnvironment;return l.extend(t,i),t.SafeString=a.default,t.Exception=s.default,t.Utils=l,t.escapeExpression=l.escapeExpression,t.VM=u,t.template=function(e){return u.template(e,t)},t}var d=f();d.create=f,c.default(d),d.default=d,e.default=d,t.exports=e.default},871:(t,e,n)=>{"use strict";function r(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0,e.HandlebarsEnvironment=f;var o=n(849),i=r(n(769)),a=n(277),s=n(940),l=r(n(566)),u=n(865);e.VERSION="4.7.8",e.COMPILER_REVISION=8,e.LAST_COMPATIBLE_COMPILER_REVISION=7,e.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0 <4.3.0",8:">= 4.3.0"};var c="[object Object]";function f(t,e,n){this.helpers=t||{},this.partials=e||{},this.decorators=n||{},a.registerDefaultHelpers(this),s.registerDefaultDecorators(this)}f.prototype={constructor:f,logger:l.default,log:l.default.log,registerHelper:function(t,e){if(o.toString.call(t)===c){if(e)throw new i.default("Arg not supported with multiple helpers");o.extend(this.helpers,t)}else this.helpers[t]=e},unregisterHelper:function(t){delete this.helpers[t]},registerPartial:function(t,e){if(o.toString.call(t)===c)o.extend(this.partials,t);else{if(void 0===e)throw new i.default('Attempting to register a partial called "'+t+'" as undefined');this.partials[t]=e}},unregisterPartial:function(t){delete this.partials[t]},registerDecorator:function(t,e){if(o.toString.call(t)===c){if(e)throw new i.default("Arg not supported with multiple decorators");o.extend(this.decorators,t)}else this.decorators[t]=e},unregisterDecorator:function(t){delete this.decorators[t]},resetLoggedPropertyAccesses:function(){u.resetLoggedProperties()}};var d=l.default.log;e.log=d,e.createFrame=o.createFrame,e.logger=l.default},940:(t,e,n)=>{"use strict";e.__esModule=!0,e.registerDefaultDecorators=function(t){o.default(t)};var r,o=(r=n(430))&&r.__esModule?r:{default:r}},430:(t,e,n)=>{"use strict";e.__esModule=!0;var r=n(849);e.default=function(t){t.registerDecorator("inline",(function(t,e,n,o){var i=t;return e.partials||(e.partials={},i=function(o,i){var a=n.partials;n.partials=r.extend({},a,e.partials);var s=t(o,i);return n.partials=a,s}),e.partials[o.args[0]]=o.fn,i}))},t.exports=e.default},769:(t,e)=>{"use strict";e.__esModule=!0;var n=["description","fileName","lineNumber","endLineNumber","message","name","number","stack"];function r(t,e){var o=e&&e.loc,i=void 0,a=void 0,s=void 0,l=void 0;o&&(i=o.start.line,a=o.end.line,s=o.start.column,l=o.end.column,t+=" - "+i+":"+s);for(var u=Error.prototype.constructor.call(this,t),c=0;c<n.length;c++)this[n[c]]=u[n[c]];Error.captureStackTrace&&Error.captureStackTrace(this,r);try{o&&(this.lineNumber=i,this.endLineNumber=a,Object.defineProperty?(Object.defineProperty(this,"column",{value:s,enumerable:!0}),Object.defineProperty(this,"endColumn",{value:l,enumerable:!0})):(this.column=s,this.endColumn=l))}catch(t){}}r.prototype=new Error,e.default=r,t.exports=e.default},277:(t,e,n)=>{"use strict";function r(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0,e.registerDefaultHelpers=function(t){o.default(t),i.default(t),a.default(t),s.default(t),l.default(t),u.default(t),c.default(t)},e.moveHelperToHooks=function(t,e,n){t.helpers[e]&&(t.hooks[e]=t.helpers[e],n||delete t.helpers[e])};var o=r(n(97)),i=r(n(785)),a=r(n(353)),s=r(n(355)),l=r(n(300)),u=r(n(466)),c=r(n(908))},97:(t,e,n)=>{"use strict";e.__esModule=!0;var r=n(849);e.default=function(t){t.registerHelper("blockHelperMissing",(function(e,n){var o=n.inverse,i=n.fn;if(!0===e)return i(this);if(!1===e||null==e)return o(this);if(r.isArray(e))return e.length>0?(n.ids&&(n.ids=[n.name]),t.helpers.each(e,n)):o(this);if(n.data&&n.ids){var a=r.createFrame(n.data);a.contextPath=r.appendContextPath(n.data.contextPath,n.name),n={data:a}}return i(e,n)}))},t.exports=e.default},785:(t,e,n)=>{"use strict";e.__esModule=!0;var r,o=n(849),i=(r=n(769))&&r.__esModule?r:{default:r};e.default=function(t){t.registerHelper("each",(function(t,e){if(!e)throw new i.default("Must pass iterator to #each");var n,r=e.fn,a=e.inverse,s=0,l="",u=void 0,c=void 0;function f(e,n,i){u&&(u.key=e,u.index=n,u.first=0===n,u.last=!!i,c&&(u.contextPath=c+e)),l+=r(t[e],{data:u,blockParams:o.blockParams([t[e],e],[c+e,null])})}if(e.data&&e.ids&&(c=o.appendContextPath(e.data.contextPath,e.ids[0])+"."),o.isFunction(t)&&(t=t.call(this)),e.data&&(u=o.createFrame(e.data)),t&&"object"==typeof t)if(o.isArray(t))for(var d=t.length;s<d;s++)s in t&&f(s,s,s===t.length-1);else if("function"==typeof Symbol&&t[Symbol.iterator]){for(var p=[],h=t[Symbol.iterator](),v=h.next();!v.done;v=h.next())p.push(v.value);for(d=(t=p).length;s<d;s++)f(s,s,s===t.length-1)}else n=void 0,Object.keys(t).forEach((function(t){void 0!==n&&f(n,s-1),n=t,s++})),void 0!==n&&f(n,s-1,!0);return 0===s&&(l=a(this)),l}))},t.exports=e.default},353:(t,e,n)=>{"use strict";e.__esModule=!0;var r,o=(r=n(769))&&r.__esModule?r:{default:r};e.default=function(t){t.registerHelper("helperMissing",(function(){if(1!==arguments.length)throw new o.default('Missing helper: "'+arguments[arguments.length-1].name+'"')}))},t.exports=e.default},355:(t,e,n)=>{"use strict";e.__esModule=!0;var r,o=n(849),i=(r=n(769))&&r.__esModule?r:{default:r};e.default=function(t){t.registerHelper("if",(function(t,e){if(2!=arguments.length)throw new i.default("#if requires exactly one argument");return o.isFunction(t)&&(t=t.call(this)),!e.hash.includeZero&&!t||o.isEmpty(t)?e.inverse(this):e.fn(this)})),t.registerHelper("unless",(function(e,n){if(2!=arguments.length)throw new i.default("#unless requires exactly one argument");return t.helpers.if.call(this,e,{fn:n.inverse,inverse:n.fn,hash:n.hash})}))},t.exports=e.default},300:(t,e)=>{"use strict";e.__esModule=!0,e.default=function(t){t.registerHelper("log",(function(){for(var e=[void 0],n=arguments[arguments.length-1],r=0;r<arguments.length-1;r++)e.push(arguments[r]);var o=1;null!=n.hash.level?o=n.hash.level:n.data&&null!=n.data.level&&(o=n.data.level),e[0]=o,t.log.apply(t,e)}))},t.exports=e.default},466:(t,e)=>{"use strict";e.__esModule=!0,e.default=function(t){t.registerHelper("lookup",(function(t,e,n){return t?n.lookupProperty(t,e):t}))},t.exports=e.default},908:(t,e,n)=>{"use strict";e.__esModule=!0;var r,o=n(849),i=(r=n(769))&&r.__esModule?r:{default:r};e.default=function(t){t.registerHelper("with",(function(t,e){if(2!=arguments.length)throw new i.default("#with requires exactly one argument");o.isFunction(t)&&(t=t.call(this));var n=e.fn;if(o.isEmpty(t))return e.inverse(this);var r=e.data;return e.data&&e.ids&&((r=o.createFrame(e.data)).contextPath=o.appendContextPath(e.data.contextPath,e.ids[0])),n(t,{data:r,blockParams:o.blockParams([t],[r&&r.contextPath])})}))},t.exports=e.default},726:(t,e,n)=>{"use strict";e.__esModule=!0,e.createNewLookupObject=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return r.extend.apply(void 0,[Object.create(null)].concat(e))};var r=n(849)},865:(t,e,n)=>{"use strict";e.__esModule=!0,e.createProtoAccessControl=function(t){var e=Object.create(null);e.constructor=!1,e.__defineGetter__=!1,e.__defineSetter__=!1,e.__lookupGetter__=!1;var n=Object.create(null);return n.__proto__=!1,{properties:{whitelist:o.createNewLookupObject(n,t.allowedProtoProperties),defaultValue:t.allowProtoPropertiesByDefault},methods:{whitelist:o.createNewLookupObject(e,t.allowedProtoMethods),defaultValue:t.allowProtoMethodsByDefault}}},e.resultIsAllowed=function(t,e,n){return function(t,e){return void 0!==t.whitelist[e]?!0===t.whitelist[e]:void 0!==t.defaultValue?t.defaultValue:(function(t){!0!==a[t]&&(a[t]=!0,i.default.log("error",'Handlebars: Access has been denied to resolve the property "'+t+'" because it is not an "own property" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details'))}(e),!1)}("function"==typeof t?e.methods:e.properties,n)},e.resetLoggedProperties=function(){Object.keys(a).forEach((function(t){delete a[t]}))};var r,o=n(726),i=(r=n(566))&&r.__esModule?r:{default:r},a=Object.create(null)},614:(t,e)=>{"use strict";e.__esModule=!0,e.wrapHelper=function(t,e){return"function"!=typeof t?t:function(){return arguments[arguments.length-1]=e(arguments[arguments.length-1]),t.apply(this,arguments)}}},566:(t,e,n)=>{"use strict";e.__esModule=!0;var r=n(849),o={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(t){if("string"==typeof t){var e=r.indexOf(o.methodMap,t.toLowerCase());t=e>=0?e:parseInt(t,10)}return t},log:function(t){if(t=o.lookupLevel(t),"undefined"!=typeof console&&o.lookupLevel(o.level)<=t){var e=o.methodMap[t];console[e]||(e="log");for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];console[e].apply(console,r)}}};e.default=o,t.exports=e.default},148:(t,e)=>{"use strict";e.__esModule=!0,e.default=function(t){"object"!=typeof globalThis&&(Object.prototype.__defineGetter__("__magic__",(function(){return this})),__magic__.globalThis=__magic__,delete Object.prototype.__magic__);var e=globalThis.Handlebars;t.noConflict=function(){return globalThis.Handlebars===t&&(globalThis.Handlebars=e),t}},t.exports=e.default},624:(t,e,n)=>{"use strict";e.__esModule=!0,e.checkRevision=function(t){var e=t&&t[0]||1,n=a.COMPILER_REVISION;if(!(e>=a.LAST_COMPATIBLE_COMPILER_REVISION&&e<=a.COMPILER_REVISION)){if(e<a.LAST_COMPATIBLE_COMPILER_REVISION){var r=a.REVISION_CHANGES[n],o=a.REVISION_CHANGES[e];throw new i.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+r+") or downgrade your runtime to an older version ("+o+").")}throw new i.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+t[1]+").")}},e.template=function(t,e){if(!e)throw new i.default("No environment passed to template");if(!t||!t.main)throw new i.default("Unknown template object: "+typeof t);t.main.decorator=t.main_d,e.VM.checkRevision(t.compiler);var n=t.compiler&&7===t.compiler[0],r={strict:function(t,e,n){if(!t||!(e in t))throw new i.default('"'+e+'" not defined in '+t,{loc:n});return r.lookupProperty(t,e)},lookupProperty:function(t,e){var n=t[e];return null==n||Object.prototype.hasOwnProperty.call(t,e)||u.resultIsAllowed(n,r.protoAccessControl,e)?n:void 0},lookup:function(t,e){for(var n=t.length,o=0;o<n;o++)if(null!=(t[o]&&r.lookupProperty(t[o],e)))return t[o][e]},lambda:function(t,e){return"function"==typeof t?t.call(e):t},escapeExpression:o.escapeExpression,invokePartial:function(n,r,a){a.hash&&(r=o.extend({},r,a.hash),a.ids&&(a.ids[0]=!0)),n=e.VM.resolvePartial.call(this,n,r,a);var s=o.extend({},a,{hooks:this.hooks,protoAccessControl:this.protoAccessControl}),l=e.VM.invokePartial.call(this,n,r,s);if(null==l&&e.compile&&(a.partials[a.name]=e.compile(n,t.compilerOptions,e),l=a.partials[a.name](r,s)),null!=l){if(a.indent){for(var u=l.split("\n"),c=0,f=u.length;c<f&&(u[c]||c+1!==f);c++)u[c]=a.indent+u[c];l=u.join("\n")}return l}throw new i.default("The partial "+a.name+" could not be compiled when running in runtime-only mode")},fn:function(e){var n=t[e];return n.decorator=t[e+"_d"],n},programs:[],program:function(t,e,n,r,o){var i=this.programs[t],a=this.fn(t);return e||o||r||n?i=c(this,t,a,e,n,r,o):i||(i=this.programs[t]=c(this,t,a)),i},data:function(t,e){for(;t&&e--;)t=t._parent;return t},mergeIfNeeded:function(t,e){var n=t||e;return t&&e&&t!==e&&(n=o.extend({},e,t)),n},nullContext:Object.seal({}),noop:e.VM.noop,compilerInfo:t.compiler};function f(e){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],o=n.data;f._setup(n),!n.partial&&t.useData&&(o=function(t,e){return e&&"root"in e||((e=e?a.createFrame(e):{}).root=t),e}(e,o));var i=void 0,s=t.useBlockParams?[]:void 0;function l(e){return""+t.main(r,e,r.helpers,r.partials,o,s,i)}return t.useDepths&&(i=n.depths?e!=n.depths[0]?[e].concat(n.depths):n.depths:[e]),(l=d(t.main,l,r,n.depths||[],o,s))(e,n)}return f.isTop=!0,f._setup=function(i){if(i.partial)r.protoAccessControl=i.protoAccessControl,r.helpers=i.helpers,r.partials=i.partials,r.decorators=i.decorators,r.hooks=i.hooks;else{var a=o.extend({},e.helpers,i.helpers);!function(t,e){Object.keys(t).forEach((function(n){var r=t[n];t[n]=function(t,e){var n=e.lookupProperty;return l.wrapHelper(t,(function(t){return o.extend({lookupProperty:n},t)}))}(r,e)}))}(a,r),r.helpers=a,t.usePartial&&(r.partials=r.mergeIfNeeded(i.partials,e.partials)),(t.usePartial||t.useDecorators)&&(r.decorators=o.extend({},e.decorators,i.decorators)),r.hooks={},r.protoAccessControl=u.createProtoAccessControl(i);var c=i.allowCallsToHelperMissing||n;s.moveHelperToHooks(r,"helperMissing",c),s.moveHelperToHooks(r,"blockHelperMissing",c)}},f._child=function(e,n,o,a){if(t.useBlockParams&&!o)throw new i.default("must pass block params");if(t.useDepths&&!a)throw new i.default("must pass parent depths");return c(r,e,t[e],n,0,o,a)},f},e.wrapProgram=c,e.resolvePartial=function(t,e,n){return t?t.call||n.name||(n.name=t,t=n.partials[t]):t="@partial-block"===n.name?n.data["partial-block"]:n.partials[n.name],t},e.invokePartial=function(t,e,n){var r=n.data&&n.data["partial-block"];n.partial=!0,n.ids&&(n.data.contextPath=n.ids[0]||n.data.contextPath);var s=void 0;if(n.fn&&n.fn!==f&&function(){n.data=a.createFrame(n.data);var t=n.fn;s=n.data["partial-block"]=function(e){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return n.data=a.createFrame(n.data),n.data["partial-block"]=r,t(e,n)},t.partials&&(n.partials=o.extend({},n.partials,t.partials))}(),void 0===t&&s&&(t=s),void 0===t)throw new i.default("The partial "+n.name+" could not be found");if(t instanceof Function)return t(e,n)},e.noop=f;var r,o=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(849)),i=(r=n(769))&&r.__esModule?r:{default:r},a=n(871),s=n(277),l=n(614),u=n(865);function c(t,e,n,r,o,i,a){function s(e){var o=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=a;return!a||e==a[0]||e===t.nullContext&&null===a[0]||(s=[e].concat(a)),n(t,e,t.helpers,t.partials,o.data||r,i&&[o.blockParams].concat(i),s)}return(s=d(n,s,t,a,r,i)).program=e,s.depth=a?a.length:0,s.blockParams=o||0,s}function f(){return""}function d(t,e,n,r,i,a){if(t.decorator){var s={};e=t.decorator(e,s,n,r&&r[0],i,a,r),o.extend(e,s)}return e}},613:(t,e)=>{"use strict";function n(t){this.string=t}e.__esModule=!0,n.prototype.toString=n.prototype.toHTML=function(){return""+this.string},e.default=n,t.exports=e.default},849:(t,e)=>{"use strict";e.__esModule=!0,e.extend=a,e.indexOf=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},e.escapeExpression=function(t){if("string"!=typeof t){if(t&&t.toHTML)return t.toHTML();if(null==t)return"";if(!t)return t+"";t=""+t}return o.test(t)?t.replace(r,i):t},e.isEmpty=function(t){return!t&&0!==t||!(!u(t)||0!==t.length)},e.createFrame=function(t){var e=a({},t);return e._parent=t,e},e.blockParams=function(t,e){return t.path=e,t},e.appendContextPath=function(t,e){return(t?t+".":"")+e};var n={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},r=/[&<>"'`=]/g,o=/[&<>"'`=]/;function i(t){return n[t]}function a(t){for(var e=1;e<arguments.length;e++)for(var n in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],n)&&(t[n]=arguments[e][n]);return t}var s=Object.prototype.toString;e.toString=s;var l=function(t){return"function"==typeof t};l(/x/)&&(e.isFunction=l=function(t){return"function"==typeof t&&"[object Function]"===s.call(t)}),e.isFunction=l;var u=Array.isArray||function(t){return!(!t||"object"!=typeof t)&&"[object Array]"===s.call(t)};e.isArray=u},633:(t,e,n)=>{t.exports=n(261).default},233:function(t){t.exports=function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=1)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=n(6),i=n(7),a=function(){function t(e){(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")})(this,t),this.matcher=e.matcher,this._matchedCount=0}return r(t,[{key:"_fireHandlers",value:function(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=this._getCache(r),a={body:e||o,query:r.query,params:r.params};(0,i.def)(a,"route",r.path),(0,i.def)(a,"url",r.url),!e&&o&&(a._id=r._id),r.handler(a),this._cacheBody(e,r)}}},{key:"_getCache",value:function(t){return(0,o.getCache)(t._id)}},{key:"_cacheBody",value:function(t,e){t&&(0,o.setCache)(e._id,t)}},{key:"getMatchedCount",value:function(){return this._matchedCount}},{key:"go",value:function(t,e){}},{key:"redirect",value:function(t,e){}},{key:"back",value:function(){}},{key:"stop",value:function(){}}]),t}();e.default=a},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=r(n(2)),a=r(n(5)),s=r(n(8)),l=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"hash";if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._mount=document.getElementById(e),!this._mount)throw new Error("Can not get mount point document.getElementById(#"+e+")...");this._subRouteView='<div id="__sub-route-view"></div>',this._subMount=null,this._isPassing=!1,this._cache={},this._middlewares=[],this._matcher=new i.default,this._history="hash"===n?new s.default({matcher:this._matcher}):new a.default({matcher:this._matcher})}return o(t,[{key:"render",value:function(t){this._isPassing?this._subMount.innerHTML=t:this._mount.innerHTML=t}},{key:"next",value:function(t){this._mount.innerHTML=t,this._isPassing=this._history.getMatchedCount()>1,this._subMount=document.querySelector("#__sub-route-view")}},{key:"subRoute",value:function(){return this._subRouteView}},{key:"use",value:function(t){this._middlewares.push(t)}},{key:"route",value:function(t,e){var n=this;this._matcher.add(t,(function(r){if("*"!==t&&!r._id)for(var o=0;o<n._middlewares.length;o++)n._middlewares[o](r);e(r,n,n.next.bind(n))}))}},{key:"go",value:function(t,e){this._isPassing=!1,this._history.go(t,e)}},{key:"redirect",value:function(t,e){this._isPassing=!1,this._history.redirect(t,e)}},{key:"back",value:function(){this._isPassing=!1,this._history.back()}},{key:"stop",value:function(){this._history.stop()}}]),t}();e.default=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(t){return t&&t.__esModule?t:{default:t}}(n(3)),i=n(4),a=function(){function t(){(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")})(this,t),this._routes=[],this._id=0}return r(t,[{key:"match",value:function(t){var e=[],n="",r=t.indexOf("?"),o=!0;r>-1&&(n=t.substr(r),t=t.slice(0,r));for(var a=0;a<this._routes.length;a++){var s=this._routes[a],l=s.reg.exec(t);if(l){if("*"!==s.path&&(o=!1),!o&&"*"===s.path)continue;e.push({_id:s._id,path:s.path,url:t+n,params:this._getParams(s.params,l),query:(0,i.parseQuery)(n),handler:s.handler})}}return e}},{key:"add",value:function(t,e){var n=this._toReg({path:t,handler:e});n._id=++this._id,this._routes.push(n)}},{key:"_toReg",value:function(t){return t.params=[],t.reg="*"===t.path?/[\w\W]*/i:(0,o.default)(t.path,t.params,{end:!1}),t}},{key:"_getParams",value:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments[1],n={},r=0;r<t.length;r++)n[t[r].name]=e[r+1];return n}}]),t}();e.default=a},function(t,e){function n(t,e){for(var n,r=[],a=0,s=0,l="",u=e&&e.delimiter||c,p=e&&e.delimiters||f,h=!1;null!==(n=d.exec(t));){var v=n[0],m=n[1],g=n.index;if(l+=t.slice(s,g),s=g+v.length,m)l+=m[1],h=!0;else{var A="",y=t[s],w=n[2],b=n[3],_=n[4],x=n[5];if(!h&&l.length){var E=l.length-1;p.indexOf(l[E])>-1&&(A=l[E],l=l.slice(0,E))}l&&(r.push(l),l="",h=!1);var S=""!==A&&void 0!==y&&y!==A,T="+"===x||"*"===x,C="?"===x||"*"===x,D=A||u,k=b||_;r.push({name:w||a++,prefix:A,delimiter:D,optional:C,repeat:T,partial:S,pattern:k?i(k):"[^"+o(D)+"]+?"})}}return(l||s<t.length)&&r.push(l+t.substr(s)),r}function r(t){for(var e=new Array(t.length),n=0;n<t.length;n++)"object"==typeof t[n]&&(e[n]=new RegExp("^(?:"+t[n].pattern+")$"));return function(n,r){for(var o="",i=r&&r.encode||encodeURIComponent,a=0;a<t.length;a++){var s=t[a];if("string"!=typeof s){var l,u=n?n[s.name]:void 0;if(Array.isArray(u)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but got array');if(0===u.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var c=0;c<u.length;c++){if(l=i(u[c]),!e[a].test(l))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'"');o+=(0===c?s.prefix:s.delimiter)+l}}else if("string"!=typeof u&&"number"!=typeof u&&"boolean"!=typeof u){if(!s.optional)throw new TypeError('Expected "'+s.name+'" to be '+(s.repeat?"an array":"a string"));s.partial&&(o+=s.prefix)}else{if(l=i(String(u)),!e[a].test(l))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but got "'+l+'"');o+=s.prefix+l}}else o+=s}return o}}function o(t){return t.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function i(t){return t.replace(/([=!:$\/()])/g,"\\$1")}function a(t){return t&&t.sensitive?"":"i"}function s(t,e,r){return l(n(t,r),e,r)}function l(t,e,n){for(var r=(n=n||{}).strict,i=!1!==n.end,s=o(n.delimiter||c),l=n.delimiters||f,u=[].concat(n.endsWith||[]).map(o).concat("$").join("|"),d="",p=!1,h=0;h<t.length;h++){var v=t[h];if("string"==typeof v)d+=o(v),p=h===t.length-1&&l.indexOf(v[v.length-1])>-1;else{var m=o(v.prefix),g=v.repeat?"(?:"+v.pattern+")(?:"+m+"(?:"+v.pattern+"))*":v.pattern;e&&e.push(v),v.optional?v.partial?d+=m+"("+g+")?":d+="(?:"+m+"("+g+"))?":d+=m+"("+g+")"}}return i?(r||(d+="(?:"+s+")?"),d+="$"===u?"$":"(?="+u+")"):(r||(d+="(?:"+s+"(?="+u+"))?"),p||(d+="(?="+s+"|"+u+")")),new RegExp("^"+d,a(n))}function u(t,e,n){return t instanceof RegExp?function(t,e){if(!e)return t;var n=t.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,pattern:null});return t}(t,e):Array.isArray(t)?function(t,e,n){for(var r=[],o=0;o<t.length;o++)r.push(u(t[o],e,n).source);return new RegExp("(?:"+r.join("|")+")",a(n))}(t,e,n):s(t,e,n)}t.exports=u,t.exports.parse=n,t.exports.compile=function(t,e){return r(n(t,e))},t.exports.tokensToFunction=r,t.exports.tokensToRegExp=l;var c="/",f="./",d=new RegExp(["(\\\\.)","(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?"].join("|"),"g")},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")};e.parseQuery=function(t){var e={};return(t=t.trim().replace(/^(\?|#|&)/,""))?(t.split("&").forEach((function(t){var n=t.split("="),o=r(n,2),i=o[0],a=o[1],s=[decodeURIComponent(i),a?decodeURIComponent(a):null],l=s[1];e[s[0]]=l})),e):null}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(t){return t&&t.__esModule?t:{default:t}}(n(0)),i=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n._init(),window.addEventListener("load",n._listen),window.addEventListener("popstate",n._listen),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),r(e,[{key:"_init",value:function(){var t=this;this._listen=function(e){var n=""+location.pathname+location.search,r=t.matcher.match(n);t._matchedCount=r.length,t._fireHandlers(r,e.state)}}},{key:"_routeTo",value:function(t,e){var n=this.matcher.match(t);this._matchedCount=n.length,this._fireHandlers(n,e)}},{key:"go",value:function(t,e){history.pushState(e,"",t),this._routeTo(t,e)}},{key:"redirect",value:function(t,e){history.replaceState(e,"",t),this._routeTo(t,e)}},{key:"back",value:function(){history.go(-1)}},{key:"stop",value:function(){window.removeEventListener("load",this._listen),window.removeEventListener("popstate",this._listen)}}]),e}(o.default);e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.setCache=function(t,e){e&&r.setItem(""+o+t,JSON.stringify(e))},e.getCache=function(t){try{var e=r.getItem(""+o+t);return e?JSON.parse(e):null}catch(t){throw new Error("parse body err")}};var r=sessionStorage,o="smer"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.def=function(t,e,n){Object.defineProperty(t,e,{writable:!1,enumerable:!0,value:n})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(t){return t&&t.__esModule?t:{default:t}}(n(0)),i=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n._cache={},n._init(),window.addEventListener("load",n._listen),window.addEventListener("hashchange",n._listen),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),r(e,[{key:"_getHash",value:function(){return location.hash.slice(1)}},{key:"_init",value:function(){var t=this;this._listen=function(e){var n=t._getHash(),r=t.matcher.match(n);t._matchedCount=r.length,t._fireHandlers(r,t._cache[n])}}},{key:"go",value:function(t,e){this._cache[t]=e,location.hash=""+t}},{key:"redirect",value:function(t,e){var n=location.href,r=n.indexOf("#");t=r>0?n.slice(0,r)+"#"+t:n.slice(0,0)+"#"+t,this._cache[t]=e,location.replace(t)}},{key:"back",value:function(){history.go(-1)}},{key:"stop",value:function(){window.removeEventListener("load",this._listen),window.removeEventListener("hashchange",this._listen)}}]),e}(o.default);e.default=i}])},53:(t,e,n)=>{var r=n(129),o=n(890),i=[n(293)];t.exports=r.createStore(o,i)},293:(t,e,n)=>{t.exports=function(){return n(413),{}}},413:()=>{"object"!=typeof JSON&&(JSON={}),function(){"use strict";var rx_one=/^[\],:{}\s]*$/,rx_two=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,rx_three=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,rx_four=/(?:^|:|,)(?:\s*\[)+/g,rx_escapable=/[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,rx_dangerous=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta,rep;function f(t){return t<10?"0"+t:t}function this_value(){return this.valueOf()}function quote(t){return rx_escapable.lastIndex=0,rx_escapable.test(t)?'"'+t.replace(rx_escapable,(function(t){var e=meta[t];return"string"==typeof e?e:"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)}))+'"':'"'+t+'"'}function str(t,e){var n,r,o,i,a,s=gap,l=e[t];switch(l&&"object"==typeof l&&"function"==typeof l.toJSON&&(l=l.toJSON(t)),"function"==typeof rep&&(l=rep.call(e,t,l)),typeof l){case"string":return quote(l);case"number":return isFinite(l)?String(l):"null";case"boolean":case"null":return String(l);case"object":if(!l)return"null";if(gap+=indent,a=[],"[object Array]"===Object.prototype.toString.apply(l)){for(i=l.length,n=0;n<i;n+=1)a[n]=str(n,l)||"null";return o=0===a.length?"[]":gap?"[\n"+gap+a.join(",\n"+gap)+"\n"+s+"]":"["+a.join(",")+"]",gap=s,o}if(rep&&"object"==typeof rep)for(i=rep.length,n=0;n<i;n+=1)"string"==typeof rep[n]&&(o=str(r=rep[n],l))&&a.push(quote(r)+(gap?": ":":")+o);else for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(o=str(r,l))&&a.push(quote(r)+(gap?": ":":")+o);return o=0===a.length?"{}":gap?"{\n"+gap+a.join(",\n"+gap)+"\n"+s+"}":"{"+a.join(",")+"}",gap=s,o}}"function"!=typeof Date.prototype.toJSON&&(Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},Boolean.prototype.toJSON=this_value,Number.prototype.toJSON=this_value,String.prototype.toJSON=this_value),"function"!=typeof JSON.stringify&&(meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},JSON.stringify=function(t,e,n){var r;if(gap="",indent="","number"==typeof n)for(r=0;r<n;r+=1)indent+=" ";else"string"==typeof n&&(indent=n);if(rep=e,e&&"function"!=typeof e&&("object"!=typeof e||"number"!=typeof e.length))throw new Error("JSON.stringify");return str("",{"":t})}),"function"!=typeof JSON.parse&&(JSON.parse=function(text,reviver){var j;function walk(t,e){var n,r,o=t[e];if(o&&"object"==typeof o)for(n in o)Object.prototype.hasOwnProperty.call(o,n)&&(void 0!==(r=walk(o,n))?o[n]=r:delete o[n]);return reviver.call(t,e,o)}if(text=String(text),rx_dangerous.lastIndex=0,rx_dangerous.test(text)&&(text=text.replace(rx_dangerous,(function(t){return"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)}))),rx_one.test(text.replace(rx_two,"@").replace(rx_three,"]").replace(rx_four,"")))return j=eval("("+text+")"),"function"==typeof reviver?walk({"":j},""):j;throw new SyntaxError("JSON.parse")})}()},129:(t,e,n)=>{var r=n(123),o=r.slice,i=r.pluck,a=r.each,s=r.bind,l=r.create,u=r.isList,c=r.isFunction,f=r.isObject;t.exports={createStore:p};var d={version:"2.0.12",enabled:!1,get:function(t,e){var n=this.storage.read(this._namespacePrefix+t);return this._deserialize(n,e)},set:function(t,e){return void 0===e?this.remove(t):(this.storage.write(this._namespacePrefix+t,this._serialize(e)),e)},remove:function(t){this.storage.remove(this._namespacePrefix+t)},each:function(t){var e=this;this.storage.each((function(n,r){t.call(e,e._deserialize(n),(r||"").replace(e._namespaceRegexp,""))}))},clearAll:function(){this.storage.clearAll()},hasNamespace:function(t){return this._namespacePrefix=="__storejs_"+t+"_"},createStore:function(){return p.apply(this,arguments)},addPlugin:function(t){this._addPlugin(t)},namespace:function(t){return p(this.storage,this.plugins,t)}};function p(t,e,n){n||(n=""),t&&!u(t)&&(t=[t]),e&&!u(e)&&(e=[e]);var r=n?"__storejs_"+n+"_":"",p=n?new RegExp("^"+r):null;if(!/^[a-zA-Z0-9_\-]*$/.test(n))throw new Error("store.js namespaces can only have alphanumerics + underscores and dashes");var h={_namespacePrefix:r,_namespaceRegexp:p,_testStorage:function(t){try{var e="__storejs__test__";t.write(e,e);var n=t.read(e)===e;return t.remove(e),n}catch(t){return!1}},_assignPluginFnProp:function(t,e){var n=this[e];this[e]=function(){var e=o(arguments,0),r=this,i=[function(){if(n)return a(arguments,(function(t,n){e[n]=t})),n.apply(r,e)}].concat(e);return t.apply(r,i)}},_serialize:function(t){return JSON.stringify(t)},_deserialize:function(t,e){if(!t)return e;var n="";try{n=JSON.parse(t)}catch(e){n=t}return void 0!==n?n:e},_addStorage:function(t){this.enabled||this._testStorage(t)&&(this.storage=t,this.enabled=!0)},_addPlugin:function(t){var e=this;if(u(t))a(t,(function(t){e._addPlugin(t)}));else if(!i(this.plugins,(function(e){return t===e}))){if(this.plugins.push(t),!c(t))throw new Error("Plugins must be function values that return objects");var n=t.call(this);if(!f(n))throw new Error("Plugins must return an object of function properties");a(n,(function(n,r){if(!c(n))throw new Error("Bad plugin property: "+r+" from plugin "+t.name+". Plugins should only return functions.");e._assignPluginFnProp(n,r)}))}},addStorage:function(t){!function(){var t="undefined"==typeof console?null:console;t&&(t.warn?t.warn:t.log).apply(t,arguments)}("store.addStorage(storage) is deprecated. Use createStore([storages])"),this._addStorage(t)}},v=l(h,d,{plugins:[]});return v.raw={},a(v,(function(t,e){c(t)&&(v.raw[e]=s(v,t))})),a(t,(function(t){v._addStorage(t)})),a(e,(function(t){v._addPlugin(t)})),v}},123:(t,e,n)=>{var r=Object.assign?Object.assign:function(t,e,n,r){for(var o=1;o<arguments.length;o++)l(Object(arguments[o]),(function(e,n){t[n]=e}));return t},o=function(){if(Object.create)return function(t,e,n,o){var i=s(arguments,1);return r.apply(this,[Object.create(t)].concat(i))};{function t(){}return function(e,n,o,i){var a=s(arguments,1);return t.prototype=e,r.apply(this,[new t].concat(a))}}}(),i=String.prototype.trim?function(t){return String.prototype.trim.call(t)}:function(t){return t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")},a="undefined"!=typeof window?window:n.g;function s(t,e){return Array.prototype.slice.call(t,e||0)}function l(t,e){u(t,(function(t,n){return e(t,n),!1}))}function u(t,e){if(c(t)){for(var n=0;n<t.length;n++)if(e(t[n],n))return t[n]}else for(var r in t)if(t.hasOwnProperty(r)&&e(t[r],r))return t[r]}function c(t){return null!=t&&"function"!=typeof t&&"number"==typeof t.length}t.exports={assign:r,create:o,trim:i,bind:function(t,e){return function(){return e.apply(t,Array.prototype.slice.call(arguments,0))}},slice:s,each:l,map:function(t,e){var n=c(t)?[]:{};return u(t,(function(t,r){return n[r]=e(t,r),!1})),n},pluck:u,isList:c,isFunction:function(t){return t&&"[object Function]"==={}.toString.call(t)},isObject:function(t){return t&&"[object Object]"==={}.toString.call(t)},Global:a}},890:(t,e,n)=>{t.exports=[n(653),n(333),n(991),n(234),n(416),n(529)]},234:(t,e,n)=>{var r=n(123),o=r.Global,i=r.trim;t.exports={name:"cookieStorage",read:function(t){if(!t||!u(t))return null;var e="(?:^|.*;\\s*)"+escape(t).replace(/[\-\.\+\*]/g,"\\$&")+"\\s*\\=\\s*((?:[^;](?!;))*[^;]?).*";return unescape(a.cookie.replace(new RegExp(e),"$1"))},write:function(t,e){t&&(a.cookie=escape(t)+"="+escape(e)+"; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/")},each:s,remove:l,clearAll:function(){s((function(t,e){l(e)}))}};var a=o.document;function s(t){for(var e=a.cookie.split(/; ?/g),n=e.length-1;n>=0;n--)if(i(e[n])){var r=e[n].split("="),o=unescape(r[0]);t(unescape(r[1]),o)}}function l(t){t&&u(t)&&(a.cookie=escape(t)+"=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/")}function u(t){return new RegExp("(?:^|;\\s*)"+escape(t).replace(/[\-\.\+\*]/g,"\\$&")+"\\s*\\=").test(a.cookie)}},653:(t,e,n)=>{var r=n(123).Global;function o(){return r.localStorage}function i(t){return o().getItem(t)}t.exports={name:"localStorage",read:i,write:function(t,e){return o().setItem(t,e)},each:function(t){for(var e=o().length-1;e>=0;e--){var n=o().key(e);t(i(n),n)}},remove:function(t){return o().removeItem(t)},clearAll:function(){return o().clear()}}},529:t=>{t.exports={name:"memoryStorage",read:function(t){return e[t]},write:function(t,n){e[t]=n},each:function(t){for(var n in e)e.hasOwnProperty(n)&&t(e[n],n)},remove:function(t){delete e[t]},clearAll:function(t){e={}}};var e={}},333:(t,e,n)=>{var r=n(123).Global;t.exports={name:"oldFF-globalStorage",read:function(t){return o[t]},write:function(t,e){o[t]=e},each:i,remove:function(t){return o.removeItem(t)},clearAll:function(){i((function(t,e){delete o[t]}))}};var o=r.globalStorage;function i(t){for(var e=o.length-1;e>=0;e--){var n=o.key(e);t(o[n],n)}}},991:(t,e,n)=>{var r=n(123).Global;t.exports={name:"oldIE-userDataStorage",write:function(t,e){if(!s){var n=u(t);a((function(t){t.setAttribute(n,e),t.save(o)}))}},read:function(t){if(!s){var e=u(t),n=null;return a((function(t){n=t.getAttribute(e)})),n}},each:function(t){a((function(e){for(var n=e.XMLDocument.documentElement.attributes,r=n.length-1;r>=0;r--){var o=n[r];t(e.getAttribute(o.name),o.name)}}))},remove:function(t){var e=u(t);a((function(t){t.removeAttribute(e),t.save(o)}))},clearAll:function(){a((function(t){var e=t.XMLDocument.documentElement.attributes;t.load(o);for(var n=e.length-1;n>=0;n--)t.removeAttribute(e[n].name);t.save(o)}))}};var o="storejs",i=r.document,a=function(){if(!i||!i.documentElement||!i.documentElement.addBehavior)return null;var t,e,n,r="script";try{(e=new ActiveXObject("htmlfile")).open(),e.write("<"+r+">document.w=window</"+r+'><iframe src="/favicon.ico"></iframe>'),e.close(),t=e.w.frames[0].document,n=t.createElement("div")}catch(e){n=i.createElement("div"),t=i.body}return function(e){var r=[].slice.call(arguments,0);r.unshift(n),t.appendChild(n),n.addBehavior("#default#userData"),n.load(o),e.apply(this,r),t.removeChild(n)}}(),s=(r.navigator?r.navigator.userAgent:"").match(/ (MSIE 8|MSIE 9|MSIE 10)\./),l=new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]","g");function u(t){return t.replace(/^\d/,"___$&").replace(l,"___")}},416:(t,e,n)=>{var r=n(123).Global;function o(){return r.sessionStorage}function i(t){return o().getItem(t)}t.exports={name:"sessionStorage",read:i,write:function(t,e){return o().setItem(t,e)},each:function(t){for(var e=o().length-1;e>=0;e--){var n=o().key(e);t(i(n),n)}},remove:function(t){return o().removeItem(t)},clearAll:function(){return o().clear()}}},202:t=>{t.exports=function(){var t={rule:/^(.+?)\((.+)\)$/,numericRegex:/^[0-9]+$/,email:/^[a-z0-9]+([._\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/,ip:/^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])((\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])){3}|(\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])){5})$/,fax:/^(([0\+]\d{2,3}-)?(0\d{2,3})-)(\d{7,8})(-(\d{3,}))?$/,phone:/^((\+?[0-9]{1,4})|(\(\+86\)))?(13[0-9]|14[57]|15[012356789]|17[03678]|18[0-9])\d{8}$/,url:/[a-zA-z]+:\/\/[^\s]/,money:/^(0|[1-9]\d*)(\.\d+)?$/,english:/^[A-Za-z]+$/,chinese:/^[\u0391-\uFFE5]+$/,percent:/^(?:[1-9][0-9]?|100)(?:\.[0-9]{1,2})?$/},e={is_email:function(e){return t.email.test(i(e))},is_ip:function(e){return t.ip.test(i(e))},is_fax:function(e){return t.fax.test(i(e))},is_tel:function(e){return t.fax.test(i(e))},is_phone:function(e){return t.phone.test(i(e))},is_url:function(e){return t.url.test(i(e))},is_money:function(e){return t.money.test(i(e))},is_english:function(e){return t.english.test(i(e))},is_chinese:function(e){return t.chinese.test(i(e))},is_percent:function(e){return t.percent.test(i(e))},required:function(t){var e=i(t);return"checkbox"===t.type||"radio"===t.type?!0===t.checked:null!==e&&""!==e},max_length:function(e,n){return!!t.numericRegex.test(n)&&i(e).length<=parseInt(n,10)},min_length:function(e,n){return!!t.numericRegex.test(n)&&i(e).length>=parseInt(n,10)},same:function(t,e){return i(t)==i(this.fields[e].element)},different:function(t,e){return!this.same(t,e)},contains:function(t,e){return i(t)==e},accepted:function(t){var e=i(t);return"YES"==e.toUpperCase()||"ON"==e.toUpperCase()||1==e||0==e}},n=function(t,n,r){for(var i in e)this[(a=i,a.replace(/\_([a-z])/g,(function(t,e){return e.toUpperCase()})))]=e[i];var a,s;if(!t)return this;this.callback=r||function(){},this.form=("object"==typeof(s=t)?s:document.forms[s])||{},this.errors=[],this.fields={},this.handles={};for(var l=0,u=n.length;l<u;l++){var c=n[l];(c.name||c.names)&&c.rules?o(this,c,c.name):console.warn(c)}var f,d=this.form.onsubmit;this.form.onsubmit=(f=this,function(t){try{return f.validate(t)&&(void 0===d||d())}catch(t){}})};function r(t,e){var n;if(!(t.length>0)||"radio"!==t[0].type&&"checkbox"!==t[0].type)return t[e];for(n=0,elementLength=t.length;n<elementLength;n++)if(t[n].checked)return t[n][e]}function o(e,n,r){for(var o in e.fields[r]={name:r,display:n.display||r,rules:n.rules,id:null,element:null,type:null,value:null,checked:null},n)n.hasOwnProperty(o)&&/^regexp\_/.test(o)&&(t[o]=n[o])}function i(t){return"string"==typeof t?t:t.value}return n.prototype={validate:function(t){if(this._passes)return this;for(var e in this.handles.ok=!0,this.handles.evt=t,this.errors=[],this.fields)if(this.fields.hasOwnProperty(e)){var n=this.fields[e]||{},o=this.form[n.name];o&&void 0!==o&&(n.id=r(o,"id"),n.element=o,n.type=o.length>0?o[0].type:o.type,n.value=r(o,"value"),n.checked=r(o,"checked"),this._validateField(n))}return"function"==typeof this.callback&&this.callback(this,t),this.errors.length>0&&(t&&t.preventDefault?t.preventDefault():event&&(event.returnValue=!1)),this},passes:function(){return this._passes=!0,this},_validateField:function(n){for(var r=n.rules.split("|"),o=!n.value||""===n.value||void 0===n.value,i=0,a=r.length;i<a;i++){var s=r[i],l=t.rule.exec(s),u=null,c=!1;if(l&&(s=l[1],u=l[2]),(!o||-1!==r.indexOf("required"))&&("function"==typeof e[s]&&(e[s].apply(this,[n,u])||(c=!0)),t[s]&&/^regexp\_/.test(s)&&(t[s].test(n.value)||(c=!0)),c)){var f,d,p=n.display.split("|")[i]&&n.display.split("|")[i].replace("{{"+n.name+"}}",n.value);for(d=0;d<this.errors.length;d+=1)n.element===this.errors[d].element&&(f=this.errors[d]);var h=f||{id:n.id,display:n.display,element:n.element,name:n.name,message:p,messages:[],rule:s};h.messages.push(p),f||this.errors.push(h)}}return this}},n}()},903:t=>{var e;window,e=function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=141)}([function(t,e){t.exports=function(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){t.exports=n(142)},function(t,e,n){"use strict";n.r(e),n.d(e,"__extends",(function(){return o})),n.d(e,"__assign",(function(){return i})),n.d(e,"__rest",(function(){return a})),n.d(e,"__decorate",(function(){return s})),n.d(e,"__param",(function(){return l})),n.d(e,"__metadata",(function(){return u})),n.d(e,"__awaiter",(function(){return c})),n.d(e,"__generator",(function(){return f})),n.d(e,"__createBinding",(function(){return d})),n.d(e,"__exportStar",(function(){return p})),n.d(e,"__values",(function(){return h})),n.d(e,"__read",(function(){return v})),n.d(e,"__spread",(function(){return m})),n.d(e,"__spreadArrays",(function(){return g})),n.d(e,"__spreadArray",(function(){return A})),n.d(e,"__await",(function(){return y})),n.d(e,"__asyncGenerator",(function(){return w})),n.d(e,"__asyncDelegator",(function(){return b})),n.d(e,"__asyncValues",(function(){return _})),n.d(e,"__makeTemplateObject",(function(){return x})),n.d(e,"__importStar",(function(){return S})),n.d(e,"__importDefault",(function(){return T})),n.d(e,"__classPrivateFieldGet",(function(){return C})),n.d(e,"__classPrivateFieldSet",(function(){return D}));var r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)};function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var i=function(){return i=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},i.apply(this,arguments)};function a(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(t);o<r.length;o++)e.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(t,r[o])&&(n[r[o]]=t[r[o]])}return n}function s(t,e,n,r){var o,i=arguments.length,a=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(o=t[s])&&(a=(i<3?o(a):i>3?o(e,n,a):o(e,n))||a);return i>3&&a&&Object.defineProperty(e,n,a),a}function l(t,e){return function(n,r){e(n,r,t)}}function u(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function c(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{l(r.next(t))}catch(t){i(t)}}function s(t){try{l(r.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}l((r=r.apply(t,e||[])).next())}))}function f(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}var d=Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]};function p(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||d(e,t,n)}function h(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function v(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function m(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(v(arguments[e]));return t}function g(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var i=arguments[e],a=0,s=i.length;a<s;a++,o++)r[o]=i[a];return r}function A(t,e){for(var n=0,r=e.length,o=t.length;n<r;n++,o++)t[o]=e[n];return t}function y(t){return this instanceof y?(this.v=t,this):new y(t)}function w(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(t,e||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){o[t]&&(r[t]=function(e){return new Promise((function(n,r){i.push([t,e,n,r])>1||s(t,e)}))})}function s(t,e){try{(n=o[t](e)).value instanceof y?Promise.resolve(n.value.v).then(l,u):c(i[0][2],n)}catch(t){c(i[0][3],t)}var n}function l(t){s("next",t)}function u(t){s("throw",t)}function c(t,e){t(e),i.shift(),i.length&&s(i[0][0],i[0][1])}}function b(t){var e,n;return e={},r("next"),r("throw",(function(t){throw t})),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,o){e[r]=t[r]?function(e){return(n=!n)?{value:y(t[r](e)),done:"return"===r}:o?o(e):e}:o}}function _(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=h(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,o){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,o,(e=t[n](e)).done,e.value)}))}}}function x(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}var E=Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e};function S(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&d(e,t,n);return E(e,t),e}function T(t){return t&&t.__esModule?t:{default:t}}function C(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function D(t,e,n){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,n),n}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(89)),a=r(n(4)),s=r(n(26)),l=r(n(17)),u=r(n(121)),c=r(n(27)),f=r(n(91)),d=r(n(70)),p=r(n(28)),h=r(n(57));(0,o.default)(e,"__esModule",{value:!0}),e.DomElement=void 0;var v=n(2),m=n(6),g=[];function A(t){var e,n=[];return e=(0,i.default)(t)?t:t.split(";"),(0,a.default)(e).call(e,(function(t){var e,r=(0,s.default)(e=t.split(":")).call(e,(function(t){return(0,l.default)(t).call(t)}));2===r.length&&n.push(r[0]+":"+r[1])})),n}var y=function(){function t(e){if(this.elems=[],this.length=this.elems.length,this.dataSource=new u.default,e){if(e instanceof t)return e;var n=[],r=e instanceof Node?e.nodeType:-1;if(this.selector=e,1===r||9===r)n=[e];else if(function(t){return!!t&&(t instanceof HTMLCollection||t instanceof NodeList)}(e))n=m.toArray(e);else if(e instanceof Array)n=e;else if("string"==typeof e){var o,i=(0,l.default)(o=e.replace("/\n/mg","")).call(o);n=0===(0,c.default)(i).call(i,"<")?function(t){var e=document.createElement("div");e.innerHTML=t;var n=e.children;return m.toArray(n)}(i):function(t){var e=document.querySelectorAll(t);return m.toArray(e)}(i)}var a=n.length;if(!a)return this;for(var s=0;s<a;s++)this.elems.push(n[s]);this.length=a}}return(0,o.default)(t.prototype,"id",{get:function(){return this.elems[0].id},enumerable:!1,configurable:!0}),t.prototype.forEach=function(t){for(var e=0;e<this.length;e++){var n=this.elems[e];if(!1===t.call(n,n,e))break}return this},t.prototype.clone=function(t){var e;void 0===t&&(t=!1);var n=[];return(0,a.default)(e=this.elems).call(e,(function(e){n.push(e.cloneNode(!!t))})),w(n)},t.prototype.get=function(t){void 0===t&&(t=0);var e=this.length;return t>=e&&(t%=e),w(this.elems[t])},t.prototype.first=function(){return this.get(0)},t.prototype.last=function(){var t=this.length;return this.get(t-1)},t.prototype.on=function(t,e,n){return t?("function"==typeof e&&(n=e,e=""),(0,a.default)(this).call(this,(function(r){if(e){var o=function(t){var r=t.target;r.matches(e)&&n.call(r,t)};r.addEventListener(t,o),g.push({elem:r,selector:e,fn:n,agentFn:o})}else r.addEventListener(t,n)}))):this},t.prototype.off=function(t,e,n){return t?("function"==typeof e&&(n=e,e=""),(0,a.default)(this).call(this,(function(r){if(e){for(var o=-1,i=0;i<g.length;i++){var a=g[i];if(a.selector===e&&a.fn===n&&a.elem===r){o=i;break}}if(-1!==o){var s=(0,f.default)(g).call(g,o,1)[0].agentFn;r.removeEventListener(t,s)}}else r.removeEventListener(t,n)}))):this},t.prototype.attr=function(t,e){return null==e?this.elems[0].getAttribute(t)||"":(0,a.default)(this).call(this,(function(n){n.setAttribute(t,e)}))},t.prototype.removeAttr=function(t){(0,a.default)(this).call(this,(function(e){e.removeAttribute(t)}))},t.prototype.addClass=function(t){return t?(0,a.default)(this).call(this,(function(e){if(e.className){var n=e.className.split(/\s/);n=(0,d.default)(n).call(n,(function(t){return!!(0,l.default)(t).call(t)})),(0,c.default)(n).call(n,t)<0&&n.push(t),e.className=n.join(" ")}else e.className=t})):this},t.prototype.removeClass=function(t){return t?(0,a.default)(this).call(this,(function(e){if(e.className){var n=e.className.split(/\s/);n=(0,d.default)(n).call(n,(function(e){return!(!(e=(0,l.default)(e).call(e))||e===t)})),e.className=n.join(" ")}})):this},t.prototype.hasClass=function(t){if(!t)return!1;var e=this.elems[0];if(!e.className)return!1;var n=e.className.split(/\s/);return(0,p.default)(n).call(n,t)},t.prototype.css=function(t,e){var n;return n=""==e?"":t+":"+e+";",(0,a.default)(this).call(this,(function(e){var r,o=(0,l.default)(r=e.getAttribute("style")||"").call(r);if(o){var i=A(o);i=(0,s.default)(i).call(i,(function(e){return 0===(0,c.default)(e).call(e,t)?n:e})),""!=n&&(0,c.default)(i).call(i,n)<0&&i.push(n),""==n&&(i=A(i)),e.setAttribute("style",i.join("; "))}else e.setAttribute("style",n)}))},t.prototype.getBoundingClientRect=function(){return this.elems[0].getBoundingClientRect()},t.prototype.show=function(){return this.css("display","block")},t.prototype.hide=function(){return this.css("display","none")},t.prototype.children=function(){var t=this.elems[0];return t?w(t.children):null},t.prototype.childNodes=function(){var t=this.elems[0];return t?w(t.childNodes):null},t.prototype.replaceChildAll=function(t){for(var e=this.getNode(),n=this.elems[0];n.hasChildNodes();)e.firstChild&&n.removeChild(e.firstChild);this.append(t)},t.prototype.append=function(t){return(0,a.default)(this).call(this,(function(e){(0,a.default)(t).call(t,(function(t){e.appendChild(t)}))}))},t.prototype.remove=function(){return(0,a.default)(this).call(this,(function(t){if(t.remove)t.remove();else{var e=t.parentElement;e&&e.removeChild(t)}}))},t.prototype.isContain=function(t){var e=this.elems[0],n=t.elems[0];return e.contains(n)},t.prototype.getNodeName=function(){return this.elems[0].nodeName},t.prototype.getNode=function(t){return void 0===t&&(t=0),this.elems[t]},t.prototype.find=function(t){return w(this.elems[0].querySelectorAll(t))},t.prototype.text=function(t){return t?(0,a.default)(this).call(this,(function(e){e.innerHTML=t})):this.elems[0].innerHTML.replace(/<[^>]+>/g,(function(){return""}))},t.prototype.html=function(t){var e=this.elems[0];return t?(e.innerHTML=t,this):e.innerHTML},t.prototype.val=function(){var t,e=this.elems[0];return(0,l.default)(t=e.value).call(t)},t.prototype.focus=function(){return(0,a.default)(this).call(this,(function(t){t.focus()}))},t.prototype.prev=function(){return w(this.elems[0].previousElementSibling)},t.prototype.next=function(){return w(this.elems[0].nextElementSibling)},t.prototype.getNextSibling=function(){return w(this.elems[0].nextSibling)},t.prototype.parent=function(){return w(this.elems[0].parentElement)},t.prototype.parentUntil=function(t,e){var n=e||this.elems[0];if("BODY"===n.nodeName)return null;var r=n.parentElement;return null===r?null:r.matches(t)?w(r):this.parentUntil(t,r)},t.prototype.parentUntilEditor=function(t,e,n){var r=n||this.elems[0];if(w(r).equal(e.$textContainerElem)||w(r).equal(e.$toolbarElem))return null;var o=r.parentElement;return null===o?null:o.matches(t)?w(o):this.parentUntilEditor(t,e,o)},t.prototype.equal=function(e){return e instanceof t?this.elems[0]===e.elems[0]:e instanceof HTMLElement&&this.elems[0]===e},t.prototype.insertBefore=function(t){var e=w(t).elems[0];return e?(0,a.default)(this).call(this,(function(t){var n=e.parentNode;null==n||n.insertBefore(t,e)})):this},t.prototype.insertAfter=function(t){var e=w(t).elems[0],n=e&&e.nextSibling;return e?(0,a.default)(this).call(this,(function(t){var r=e.parentNode;n?r.insertBefore(t,n):r.appendChild(t)})):this},t.prototype.data=function(t,e){if(null==e)return this.dataSource.get(t);this.dataSource.set(t,e)},t.prototype.getNodeTop=function(t){if(this.length<1)return this;var e=this.parent();return t.$textElem.equal(this)||t.$textElem.equal(e)?this:(e.prior=this,e.getNodeTop(t))},t.prototype.getOffsetData=function(){var t=this.elems[0];return{top:t.offsetTop,left:t.offsetLeft,width:t.offsetWidth,height:t.offsetHeight,parent:t.offsetParent}},t.prototype.scrollTop=function(t){this.elems[0].scrollTo({top:t})},t}();function w(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return new((0,h.default)(y).apply(y,v.__spreadArrays([void 0],t)))}e.DomElement=y,e.default=w},function(t,e,n){t.exports=n(180)},function(t,e,n){"use strict";var r=n(8),o=n(71).f,i=n(101),a=n(9),s=n(40),l=n(19),u=n(16),c=function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e};t.exports=function(t,e){var n,f,d,p,h,v,m,g,A=t.target,y=t.global,w=t.stat,b=t.proto,_=y?r:w?r[A]:(r[A]||{}).prototype,x=y?a:a[A]||(a[A]={}),E=x.prototype;for(d in e)n=!i(y?d:A+(w?".":"#")+d,t.forced)&&_&&u(_,d),h=x[d],n&&(v=t.noTargetGet?(g=o(_,d))&&g.value:_[d]),p=n&&v?v:e[d],n&&typeof h==typeof p||(m=t.bind&&n?s(p,r):t.wrap&&n?c(p):b&&"function"==typeof p?s(Function.call,p):p,(t.sham||p&&p.sham||h&&h.sham)&&l(m,"sham",!0),x[d]=m,b&&(u(a,f=A+"Prototype")||l(a,f,{}),a[f][d]=p,t.real&&E&&!E[d]&&l(E,d,p)))}},function(t,e,n){"use strict";var r=n(0),o=r(n(92)),i=r(n(1)),a=r(n(256)),s=r(n(45)),l=r(n(46)),u=r(n(89)),c=r(n(26));(0,i.default)(e,"__esModule",{value:!0}),e.hexToRgb=e.getRandomCode=e.toArray=e.deepClone=e.isFunction=e.debounce=e.throttle=e.arrForEach=e.forEach=e.replaceSpecialSymbol=e.replaceHtmlSymbol=e.getRandom=e.UA=void 0;var f=n(2),d=function(){function t(){this._ua=navigator.userAgent;var t=this._ua.match(/(Edge?)\/(\d+)/);this.isOldEdge=!!(t&&"Edge"==t[1]&&(0,a.default)(t[2])<19),this.isFirefox=!(!/Firefox\/\d+/.test(this._ua)||/Seamonkey\/\d+/.test(this._ua))}return t.prototype.isIE=function(){return"ActiveXObject"in window},t.prototype.isWebkit=function(){return/webkit/i.test(this._ua)},t}();e.UA=new d,e.getRandom=function(t){var e;return void 0===t&&(t=""),t+(0,s.default)(e=Math.random().toString()).call(e,2)},e.replaceHtmlSymbol=function(t){return t.replace(/</gm,"&lt;").replace(/>/gm,"&gt;").replace(/"/gm,"&quot;").replace(/(\r\n|\r|\n)/g,"<br/>")},e.replaceSpecialSymbol=function(t){return t.replace(/&lt;/gm,"<").replace(/&gt;/gm,">").replace(/&quot;/gm,'"')},e.forEach=function(t,e){for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&!1===e(n,t[n]))break},e.arrForEach=function(t,e){var n,r,o=t.length||0;for(n=0;n<o&&(r=t[n],!1!==e.call(t,r,n));n++);},e.throttle=function(t,e){void 0===e&&(e=200);var n=!1;return function(){for(var r=this,o=[],i=0;i<arguments.length;i++)o[i]=arguments[i];n||(n=!0,(0,l.default)((function(){n=!1,t.call.apply(t,f.__spreadArrays([r],o))}),e))}},e.debounce=function(t,e){void 0===e&&(e=200);var n=0;return function(){for(var r=this,o=[],i=0;i<arguments.length;i++)o[i]=arguments[i];n&&window.clearTimeout(n),n=(0,l.default)((function(){n=0,t.call.apply(t,f.__spreadArrays([r],o))}),e)}},e.isFunction=function(t){return"function"==typeof t},e.deepClone=function t(e){if("object"!==(0,o.default)(e)||"function"==typeof e||null===e)return e;var n;for(var r in(0,u.default)(e)&&(n=[]),(0,u.default)(e)||(n={}),e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=t(e[r]));return n},e.toArray=function(t){return(0,s.default)(Array.prototype).call(t)},e.getRandomCode=function(){var t;return(0,s.default)(t=Math.random().toString(36)).call(t,-5)},e.hexToRgb=function(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);if(null==e)return null;var n=(0,c.default)(e).call(e,(function(t){return(0,a.default)(t,16)}));return"rgb("+n[1]+", "+n[2]+", "+n[3]+")"}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.EMPTY_P_REGEX=e.EMPTY_P_LAST_REGEX=e.EMPTY_P=e.urlRegex=e.EMPTY_FN=void 0,e.EMPTY_FN=function(){},e.urlRegex=/(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-.,@?^=%&amp;:/~+#]*[\w\-@?^=%&amp;/~+#])?/g,e.EMPTY_P='<p data-we-empty-p=""><br></p>',e.EMPTY_P_LAST_REGEX=/<p data-we-empty-p=""><br\/?><\/p>$/gim,e.EMPTY_P_REGEX=/<p data-we-empty-p="">/gim},function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||Function("return this")()}).call(this,n(145))},function(t,e){t.exports={}},function(t,e,n){var r=n(8),o=n(74),i=n(16),a=n(64),s=n(76),l=n(106),u=o("wks"),c=r.Symbol,f=l?c:c&&c.withoutSetter||a;t.exports=function(t){return i(u,t)||(s&&i(c,t)?u[t]=c[t]:u[t]=f("Symbol."+t)),u[t]}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(9),o=n(16),i=n(93),a=n(18).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});o(e,t)||a(e,t,{value:i.f(t)})}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(11);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,n){var r=n(9);t.exports=function(t){return r[t+"Prototype"]}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){t.exports=n(192)},function(t,e,n){var r=n(14),o=n(100),i=n(25),a=n(60),s=Object.defineProperty;e.f=r?s:function(t,e,n){if(i(t),e=a(e,!0),i(n),o)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(14),o=n(18),i=n(48);t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){"use strict";var r,o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),i=[];function a(t){for(var e=-1,n=0;n<i.length;n++)if(i[n].identifier===t){e=n;break}return e}function s(t,e){for(var n={},r=[],o=0;o<t.length;o++){var s=t[o],l=e.base?s[0]+e.base:s[0],u=n[l]||0,c="".concat(l," ").concat(u);n[l]=u+1;var f=a(c),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:c,updater:v(d,e),references:1}),r.push(c)}return r}function l(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=o(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var u,c=(u=[],function(t,e){return u[t]=e,u.filter(Boolean).join("\n")});function f(t,e,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=c(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function d(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var p=null,h=0;function v(t,e){var n,r,o;if(e.singleton){var i=h++;n=p||(p=l(e)),r=f.bind(null,n,i,!1),o=f.bind(null,n,i,!0)}else n=l(e),r=d.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var o=a(n[r]);i[o].references--}for(var l=s(t,e),u=0;u<n.length;u++){var c=a(n[u]);0===i[c].references&&(i[c].updater(),i.splice(c,1))}n=l}}}},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n,r,o,i=t[1]||"",a=t[3];if(!a)return i;if(e&&"function"==typeof btoa){var s=(n=a,r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),"/*# ".concat(o," */")),l=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[i].concat(l).concat([s]).join("\n")}return[i].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<t.length;s++){var l=[].concat(t[s]);r&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),e.push(l))}},e}},function(t,e,n){var r=n(14),o=n(11),i=n(16),a=Object.defineProperty,s={},l=function(t){throw t};t.exports=function(t,e){if(i(s,t))return s[t];e||(e={});var n=[][t],u=!!i(e,"ACCESSORS")&&e.ACCESSORS,c=i(e,0)?e[0]:l,f=i(e,1)?e[1]:void 0;return s[t]=!!n&&!o((function(){if(u&&!r)return!0;var t={length:-1};u?a(t,1,{enumerable:!0,get:l}):t[1]=1,n.call(t,c,f)}))}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=function(t){function e(e,n){return t.call(this,e,n)||this}return r.__extends(e,t),e}(r.__importDefault(n(95)).default);e.default=o},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4)),a=r(n(46));(0,o.default)(e,"__esModule",{value:!0});var s=n(2),l=s.__importDefault(n(3)),u=s.__importDefault(n(95)),c=s.__importDefault(n(134)),f=function(t){function e(e,n,r){var o=t.call(this,e,n)||this;r.title=n.i18next.t("menus.dropListMenu."+r.title);var s,u="zh-CN"===n.config.lang?"":"w-e-drop-list-tl";""!==u&&"list"===r.type&&(0,i.default)(s=r.list).call(s,(function(t){var e=t.$elem,n=l.default(e.children());if(n.length>0){var r=null==n?void 0:n.getNodeName();r&&"I"===r&&e.addClass(u)}}));var f=new c.default(o,r);return o.dropList=f,e.on("click",(function(){var t;null!=n.selection.getRange()&&(e.css("z-index",n.zIndex.get("menu")),(0,i.default)(t=n.txt.eventHooks.dropListMenuHoverEvents).call(t,(function(t){return t()})),f.show())})).on("mouseleave",(function(){e.css("z-index","auto"),f.hideTimeoutId=(0,a.default)((function(){f.hide()}))})),o}return s.__extends(e,t),e}(u.default);e.default=f},function(t,e,n){var r=n(13);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e,n){t.exports=n(188)},function(t,e,n){t.exports=n(201)},function(t,e,n){t.exports=n(213)},function(t,e,n){t.exports=n(283)},function(t,e,n){var r=n(72),o=n(49);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(49);t.exports=function(t){return Object(r(t))}},function(t,e,n){var r=n(40),o=n(72),i=n(31),a=n(35),s=n(88),l=[].push,u=function(t){var e=1==t,n=2==t,u=3==t,c=4==t,f=6==t,d=5==t||f;return function(p,h,v,m){for(var g,A,y=i(p),w=o(y),b=r(h,v,3),_=a(w.length),x=0,E=m||s,S=e?E(p,_):n?E(p,0):void 0;_>x;x++)if((d||x in w)&&(A=b(g=w[x],x,y),t))if(e)S[x]=A;else if(A)switch(t){case 3:return!0;case 5:return g;case 6:return x;case 2:l.call(S,g)}else if(c)return!1;return f?-1:u||c?c:S}};t.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6)}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4)),a=r(n(29)),s=r(n(132));(0,o.default)(e,"__esModule",{value:!0});var l=n(2),u=l.__importDefault(n(3)),c=n(7),f=function(){function t(e,n){this.menu=e,this.conf=n,this.$container=u.default('<div class="w-e-panel-container"></div>');var r=e.editor;r.txt.eventHooks.clickEvents.push(t.hideCurAllPanels),r.txt.eventHooks.toolbarClickEvents.push(t.hideCurAllPanels),r.txt.eventHooks.dropListMenuHoverEvents.push(t.hideCurAllPanels)}return t.prototype.create=function(){var e=this,n=this.menu;if(!t.createdMenus.has(n)){var r=this.conf,o=this.$container,s=r.width||300,f=n.editor.$toolbarElem.getBoundingClientRect(),d=n.$elem.getBoundingClientRect(),p=f.height+f.top-d.top,h=(f.width-s)/2+f.left-d.left;Math.abs(h)>300&&(h=d.left<document.documentElement.clientWidth/2?-d.width/2:-s+d.width/2),o.css("width",s+"px").css("margin-top",p+"px").css("margin-left",h+"px").css("z-index",n.editor.zIndex.get("panel"));var v=u.default('<i class="w-e-icon-close w-e-panel-close"></i>');o.append(v),v.on("click",(function(){e.remove()}));var m=u.default('<ul class="w-e-panel-tab-title"></ul>'),g=u.default('<div class="w-e-panel-tab-content"></div>');o.append(m).append(g);var A=r.height;A&&g.css("height",A+"px").css("overflow-y","auto");var y=r.tabs||[],w=[],b=[];(0,i.default)(y).call(y,(function(t,e){if(t){var n=t.title||"",r=t.tpl||"",o=u.default('<li class="w-e-item">'+n+"</li>");m.append(o);var a=u.default(r);g.append(a),w.push(o),b.push(a),0===e?(o.data("active",!0),o.addClass("w-e-active")):a.hide(),o.on("click",(function(){o.data("active")||((0,i.default)(w).call(w,(function(t){t.data("active",!1),t.removeClass("w-e-active")})),(0,i.default)(b).call(b,(function(t){t.hide()})),o.data("active",!0),o.addClass("w-e-active"),a.show())}))}})),o.on("click",(function(t){t.stopPropagation()})),n.$elem.append(o),r.setLinkValue&&r.setLinkValue(o,"text"),r.setLinkValue&&r.setLinkValue(o,"link"),(0,i.default)(y).call(y,(function(t,n){if(t){var r=t.events||[];(0,i.default)(r).call(r,(function(t){var r,o=t.selector,i=t.type,s=t.fn||c.EMPTY_FN,u=b[n],f=null!==(r=t.bindEnter)&&void 0!==r&&r,d=function(t){return l.__awaiter(e,void 0,void 0,(function(){return l.__generator(this,(function(e){switch(e.label){case 0:return t.stopPropagation(),[4,s(t)];case 1:return e.sent()&&this.remove(),[2]}}))}))};(0,a.default)(u).call(u,o).on(i,d),f&&"click"===i&&u.on("keyup",(function(t){13==t.keyCode&&d(t)}))}))}}));var _=(0,a.default)(o).call(o,"input[type=text],textarea");_.length&&_.get(0).focus(),t.hideCurAllPanels(),n.setPanel(this),t.createdMenus.add(n)}},t.prototype.remove=function(){var e=this.menu,n=this.$container;n&&n.remove(),t.createdMenus.delete(e)},t.hideCurAllPanels=function(){var e;0!==t.createdMenus.size&&(0,i.default)(e=t.createdMenus).call(e,(function(t){var e=t.panel;e&&e.remove()}))},t.createdMenus=new s.default,t}();e.default=f},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(62),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(9),o=n(8),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},function(t,e,n){var r=n(81),o=n(18).f,i=n(19),a=n(16),s=n(170),l=n(10)("toStringTag");t.exports=function(t,e,n,u){if(t){var c=n?t:t.prototype;a(c,l)||o(c,l,{configurable:!0,value:e}),u&&!r&&i(c,"toString",s)}}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=function(t){function e(e,n){return t.call(this,e,n)||this}return r.__extends(e,t),e.prototype.setPanel=function(t){this.panel=t},e}(r.__importDefault(n(95)).default);e.default=o},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4)),a=r(n(57));(0,o.default)(e,"__esModule",{value:!0});var s=n(2).__importDefault(n(3)),l=function(){function t(t,e,n){this.editor=t,this.$targetElem=e,this.conf=n,this._show=!1,this._isInsertTextContainer=!1;var r=s.default("<div></div>");r.addClass("w-e-tooltip"),this.$container=r}return t.prototype.getPositionData=function(){var t=this.$container,e=0,n=0,r=20,o=document.documentElement.scrollTop,i=this.$targetElem.getBoundingClientRect(),a=this.editor.$textElem.getBoundingClientRect(),l=this.$targetElem.getOffsetData(),u=s.default(l.parent),c=this.editor.$textElem.elems[0].scrollTop;if(this._isInsertTextContainer=u.equal(this.editor.$textContainerElem),this._isInsertTextContainer){var f=u.getBoundingClientRect().height,d=l.top,p=l.left,h=l.height,v=d-c;v>25?(e=v-r-15,t.addClass("w-e-tooltip-up")):v+h+r<f?(e=v+h+10,t.addClass("w-e-tooltip-down")):(e=(v>0?v:0)+r+10,t.addClass("w-e-tooltip-down")),n=p<0?0:p}else i.top<r||i.top-a.top<r?(e=i.bottom+o+5,t.addClass("w-e-tooltip-down")):(e=i.top+o-r-15,t.addClass("w-e-tooltip-up")),n=i.left<0?0:i.left;return{top:e,left:n}},t.prototype.appendMenus=function(){var t=this,e=this.conf,n=this.editor,r=this.$targetElem,o=this.$container;(0,i.default)(e).call(e,(function(e,i){var a=e.$elem,l=s.default("<div></div>");l.addClass("w-e-tooltip-item-wrapper "),l.append(a),o.append(l),a.on("click",(function(o){o.preventDefault(),e.onClick(n,r)&&t.remove()}))}))},t.prototype.create=function(){var t,e,n=this.editor,r=this.$container;this.appendMenus();var o=this.getPositionData(),i=o.top,l=o.left;r.css("top",i+"px"),r.css("left",l+"px"),r.css("z-index",n.zIndex.get("tooltip")),this._isInsertTextContainer?this.editor.$textContainerElem.append(r):s.default("body").append(r),this._show=!0,n.beforeDestroy((0,a.default)(t=this.remove).call(t,this)),n.txt.eventHooks.onBlurEvents.push((0,a.default)(e=this.remove).call(e,this))},t.prototype.remove=function(){this.$container.remove(),this._show=!1},(0,o.default)(t.prototype,"isShow",{get:function(){return this._show},enumerable:!1,configurable:!0}),t}();e.default=l},function(t,e,n){var r=n(41);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e,n){var r,o,i,a=n(165),s=n(8),l=n(13),u=n(19),c=n(16),f=n(63),d=n(51),p=s.WeakMap;if(a){var h=new p,v=h.get,m=h.has,g=h.set;r=function(t,e){return g.call(h,t,e),e},o=function(t){return v.call(h,t)||{}},i=function(t){return m.call(h,t)}}else{var A=f("state");d[A]=!0,r=function(t,e){return u(t,A,e),e},o=function(t){return c(t,A)?t[A]:{}},i=function(t){return c(t,A)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!l(e)||(n=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e){t.exports=!0},function(t,e){t.exports={}},function(t,e,n){t.exports=n(261)},function(t,e,n){t.exports=n(265)},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0}),e.createElementFragment=e.createDocumentFragment=e.createElement=e.insertBefore=e.getEndPoint=e.getStartPoint=e.updateRange=e.filterSelectionNodes=void 0;var a=n(2),s=n(137),l=a.__importDefault(n(3));function u(t){return document.createElement(t)}e.filterSelectionNodes=function(t){var e=[];return(0,i.default)(t).call(t,(function(t){var n=t.getNodeName();if(n!==s.ListType.OrderedList&&n!==s.ListType.UnorderedList)e.push(t);else if(t.prior)e.push(t.prior);else{var r=t.children();null==r||(0,i.default)(r).call(r,(function(t){e.push(l.default(t))}))}})),e},e.updateRange=function(t,e,n){var r=t.selection,o=document.createRange();e.length>1?(o.setStart(e.elems[0],0),o.setEnd(e.elems[e.length-1],e.elems[e.length-1].childNodes.length)):o.selectNodeContents(e.elems[0]),n&&o.collapse(!1),r.saveRange(o),r.restoreSelection()},e.getStartPoint=function(t){var e;return t.prior?t.prior:l.default(null===(e=t.children())||void 0===e?void 0:e.elems[0])},e.getEndPoint=function(t){var e;return t.prior?t.prior:l.default(null===(e=t.children())||void 0===e?void 0:e.last().elems[0])},e.insertBefore=function(t,e,n){void 0===n&&(n=null),t.parent().elems[0].insertBefore(e,n)},e.createElement=u,e.createDocumentFragment=function(){return document.createDocumentFragment()},e.createElementFragment=function(t,e,n){return void 0===n&&(n="li"),(0,i.default)(t).call(t,(function(t){var r=u(n);r.innerHTML=t.html(),e.appendChild(r),t.remove()})),e}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,n){"use strict";var r=n(164).charAt,o=n(42),i=n(75),a="String Iterator",s=o.set,l=o.getterFor(a);i(String,"String",(function(t){s(this,{type:a,string:String(t),index:0})}),(function(){var t,e=l(this),n=e.string,o=e.index;return o>=n.length?{value:void 0,done:!0}:(t=r(n,o),e.index+=t.length,{value:t,done:!1})}))},function(t,e){t.exports={}},function(t,e,n){var r=n(107),o=n(80);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){var r=n(19);t.exports=function(t,e,n,o){o&&o.enumerable?t[e]=n:r(t,e,n)}},function(t,e,n){n(173);var r=n(174),o=n(8),i=n(65),a=n(19),s=n(44),l=n(10)("toStringTag");for(var u in r){var c=o[u],f=c&&c.prototype;f&&i(f)!==l&&a(f,l,u),s[u]=s.Array}},function(t,e,n){var r=n(34);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(11),o=n(10),i=n(86),a=o("species");t.exports=function(t){return i>=51||!r((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,n){t.exports=n(222)},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.ListHandle=void 0;var r=n(2).__importDefault(n(373));e.ListHandle=function(t){this.options=t,this.selectionRangeElem=new r.default}},function(t,e,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},function(t,e,n){var r=n(13);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(74),o=n(64),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},function(t,e,n){var r=n(81),o=n(34),i=n(10)("toStringTag"),a="Arguments"==o(function(){return arguments}());t.exports=r?o:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:a?o(e):"Object"==(r=o(e))&&"function"==typeof e.callee?"Arguments":r}},function(t,e,n){var r=n(25),o=n(112),i=n(35),a=n(40),s=n(113),l=n(114),u=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,n,c,f){var d,p,h,v,m,g,A,y=a(e,n,c?2:1);if(f)d=t;else{if("function"!=typeof(p=s(t)))throw TypeError("Target is not iterable");if(o(p)){for(h=0,v=i(t.length);v>h;h++)if((m=c?y(r(A=t[h])[0],A[1]):y(t[h]))&&m instanceof u)return m;return new u(!1)}d=p.call(t)}for(g=d.next;!(A=g.call(d)).done;)if("object"==typeof(m=l(d,y,A.value,c))&&m&&m instanceof u)return m;return new u(!1)}).stop=function(t){return new u(!0,t)}},function(t,e,n){"use strict";var r=n(11);t.exports=function(t,e){var n=[][t];return!!n&&r((function(){n.call(null,e||function(){throw 1},1)}))}},function(t,e){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(t,e,n){"use strict";var r=n(60),o=n(18),i=n(48);t.exports=function(t,e,n){var a=r(e);a in t?o.f(t,a,i(0,n)):t[a]=n}},function(t,e,n){t.exports=n(209)},function(t,e,n){var r=n(14),o=n(59),i=n(48),a=n(30),s=n(60),l=n(16),u=n(100),c=Object.getOwnPropertyDescriptor;e.f=r?c:function(t,e){if(t=a(t),e=s(e,!0),u)try{return c(t,e)}catch(t){}if(l(t,e))return i(!o.f.call(t,e),t[e])}},function(t,e,n){var r=n(11),o=n(34),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,e,n){var r=n(8),o=n(13),i=r.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},function(t,e,n){var r=n(43),o=n(103);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.4",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){"use strict";var r=n(5),o=n(167),i=n(105),a=n(171),s=n(37),l=n(19),u=n(53),c=n(10),f=n(43),d=n(44),p=n(104),h=p.IteratorPrototype,v=p.BUGGY_SAFARI_ITERATORS,m=c("iterator"),g="keys",A="values",y="entries",w=function(){return this};t.exports=function(t,e,n,c,p,b,_){o(n,e,c);var x,E,S,T=function(t){if(t===p&&N)return N;if(!v&&t in k)return k[t];switch(t){case g:case A:case y:return function(){return new n(this,t)}}return function(){return new n(this)}},C=e+" Iterator",D=!1,k=t.prototype,M=k[m]||k["@@iterator"]||p&&k[p],N=!v&&M||T(p),R="Array"==e&&k.entries||M;if(R&&(x=i(R.call(new t)),h!==Object.prototype&&x.next&&(f||i(x)===h||(a?a(x,h):"function"!=typeof x[m]&&l(x,m,w)),s(x,C,!0,!0),f&&(d[C]=w))),p==A&&M&&M.name!==A&&(D=!0,N=function(){return M.call(this)}),f&&!_||k[m]===N||l(k,m,N),d[e]=N,p)if(E={values:T(A),keys:b?N:T(g),entries:T(y)},_)for(S in E)(v||D||!(S in k))&&u(k,S,E[S]);else r({target:e,proto:!0,forced:v||D},E);return E}},function(t,e,n){var r=n(11);t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(t,e,n){var r,o=n(25),i=n(169),a=n(80),s=n(51),l=n(108),u=n(73),c=n(63),f="prototype",d="script",p=c("IE_PROTO"),h=function(){},v=function(t){return"<"+d+">"+t+"</"+d+">"},m=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e,n;m=r?function(t){t.write(v("")),t.close();var e=t.parentWindow.Object;return t=null,e}(r):(e=u("iframe"),n="java"+d+":",e.style.display="none",l.appendChild(e),e.src=String(n),(t=e.contentWindow.document).open(),t.write(v("document.F=Object")),t.close(),t.F);for(var o=a.length;o--;)delete m[f][a[o]];return m()};s[p]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(h[f]=o(t),n=new h,h[f]=null,n[p]=t):n=m(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(30),o=n(35),i=n(79),a=function(t){return function(e,n,a){var s,l=r(e),u=o(l.length),c=i(a,u);if(t&&n!=n){for(;u>c;)if((s=l[c++])!=s)return!0}else for(;u>c;c++)if((t||c in l)&&l[c]===n)return t||c||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},function(t,e,n){var r=n(62),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,n){var r={};r[n(10)("toStringTag")]="z",t.exports="[object z]"===String(r)},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},function(t,e,n){var r=n(36);t.exports=r("navigator","userAgent")||""},function(t,e,n){"use strict";var r=n(41),o=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new o(t)}},function(t,e,n){var r,o,i=n(8),a=n(84),s=i.process,l=s&&s.versions,u=l&&l.v8;u?o=(r=u.split("."))[0]+r[1]:a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=r[1]),t.exports=o&&+o},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=a.__importDefault(n(3)),l=n(6),u=a.__importDefault(n(267)),c=a.__importDefault(n(280)),f=a.__importDefault(n(281)),d=a.__importDefault(n(282)),p=a.__importDefault(n(301)),h=a.__importStar(n(416)),v=a.__importDefault(n(417)),m=a.__importDefault(n(418)),g=a.__importDefault(n(419)),A=a.__importStar(n(420)),y=a.__importDefault(n(423)),w=a.__importDefault(n(424)),b=a.__importDefault(n(425)),_=a.__importDefault(n(427)),x=a.__importDefault(n(437)),E=a.__importDefault(n(440)),S=a.__importStar(n(441)),T=a.__importDefault(n(23)),C=a.__importDefault(n(134)),D=a.__importDefault(n(24)),k=a.__importDefault(n(33)),M=a.__importDefault(n(38)),N=a.__importDefault(n(39)),R=1,B=function(){function t(t,e){this.pluginsFunctionList={},this.beforeDestroyHooks=[],this.id="wangEditor-"+R++,this.toolbarSelector=t,this.textSelector=e,h.selectorValidator(this),this.config=l.deepClone(u.default),this.$toolbarElem=s.default("<div></div>"),this.$textContainerElem=s.default("<div></div>"),this.$textElem=s.default("<div></div>"),this.toolbarElemId="",this.textElemId="",this.isFocus=!1,this.isComposing=!1,this.isCompatibleMode=!1,this.selection=new c.default(this),this.cmd=new f.default(this),this.txt=new d.default(this),this.menus=new p.default(this),this.zIndex=new w.default,this.change=new b.default(this),this.history=new _.default(this),this.onSelectionChange=new E.default(this);var n=x.default(this),r=n.disable,o=n.enable;this.disable=r,this.enable=o,this.isEnable=!0}return t.prototype.initSelection=function(t){v.default(this,t)},t.prototype.create=function(){this.zIndex.init(this),this.isCompatibleMode=this.config.compatibleMode(),this.isCompatibleMode||(this.config.onchangeTimeout=30),g.default(this),h.default(this),this.txt.init(),this.menus.init(),A.default(this),this.initSelection(!0),m.default(this),this.change.observe(),this.history.observe(),S.default(this)},t.prototype.beforeDestroy=function(t){return this.beforeDestroyHooks.push(t),this},t.prototype.destroy=function(){var t,e=this;(0,i.default)(t=this.beforeDestroyHooks).call(t,(function(t){return t.call(e)})),this.$toolbarElem.remove(),this.$textContainerElem.remove()},t.prototype.fullScreen=function(){A.setFullScreen(this)},t.prototype.unFullScreen=function(){A.setUnFullScreen(this)},t.prototype.scrollToHead=function(t){y.default(this,t)},t.registerMenu=function(e,n){n&&"function"==typeof n&&(t.globalCustomMenuConstructorList[e]=n)},t.prototype.registerPlugin=function(t,e){S.registerPlugin(t,e,this.pluginsFunctionList)},t.registerPlugin=function(e,n){S.registerPlugin(e,n,t.globalPluginsFunctionList)},t.$=s.default,t.BtnMenu=T.default,t.DropList=C.default,t.DropListMenu=D.default,t.Panel=k.default,t.PanelMenu=M.default,t.Tooltip=N.default,t.globalCustomMenuConstructorList={},t.globalPluginsFunctionList={},t}();e.default=B},function(t,e,n){var r=n(13),o=n(55),i=n(10)("species");t.exports=function(t,e){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},function(t,e,n){t.exports=n(185)},function(t,e,n){var r=n(49),o="["+n(68)+"]",i=RegExp("^"+o+o+"*"),a=RegExp(o+o+"*$"),s=function(t){return function(e){var n=String(r(e));return 1&t&&(n=n.replace(i,"")),2&t&&(n=n.replace(a,"")),n}};t.exports={start:s(1),end:s(2),trim:s(3)}},function(t,e,n){t.exports=n(205)},function(t,e,n){var r=n(227),o=n(230);function i(e){return t.exports=i="function"==typeof o&&"symbol"==typeof r?function(t){return typeof t}:function(t){return t&&"function"==typeof o&&t.constructor===o&&t!==o.prototype?"symbol":typeof t},i(e)}t.exports=i},function(t,e,n){var r=n(10);e.f=r},function(t,e,n){t.exports=n(306)},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var a=n(2).__importDefault(n(33)),s=function(){function t(t,e){var n=this;this.$elem=t,this.editor=e,this._active=!1,t.on("click",(function(t){var r;a.default.hideCurAllPanels(),(0,i.default)(r=e.txt.eventHooks.menuClickEvents).call(r,(function(t){return t()})),t.stopPropagation(),null!=e.selection.getRange()&&n.clickHandler(t)}))}return t.prototype.clickHandler=function(t){},t.prototype.active=function(){this._active=!0,this.$elem.addClass("w-e-active")},t.prototype.unActive=function(){this._active=!1,this.$elem.removeClass("w-e-active")},(0,o.default)(t.prototype,"isActive",{get:function(){return this._active},enumerable:!1,configurable:!0}),t}();e.default=s},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(28));function a(t){for(var n=t.elems[0];n&&(0,i.default)(r=e.EXTRA_TAG).call(r,n.nodeName);){var r;if("A"===(n=n.parentElement).nodeName)return n}}(0,o.default)(e,"__esModule",{value:!0}),e.getParentNodeA=e.EXTRA_TAG=void 0,e.EXTRA_TAG=["B","FONT","I","STRIKE"],e.getParentNodeA=a,e.default=function(t){var e,n=t.selection.getSelectionContainerElem();if(!(null===(e=null==n?void 0:n.elems)||void 0===e?void 0:e.length))return!1;if("A"===n.getNodeName())return!0;var r=a(n);return!(!r||"A"!==r.nodeName)}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(57)),a=r(n(4)),s=r(n(27));(0,o.default)(e,"__esModule",{value:!0});var l=n(2),u=n(6),c=l.__importDefault(n(135)),f=l.__importDefault(n(136)),d=function(){function t(t){this.editor=t}return t.prototype.insertImg=function(t,e,n){var r=this.editor,o=r.config,i=function(t,e){return void 0===e&&(e="validate."),r.i18next.t(e+t)},a=t.replace(/</g,"&lt;").replace(/>/g,"&gt;");a=a.replace("'",'"');var s="";n&&(s=n.replace("'",'"'),s="data-href='"+encodeURIComponent(s)+"' ");var l="";e&&(l="alt='"+(l=(l=e.replace(/</g,"&lt;").replace(/>/g,"&gt;")).replace("'",'"'))+"' "),r.cmd.do("insertHTML","<img src='"+a+"' "+l+s+'style="max-width:100%;" contenteditable="false"/>'),o.linkImgCallback(t,e,n);var u=document.createElement("img");u.onload=function(){u=null},u.onerror=function(){o.customAlert(i("插入图片错误"),"error","wangEditor: "+i("插入图片错误")+"，"+i("图片链接")+' "'+t+'"，'+i("下载链接失败")),u=null},u.onabort=function(){return u=null},u.src=t},t.prototype.uploadImg=function(t){var e=this;if(t.length){var n=this.editor,r=n.config,o=function(t){return n.i18next.t("validate."+t)},l=r.uploadImgServer,d=r.uploadImgShowBase64,p=r.uploadImgMaxSize,h=p/1024/1024,v=r.uploadImgMaxLength,m=r.uploadFileName,g=r.uploadImgParams,A=r.uploadImgParamsWithUrl,y=r.uploadImgHeaders,w=r.uploadImgHooks,b=r.uploadImgTimeout,_=r.withCredentials,x=r.customUploadImg;if(x||l||d){var E=[],S=[];if(u.arrForEach(t,(function(t){if(t){var e=t.name||t.type.replace("/","."),r=t.size;if(e&&r){var i=n.config.uploadImgAccept.join("|");!1!==new RegExp(".("+i+")$","i").test(e)?p<r?S.push("【"+e+"】"+o("大于")+" "+h+"M"):E.push(t):S.push("【"+e+"】"+o("不是图片"))}}})),S.length)r.customAlert(o("图片验证未通过")+": \n"+S.join("\n"),"warning");else if(0!==E.length)if(E.length>v)r.customAlert(o("一次最多上传")+v+o("张图片"),"warning");else if(x&&"function"==typeof x){var T;x(E,(0,i.default)(T=this.insertImg).call(T,this))}else{var C=new FormData;if((0,a.default)(E).call(E,(function(t,e){var n=m||t.name;E.length>1&&(n+=e+1),C.append(n,t)})),l){var D=l.split("#");l=D[0];var k=D[1]||"";(0,a.default)(u).call(u,g,(function(t,e){A&&((0,s.default)(l).call(l,"?")>0?l+="&":l+="?",l=l+t+"="+e),C.append(t,e)})),k&&(l+="#"+k);var M=c.default(l,{timeout:b,formData:C,headers:y,withCredentials:!!_,beforeSend:function(t){if(w.before)return w.before(t,n,E)},onTimeout:function(t){r.customAlert(o("上传图片超时"),"error"),w.timeout&&w.timeout(t,n)},onProgress:function(t,e){var r=new f.default(n);e.lengthComputable&&(t=e.loaded/e.total,r.show(t))},onError:function(t){r.customAlert(o("上传图片错误"),"error",o("上传图片错误")+"，"+o("服务器返回状态")+": "+t.status),w.error&&w.error(t,n)},onFail:function(t,e){r.customAlert(o("上传图片失败"),"error",o("上传图片返回结果错误")+"，"+o("返回结果")+": "+e),w.fail&&w.fail(t,n,e)},onSuccess:function(t,s){if(w.customInsert){var l;w.customInsert((0,i.default)(l=e.insertImg).call(l,e),s,n)}else{if("0"!=s.errno)return r.customAlert(o("上传图片失败"),"error",o("上传图片返回结果错误")+"，"+o("返回结果")+" errno="+s.errno),void(w.fail&&w.fail(t,n,s));var u=s.data;(0,a.default)(u).call(u,(function(t){"string"==typeof t?e.insertImg(t):e.insertImg(t.url,t.alt,t.href)})),w.success&&w.success(t,n,s)}}});"string"==typeof M&&r.customAlert(M,"error")}else d&&u.arrForEach(t,(function(t){var n=e,r=new FileReader;r.readAsDataURL(t),r.onload=function(){if(this.result){var t=this.result.toString();n.insertImg(t,t)}}}))}else r.customAlert(o("传入的文件不合法"),"warning")}}},t}();e.default=d},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(410)),a=r(n(4)),s=r(n(45));function l(t){return!!t.length&&"w-e-todo"===t.attr("class")}function u(t,e){return 3===t.nodeType?t.nodeValue===e.nodeValue:t.contains(e)}function c(t,e,n){void 0===n&&(n=!0);var r=t.nodeValue,o=null==r?void 0:(0,s.default)(r).call(r,0,e);if(r=null==r?void 0:(0,s.default)(r).call(r,e),!n){var i=r;r=o,o=i}return t.nodeValue=o,r}(0,o.default)(e,"__esModule",{value:!0}),e.dealTextNode=e.isAllTodo=e.isTodo=e.getCursorNextNode=void 0,e.isTodo=l,e.isAllTodo=function(t){var e=t.selection.getSelectionRangeTopNodes();if(0!==e.length)return(0,i.default)(e).call(e,(function(t){return l(t)}))},e.getCursorNextNode=function t(e,n,r){var o;if(e.hasChildNodes()){var i=e.cloneNode(),s=!1;""===n.nodeValue&&(s=!0);var l=[];return(0,a.default)(o=e.childNodes).call(o,(function(e){if(!u(e,n)&&s&&(i.appendChild(e.cloneNode(!0)),"BR"!==e.nodeName&&l.push(e)),u(e,n)){if(1===e.nodeType){var o=t(e,n,r);o&&""!==o.textContent&&(null==i||i.appendChild(o))}if(3===e.nodeType&&n.isEqualNode(e)){var a=c(e,r);i.textContent=a}s=!0}})),(0,a.default)(l).call(l,(function(t){t.remove()})),i}},e.dealTextNode=c},function(t,e,n){"use strict";var r=n(0)(n(1));(0,r.default)(e,"__esModule",{value:!0});var o=n(430),i=function(){function t(t){this.maxSize=t,this.isRe=!1,this.data=new o.CeilStack(t),this.revokeData=new o.CeilStack(t)}return(0,r.default)(t.prototype,"size",{get:function(){return[this.data.size,this.revokeData.size]},enumerable:!1,configurable:!0}),t.prototype.resetMaxSize=function(t){this.data.resetMax(t),this.revokeData.resetMax(t)},t.prototype.save=function(t){return this.isRe&&(this.revokeData.clear(),this.isRe=!1),this.data.instack(t),this},t.prototype.revoke=function(t){!this.isRe&&(this.isRe=!0);var e=this.data.outstack();return!!e&&(this.revokeData.instack(e),t(e),!0)},t.prototype.restore=function(t){!this.isRe&&(this.isRe=!0);var e=this.revokeData.outstack();return!!e&&(this.data.instack(e),t(e),!0)},t}();e.default=i},function(t,e,n){var r=n(14),o=n(11),i=n(73);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(11),o=/#|\.prototype\./,i=function(t,e){var n=s[a(t)];return n==u||n!=l&&("function"==typeof e?r(e):!!e)},a=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},s=i.data={},l=i.NATIVE="N",u=i.POLYFILL="P";t.exports=i},function(t,e,n){var r=n(103),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},function(t,e,n){var r=n(8),o=n(166),i="__core-js_shared__",a=r[i]||o(i,{});t.exports=a},function(t,e,n){"use strict";var r,o,i,a=n(105),s=n(19),l=n(16),u=n(10),c=n(43),f=u("iterator"),d=!1;[].keys&&("next"in(i=[].keys())?(o=a(a(i)))!==Object.prototype&&(r=o):d=!0),null==r&&(r={}),c||l(r,f)||s(r,f,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:d}},function(t,e,n){var r=n(16),o=n(31),i=n(63),a=n(168),s=i("IE_PROTO"),l=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=o(t),r(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?l:null}},function(t,e,n){var r=n(76);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,n){var r=n(16),o=n(30),i=n(78).indexOf,a=n(51);t.exports=function(t,e){var n,s=o(t),l=0,u=[];for(n in s)!r(a,n)&&r(s,n)&&u.push(n);for(;e.length>l;)r(s,n=e[l++])&&(~i(u,n)||u.push(n));return u}},function(t,e,n){var r=n(36);t.exports=r("document","documentElement")},function(t,e,n){var r=n(8);t.exports=r.Promise},function(t,e,n){var r=n(53);t.exports=function(t,e,n){for(var o in e)n&&n.unsafe&&t[o]?t[o]=e[o]:r(t,o,e[o],n);return t}},function(t,e,n){"use strict";var r=n(36),o=n(18),i=n(10),a=n(14),s=i("species");t.exports=function(t){var e=r(t),n=o.f;a&&e&&!e[s]&&n(e,s,{configurable:!0,get:function(){return this}})}},function(t,e,n){var r=n(10),o=n(44),i=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},function(t,e,n){var r=n(65),o=n(44),i=n(10)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){var r=n(25);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},function(t,e,n){var r=n(10)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},t(i)}catch(t){}return n}},function(t,e,n){var r=n(25),o=n(41),i=n(10)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||null==(n=r(a)[i])?e:o(n)}},function(t,e,n){var r,o,i,a=n(8),s=n(11),l=n(34),u=n(40),c=n(108),f=n(73),d=n(118),p=a.location,h=a.setImmediate,v=a.clearImmediate,m=a.process,g=a.MessageChannel,A=a.Dispatch,y=0,w={},b="onreadystatechange",_=function(t){if(w.hasOwnProperty(t)){var e=w[t];delete w[t],e()}},x=function(t){return function(){_(t)}},E=function(t){_(t.data)},S=function(t){a.postMessage(t+"",p.protocol+"//"+p.host)};h&&v||(h=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return w[++y]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(y),y},v=function(t){delete w[t]},"process"==l(m)?r=function(t){m.nextTick(x(t))}:A&&A.now?r=function(t){A.now(x(t))}:g&&!d?(i=(o=new g).port2,o.port1.onmessage=E,r=u(i.postMessage,i,1)):!a.addEventListener||"function"!=typeof postMessage||a.importScripts||s(S)||"file:"===p.protocol?r=b in f("script")?function(t){c.appendChild(f("script"))[b]=function(){c.removeChild(this),_(t)}}:function(t){setTimeout(x(t),0)}:(r=S,a.addEventListener("message",E,!1))),t.exports={set:h,clear:v}},function(t,e,n){var r=n(84);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},function(t,e,n){var r=n(25),o=n(13),i=n(85);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,n){t.exports=n(197)},function(t,e,n){"use strict";var r=n(5),o=n(8),i=n(123),a=n(11),s=n(19),l=n(66),u=n(83),c=n(13),f=n(37),d=n(18).f,p=n(32).forEach,h=n(14),v=n(42),m=v.set,g=v.getterFor;t.exports=function(t,e,n){var v,A=-1!==t.indexOf("Map"),y=-1!==t.indexOf("Weak"),w=A?"set":"add",b=o[t],_=b&&b.prototype,x={};if(h&&"function"==typeof b&&(y||_.forEach&&!a((function(){(new b).entries().next()})))){v=e((function(e,n){m(u(e,v,t),{type:t,collection:new b}),null!=n&&l(n,e[w],e,A)}));var E=g(t);p(["add","clear","delete","forEach","get","has","set","keys","values","entries"],(function(t){var e="add"==t||"set"==t;!(t in _)||y&&"clear"==t||s(v.prototype,t,(function(n,r){var o=E(this).collection;if(!e&&y&&!c(n))return"get"==t&&void 0;var i=o[t](0===n?0:n,r);return e?this:i}))})),y||d(v.prototype,"size",{configurable:!0,get:function(){return E(this).collection.size}})}else v=n.getConstructor(e,t,A,w),i.REQUIRED=!0;return f(v,t,!1,!0),x[t]=v,r({global:!0,forced:!0},x),y||n.setStrong(v,t,A),v}},function(t,e,n){var r=n(51),o=n(13),i=n(16),a=n(18).f,s=n(64),l=n(200),u=s("meta"),c=0,f=Object.isExtensible||function(){return!0},d=function(t){a(t,u,{value:{objectID:"O"+ ++c,weakData:{}}})},p=t.exports={REQUIRED:!1,fastKey:function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,u)){if(!f(t))return"F";if(!e)return"E";d(t)}return t[u].objectID},getWeakData:function(t,e){if(!i(t,u)){if(!f(t))return!0;if(!e)return!1;d(t)}return t[u].weakData},onFreeze:function(t){return l&&p.REQUIRED&&f(t)&&!i(t,u)&&d(t),t}};r[u]=!0},function(t,e,n){"use strict";var r=n(18).f,o=n(77),i=n(110),a=n(40),s=n(83),l=n(66),u=n(75),c=n(111),f=n(14),d=n(123).fastKey,p=n(42),h=p.set,v=p.getterFor;t.exports={getConstructor:function(t,e,n,u){var c=t((function(t,r){s(t,c,e),h(t,{type:e,index:o(null),first:void 0,last:void 0,size:0}),f||(t.size=0),null!=r&&l(r,t[u],t,n)})),p=v(e),m=function(t,e,n){var r,o,i=p(t),a=g(t,e);return a?a.value=n:(i.last=a={index:o=d(e,!0),key:e,value:n,previous:r=i.last,next:void 0,removed:!1},i.first||(i.first=a),r&&(r.next=a),f?i.size++:t.size++,"F"!==o&&(i.index[o]=a)),t},g=function(t,e){var n,r=p(t),o=d(e);if("F"!==o)return r.index[o];for(n=r.first;n;n=n.next)if(n.key==e)return n};return i(c.prototype,{clear:function(){for(var t=p(this),e=t.index,n=t.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete e[n.index],n=n.next;t.first=t.last=void 0,f?t.size=0:this.size=0},delete:function(t){var e=this,n=p(e),r=g(e,t);if(r){var o=r.next,i=r.previous;delete n.index[r.index],r.removed=!0,i&&(i.next=o),o&&(o.previous=i),n.first==r&&(n.first=o),n.last==r&&(n.last=i),f?n.size--:e.size--}return!!r},forEach:function(t){for(var e,n=p(this),r=a(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.next:n.first;)for(r(e.value,e.key,this);e&&e.removed;)e=e.previous},has:function(t){return!!g(this,t)}}),i(c.prototype,n?{get:function(t){var e=g(this,t);return e&&e.value},set:function(t,e){return m(this,0===t?0:t,e)}}:{add:function(t){return m(this,t=0===t?0:t,t)}}),f&&r(c.prototype,"size",{get:function(){return p(this).size}}),c},setStrong:function(t,e,n){var r=e+" Iterator",o=v(e),i=v(r);u(t,e,(function(t,e){h(this,{type:r,target:t,state:o(t),kind:e,last:void 0})}),(function(){for(var t=i(this),e=t.kind,n=t.last;n&&n.removed;)n=n.previous;return t.target&&(t.last=n=n?n.next:t.state.first)?"keys"==e?{value:n.key,done:!1}:"values"==e?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:(t.target=void 0,{value:void 0,done:!0})}),n?"entries":"values",!n,!0),c(e)}}},function(t,e,n){n(12)("iterator")},function(t,e,n){var r=n(107),o=n(80).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){t.exports=n(268)},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.default={zIndex:1e4}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.default={focus:!0,height:300,placeholder:"请输入正文",zIndexFullScreen:10002,showFullScreen:!0}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0}),e.getPasteImgs=e.getPasteHtml=e.getPasteText=void 0;var a=n(2),s=n(6),l=a.__importDefault(n(292));function u(t){var e,n=t.clipboardData;return e=null==n?window.clipboardData&&window.clipboardData.getData("text"):n.getData("text/plain"),s.replaceHtmlSymbol(e)}e.getPasteText=u,e.getPasteHtml=function(t,e,n){void 0===e&&(e=!0),void 0===n&&(n=!1);var r=t.clipboardData,o="";if(r&&(o=r.getData("text/html")),!o){var i=u(t);if(!i)return"";o="<p>"+i+"</p>"}return o=(o=o.replace(/<(\d)/gm,(function(t,e){return"&lt;"+e}))).replace(/<(\/?meta.*?)>/gim,""),l.default(o,e,n)},e.getPasteImgs=function(t){var e,n=[];if(u(t))return n;var r=null===(e=t.clipboardData)||void 0===e?void 0:e.items;return r?((0,i.default)(s).call(s,r,(function(t,e){var r=e.type;/image/i.test(r)&&n.push(e.getAsFile())})),n):n}},function(t,e,n){t.exports=n(294)},function(t,e,n){t.exports=n(310)},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4)),a=r(n(46));(0,o.default)(e,"__esModule",{value:!0});var s=n(2).__importDefault(n(3)),l=n(7),u=function(){function t(t,e){var n=this;this.hideTimeoutId=0,this.menu=t,this.conf=e;var r=s.default('<div class="w-e-droplist"></div>'),o=s.default("<p>"+e.title+"</p>");o.addClass("w-e-dp-title"),r.append(o);var u=e.list||[],c=e.type||"list",f=e.clickHandler||l.EMPTY_FN,d=s.default('<ul class="'+("list"===c?"w-e-list":"w-e-block")+'"></ul>');(0,i.default)(u).call(u,(function(t){var e=t.$elem,r=t.value,o=s.default('<li class="w-e-item"></li>');e&&(o.append(e),d.append(o),o.on("click",(function(t){f(r),t.stopPropagation(),n.hideTimeoutId=(0,a.default)((function(){n.hide()}))})))})),r.append(d),r.on("mouseleave",(function(){n.hideTimeoutId=(0,a.default)((function(){n.hide()}))})),this.$container=r,this.rendered=!1,this._show=!1}return t.prototype.show=function(){this.hideTimeoutId&&clearTimeout(this.hideTimeoutId);var t=this.menu.$elem,e=this.$container;if(!this._show){if(this.rendered)e.show();else{var n=t.getBoundingClientRect().height||0,r=this.conf.width||100;e.css("margin-top",n+"px").css("width",r+"px"),t.append(e),this.rendered=!0}this._show=!0}},t.prototype.hide=function(){var t=this.$container;this._show&&(t.hide(),this._show=!1)},(0,o.default)(t.prototype,"isShow",{get:function(){return this._show},enumerable:!1,configurable:!0}),t}();e.default=u},function(t,e,n){"use strict";var r=n(0),o=r(n(92)),i=r(n(1)),a=r(n(4));(0,i.default)(e,"__esModule",{value:!0});var s=n(6);e.default=function(t,e){var n=new XMLHttpRequest;if(n.open("POST",t),n.timeout=e.timeout||1e4,n.ontimeout=function(){console.error("wangEditor - 请求超时"),e.onTimeout&&e.onTimeout(n)},n.upload&&(n.upload.onprogress=function(t){var n=t.loaded/t.total;e.onProgress&&e.onProgress(n,t)}),e.headers&&(0,a.default)(s).call(s,e.headers,(function(t,e){n.setRequestHeader(t,e)})),n.withCredentials=!!e.withCredentials,e.beforeSend){var r=e.beforeSend(n);if(r&&"object"===(0,o.default)(r)&&r.prevent)return r.msg}return n.onreadystatechange=function(){if(4===n.readyState){var t=n.status;if(!(t<200||t>=300&&t<400)){if(t>=400)return console.error("wangEditor - XHR 报错，状态码 "+t),void(e.onError&&e.onError(n));var r,i=n.responseText;if("object"!==(0,o.default)(i))try{r=JSON.parse(i)}catch(t){return console.error("wangEditor - 返回结果不是 JSON 格式",i),void(e.onFail&&e.onFail(n,i))}else r=i;e.onSuccess(n,r)}}},n.send(e.formData||null),n}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(342)),a=r(n(46));(0,o.default)(e,"__esModule",{value:!0});var s=n(2).__importDefault(n(3)),l=function(){function t(t){this.editor=t,this.$textContainer=t.$textContainerElem,this.$bar=s.default('<div class="w-e-progress"></div>'),this.isShow=!1,this.time=0,this.timeoutId=0}return t.prototype.show=function(t){var e=this;if(!this.isShow){this.isShow=!0;var n=this.$bar;this.$textContainer.append(n),(0,i.default)()-this.time>100&&t<=1&&(n.css("width",100*t+"%"),this.time=(0,i.default)());var r=this.timeoutId;r&&clearTimeout(r),this.timeoutId=(0,a.default)((function(){e.hide()}),500)}},t.prototype.hide=function(){this.$bar.remove(),this.isShow=!1,this.time=0,this.timeoutId=0},t}();e.default=l},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.ListType=void 0;var r,o=n(2),i=o.__importDefault(n(3)),a=o.__importDefault(n(24)),s=n(47),l=o.__importStar(n(371));!function(t){t.OrderedList="OL",t.UnorderedList="UL"}(r=e.ListType||(e.ListType={}));var u=function(t){function e(e){var n=this,o=i.default('<div class="w-e-menu" data-title="序列">\n                <i class="w-e-icon-list2"></i>\n            </div>'),a={width:130,title:"序列",type:"list",list:[{$elem:i.default('\n                        <p>\n                            <i class="w-e-icon-list2 w-e-drop-list-item"></i>\n                            '+e.i18next.t("menus.dropListMenu.list.无序列表")+"\n                        <p>"),value:r.UnorderedList},{$elem:i.default('<p>\n                            <i class="w-e-icon-list-numbered w-e-drop-list-item"></i>\n                            '+e.i18next.t("menus.dropListMenu.list.有序列表")+"\n                        <p>"),value:r.OrderedList}],clickHandler:function(t){n.command(t)}};return n=t.call(this,o,e,a)||this}return o.__extends(e,t),e.prototype.command=function(t){void 0!==this.editor.selection.getSelectionContainerElem()&&(this.handleSelectionRangeNodes(t),this.tryChangeActive())},e.prototype.validator=function(t,e,n){return!(!t.length||!e.length||n.equal(t)||n.equal(e))},e.prototype.handleSelectionRangeNodes=function(t){var e=this.editor,n=e.selection,r=t.toLowerCase(),o=n.getSelectionContainerElem(),i=n.getSelectionStartElem().getNodeTop(e),a=n.getSelectionEndElem().getNodeTop(e);if(this.validator(i,a,e.$textElem)){var u=n.getRange(),c=null==u?void 0:u.collapsed;e.$textElem.equal(o)||(o=o.getNodeTop(e));var f,d={editor:e,listType:t,listTarget:r,$selectionElem:o,$startElem:i,$endElem:a};f=this.isOrderElem(o)?l.ClassType.Wrap:this.isOrderElem(i)&&this.isOrderElem(a)?l.ClassType.Join:this.isOrderElem(i)?l.ClassType.StartJoin:this.isOrderElem(a)?l.ClassType.EndJoin:l.ClassType.Other;var p=new l.default(l.createListHandle(f,d,u));s.updateRange(e,p.getSelectionRangeElem(),!!c)}},e.prototype.isOrderElem=function(t){var e=t.getNodeName();return e===r.OrderedList||e===r.UnorderedList},e.prototype.tryChangeActive=function(){},e}(a.default);e.default=u},function(t,e,n){t.exports=n(395)},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.default=function(t){var e=t.selection.getSelectionContainerElem();return!(!(null==e?void 0:e.length)||"CODE"!=e.getNodeName()&&"PRE"!=e.getNodeName()&&"CODE"!=e.parent().getNodeName()&&"PRE"!=e.parent().getNodeName()&&!/hljs/.test(e.parent().attr("class")))}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(29));(0,o.default)(e,"__esModule",{value:!0}),e.todo=void 0;var a=n(2).__importDefault(n(3)),s=function(){function t(t){var e;this.template='<ul class="w-e-todo"><li><span contenteditable="false"><input type="checkbox"></span></li></ul>',this.checked=!1,this.$todo=a.default(this.template),this.$child=null===(e=null==t?void 0:t.childNodes())||void 0===e?void 0:e.clone(!0)}return t.prototype.init=function(){var t=this.$child,e=this.getInputContainer();t&&t.insertAfter(e)},t.prototype.getInput=function(){var t=this.$todo;return(0,i.default)(t).call(t,"input")},t.prototype.getInputContainer=function(){return this.getInput().parent()},t.prototype.getTodo=function(){return this.$todo},t}();e.todo=s,e.default=function(t){var e=new s(t);return e.init(),e}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2);n(146),n(148),n(152),n(154),n(156),n(158),n(160);var o=r.__importDefault(n(87));r.__exportStar(n(442),e);try{document}catch(t){throw new Error("请在浏览器环境下运行")}e.default=o.default},function(t,e,n){var r=n(143);t.exports=r},function(t,e,n){n(144);var r=n(9).Object,o=t.exports=function(t,e,n){return r.defineProperty(t,e,n)};r.defineProperty.sham&&(o.sham=!0)},function(t,e,n){var r=n(5),o=n(14);r({target:"Object",stat:!0,forced:!o,sham:!o},{defineProperty:n(18).f})},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(20),o=n(147);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);r(o,{insert:"head",singleton:!1}),t.exports=o.locals||{}},function(t,e,n){(e=n(21)(!1)).push([t.i,'.w-e-toolbar,\n.w-e-text-container,\n.w-e-menu-panel {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  background-color: #fff;\n  /*表情菜单样式*/\n  /*分割线样式*/\n}\n.w-e-toolbar h1,\n.w-e-text-container h1,\n.w-e-menu-panel h1 {\n  font-size: 32px !important;\n}\n.w-e-toolbar h2,\n.w-e-text-container h2,\n.w-e-menu-panel h2 {\n  font-size: 24px !important;\n}\n.w-e-toolbar h3,\n.w-e-text-container h3,\n.w-e-menu-panel h3 {\n  font-size: 18.72px !important;\n}\n.w-e-toolbar h4,\n.w-e-text-container h4,\n.w-e-menu-panel h4 {\n  font-size: 16px !important;\n}\n.w-e-toolbar h5,\n.w-e-text-container h5,\n.w-e-menu-panel h5 {\n  font-size: 13.28px !important;\n}\n.w-e-toolbar p,\n.w-e-text-container p,\n.w-e-menu-panel p {\n  font-size: 16px !important;\n}\n.w-e-toolbar .eleImg,\n.w-e-text-container .eleImg,\n.w-e-menu-panel .eleImg {\n  cursor: pointer;\n  display: inline-block;\n  font-size: 18px;\n  padding: 0 3px;\n}\n.w-e-toolbar *,\n.w-e-text-container *,\n.w-e-menu-panel * {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n.w-e-toolbar hr,\n.w-e-text-container hr,\n.w-e-menu-panel hr {\n  cursor: pointer;\n  display: block;\n  height: 0px;\n  border: 0;\n  border-top: 3px solid #ccc;\n  margin: 20px 0;\n}\n.w-e-clear-fix:after {\n  content: "";\n  display: table;\n  clear: both;\n}\n.w-e-drop-list-item {\n  position: relative;\n  top: 1px;\n  padding-right: 7px;\n  color: #333 !important;\n}\n.w-e-drop-list-tl {\n  padding-left: 10px;\n  text-align: left;\n}\n',""]),t.exports=e},function(t,e,n){var r=n(20),o=n(149);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);r(o,{insert:"head",singleton:!1}),t.exports=o.locals||{}},function(t,e,n){var r=n(21),o=n(150),i=n(151);e=r(!1);var a=o(i);e.push([t.i,"@font-face {\n  font-family: 'w-e-icon';\n  src: url("+a+') format(\'truetype\');\n  font-weight: normal;\n  font-style: normal;\n}\n[class^="w-e-icon-"],\n[class*=" w-e-icon-"] {\n  /* use !important to prevent issues with browser extensions that change fonts */\n  font-family: \'w-e-icon\' !important;\n  speak: none;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n  /* Better Font Rendering =========== */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.w-e-icon-close:before {\n  content: "\\f00d";\n}\n.w-e-icon-upload2:before {\n  content: "\\e9c6";\n}\n.w-e-icon-trash-o:before {\n  content: "\\f014";\n}\n.w-e-icon-header:before {\n  content: "\\f1dc";\n}\n.w-e-icon-pencil2:before {\n  content: "\\e906";\n}\n.w-e-icon-paint-brush:before {\n  content: "\\f1fc";\n}\n.w-e-icon-image:before {\n  content: "\\e90d";\n}\n.w-e-icon-play:before {\n  content: "\\e912";\n}\n.w-e-icon-location:before {\n  content: "\\e947";\n}\n.w-e-icon-undo:before {\n  content: "\\e965";\n}\n.w-e-icon-redo:before {\n  content: "\\e966";\n}\n.w-e-icon-quotes-left:before {\n  content: "\\e977";\n}\n.w-e-icon-list-numbered:before {\n  content: "\\e9b9";\n}\n.w-e-icon-list2:before {\n  content: "\\e9bb";\n}\n.w-e-icon-link:before {\n  content: "\\e9cb";\n}\n.w-e-icon-happy:before {\n  content: "\\e9df";\n}\n.w-e-icon-bold:before {\n  content: "\\ea62";\n}\n.w-e-icon-underline:before {\n  content: "\\ea63";\n}\n.w-e-icon-italic:before {\n  content: "\\ea64";\n}\n.w-e-icon-strikethrough:before {\n  content: "\\ea65";\n}\n.w-e-icon-table2:before {\n  content: "\\ea71";\n}\n.w-e-icon-paragraph-left:before {\n  content: "\\ea77";\n}\n.w-e-icon-paragraph-center:before {\n  content: "\\ea78";\n}\n.w-e-icon-paragraph-right:before {\n  content: "\\ea79";\n}\n.w-e-icon-paragraph-justify:before {\n  content: "\\ea7a";\n}\n.w-e-icon-terminal:before {\n  content: "\\f120";\n}\n.w-e-icon-page-break:before {\n  content: "\\ea68";\n}\n.w-e-icon-cancel-circle:before {\n  content: "\\ea0d";\n}\n.w-e-icon-font:before {\n  content: "\\ea5c";\n}\n.w-e-icon-text-heigh:before {\n  content: "\\ea5f";\n}\n.w-e-icon-paint-format:before {\n  content: "\\e90c";\n}\n.w-e-icon-indent-increase:before {\n  content: "\\ea7b";\n}\n.w-e-icon-indent-decrease:before {\n  content: "\\ea7c";\n}\n.w-e-icon-row-height:before {\n  content: "\\e9be";\n}\n.w-e-icon-fullscreen_exit:before {\n  content: "\\e900";\n}\n.w-e-icon-fullscreen:before {\n  content: "\\e901";\n}\n.w-e-icon-split-line:before {\n  content: "\\ea0b";\n}\n.w-e-icon-checkbox-checked:before {\n  content: "\\ea52";\n}\n',""]),t.exports=e},function(t,e,n){"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},function(t,e,n){"use strict";n.r(e),e.default="data:font/woff;base64,"},function(t,e,n){var r=n(20),o=n(153);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);r(o,{insert:"head",singleton:!1}),t.exports=o.locals||{}},function(t,e,n){(e=n(21)(!1)).push([t.i,'.w-e-toolbar {\n  display: flex;\n  padding: 0 6px;\n  flex-wrap: wrap;\n  position: relative;\n  /* 单个菜单 */\n}\n.w-e-toolbar .w-e-menu {\n  position: relative;\n  display: flex;\n  width: 40px;\n  height: 40px;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  cursor: pointer;\n}\n.w-e-toolbar .w-e-menu i {\n  color: #999;\n}\n.w-e-toolbar .w-e-menu:hover {\n  background-color: #F6F6F6;\n}\n.w-e-toolbar .w-e-menu:hover i {\n  color: #333;\n}\n.w-e-toolbar .w-e-active i {\n  color: #1e88e5;\n}\n.w-e-toolbar .w-e-active:hover i {\n  color: #1e88e5;\n}\n.w-e-menu-tooltip {\n  position: absolute;\n  display: flex;\n  color: #f1f1f1;\n  background-color: rgba(0, 0, 0, 0.75);\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  padding: 4px 5px 6px;\n  justify-content: center;\n  align-items: center;\n}\n.w-e-menu-tooltip-up::after {\n  content: "";\n  position: absolute;\n  top: 100%;\n  left: 50%;\n  margin-left: -5px;\n  border: 5px solid rgba(0, 0, 0, 0);\n  border-top-color: rgba(0, 0, 0, 0.73);\n}\n.w-e-menu-tooltip-down::after {\n  content: "";\n  position: absolute;\n  bottom: 100%;\n  left: 50%;\n  margin-left: -5px;\n  border: 5px solid rgba(0, 0, 0, 0);\n  border-bottom-color: rgba(0, 0, 0, 0.73);\n}\n.w-e-menu-tooltip-item-wrapper {\n  font-size: 14px;\n  margin: 0 5px;\n}\n',""]),t.exports=e},function(t,e,n){var r=n(20),o=n(155);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);r(o,{insert:"head",singleton:!1}),t.exports=o.locals||{}},function(t,e,n){(e=n(21)(!1)).push([t.i,'.w-e-text-container {\n  position: relative;\n  height: 100%;\n}\n.w-e-text-container .w-e-progress {\n  position: absolute;\n  background-color: #1e88e5;\n  top: 0;\n  left: 0;\n  height: 1px;\n}\n.w-e-text-container .placeholder {\n  color: #D4D4D4;\n  position: absolute;\n  font-size: 11pt;\n  line-height: 22px;\n  left: 10px;\n  top: 10px;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  z-index: -1;\n}\n.w-e-text {\n  padding: 0 10px;\n  overflow-y: auto;\n}\n.w-e-text p,\n.w-e-text h1,\n.w-e-text h2,\n.w-e-text h3,\n.w-e-text h4,\n.w-e-text h5,\n.w-e-text table,\n.w-e-text pre {\n  margin: 10px 0;\n  line-height: 1.5;\n}\n.w-e-text ul,\n.w-e-text ol {\n  margin: 10px 0 10px 20px;\n}\n.w-e-text blockquote {\n  display: block;\n  border-left: 8px solid #d0e5f2;\n  padding: 5px 10px;\n  margin: 10px 0;\n  line-height: 1.4;\n  font-size: 100%;\n  background-color: #f1f1f1;\n}\n.w-e-text code {\n  display: inline-block;\n  background-color: #f1f1f1;\n  border-radius: 3px;\n  padding: 3px 5px;\n  margin: 0 3px;\n}\n.w-e-text pre code {\n  display: block;\n}\n.w-e-text table {\n  border-top: 1px solid #ccc;\n  border-left: 1px solid #ccc;\n}\n.w-e-text table td,\n.w-e-text table th {\n  border-bottom: 1px solid #ccc;\n  border-right: 1px solid #ccc;\n  padding: 3px 5px;\n  min-height: 30px;\n  height: 30px;\n}\n.w-e-text table th {\n  border-bottom: 2px solid #ccc;\n  text-align: center;\n  background-color: #f1f1f1;\n}\n.w-e-text:focus {\n  outline: none;\n}\n.w-e-text img {\n  cursor: pointer;\n}\n.w-e-text img:hover {\n  box-shadow: 0 0 5px #333;\n}\n.w-e-text .w-e-todo {\n  margin: 0 0 0 20px;\n}\n.w-e-text .w-e-todo li {\n  list-style: none;\n  font-size: 1em;\n}\n.w-e-text .w-e-todo li span:nth-child(1) {\n  position: relative;\n  left: -18px;\n}\n.w-e-text .w-e-todo li span:nth-child(1) input {\n  position: absolute;\n  margin-right: 3px;\n}\n.w-e-text .w-e-todo li span:nth-child(1) input[type=checkbox] {\n  top: 50%;\n  margin-top: -6px;\n}\n.w-e-tooltip {\n  position: absolute;\n  display: flex;\n  color: #f1f1f1;\n  background-color: rgba(0, 0, 0, 0.75);\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  padding: 4px 5px 6px;\n  justify-content: center;\n  align-items: center;\n}\n.w-e-tooltip-up::after {\n  content: "";\n  position: absolute;\n  top: 100%;\n  left: 50%;\n  margin-left: -5px;\n  border: 5px solid rgba(0, 0, 0, 0);\n  border-top-color: rgba(0, 0, 0, 0.73);\n}\n.w-e-tooltip-down::after {\n  content: "";\n  position: absolute;\n  bottom: 100%;\n  left: 50%;\n  margin-left: -5px;\n  border: 5px solid rgba(0, 0, 0, 0);\n  border-bottom-color: rgba(0, 0, 0, 0.73);\n}\n.w-e-tooltip-item-wrapper {\n  cursor: pointer;\n  font-size: 14px;\n  margin: 0 5px;\n}\n.w-e-tooltip-item-wrapper:hover {\n  color: #ccc;\n  text-decoration: underline;\n}\n',""]),t.exports=e},function(t,e,n){var r=n(20),o=n(157);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);r(o,{insert:"head",singleton:!1}),t.exports=o.locals||{}},function(t,e,n){(e=n(21)(!1)).push([t.i,'.w-e-menu .w-e-panel-container {\n  position: absolute;\n  top: 0;\n  left: 50%;\n  border: 1px solid #ccc;\n  border-top: 0;\n  box-shadow: 1px 1px 2px #ccc;\n  color: #333;\n  background-color: #fff;\n  text-align: left;\n  /* 为 emotion panel 定制的样式 */\n  /* 上传图片、上传视频的 panel 定制样式 */\n}\n.w-e-menu .w-e-panel-container .w-e-panel-close {\n  position: absolute;\n  right: 0;\n  top: 0;\n  padding: 5px;\n  margin: 2px 5px 0 0;\n  cursor: pointer;\n  color: #999;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-close:hover {\n  color: #333;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-title {\n  list-style: none;\n  display: flex;\n  font-size: 14px;\n  margin: 2px 10px 0 10px;\n  border-bottom: 1px solid #f1f1f1;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-title .w-e-item {\n  padding: 3px 5px;\n  color: #999;\n  cursor: pointer;\n  margin: 0 3px;\n  position: relative;\n  top: 1px;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-title .w-e-active {\n  color: #333;\n  border-bottom: 1px solid #333;\n  cursor: default;\n  font-weight: 700;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content {\n  padding: 10px 15px 10px 15px;\n  font-size: 16px;\n  /* 输入框的样式 */\n  /* 按钮的样式 */\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content input:focus,\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content textarea:focus,\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content button:focus {\n  outline: none;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content textarea {\n  width: 100%;\n  border: 1px solid #ccc;\n  padding: 5px;\n  margin-top: 10px;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content textarea:focus {\n  border-color: #1e88e5;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content input[type=text] {\n  border: none;\n  border-bottom: 1px solid #ccc;\n  font-size: 14px;\n  height: 20px;\n  color: #333;\n  text-align: left;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content input[type=text].small {\n  width: 30px;\n  text-align: center;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content input[type=text].block {\n  display: block;\n  width: 100%;\n  margin: 10px 0;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content input[type=text]:focus {\n  border-bottom: 2px solid #1e88e5;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button {\n  font-size: 14px;\n  color: #1e88e5;\n  border: none;\n  padding: 5px 10px;\n  background-color: #fff;\n  cursor: pointer;\n  border-radius: 3px;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.left {\n  float: left;\n  margin-right: 10px;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.right {\n  float: right;\n  margin-left: 10px;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.gray {\n  color: #999;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.red {\n  color: #c24f4a;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button:hover {\n  background-color: #f1f1f1;\n}\n.w-e-menu .w-e-panel-container .w-e-panel-tab-content .w-e-button-container:after {\n  content: "";\n  display: table;\n  clear: both;\n}\n.w-e-menu .w-e-panel-container .w-e-emoticon-container .w-e-item {\n  cursor: pointer;\n  font-size: 18px;\n  padding: 0 3px;\n  display: inline-block;\n}\n.w-e-menu .w-e-panel-container .w-e-up-img-container,\n.w-e-menu .w-e-panel-container .w-e-up-video-container {\n  text-align: center;\n}\n.w-e-menu .w-e-panel-container .w-e-up-img-container .w-e-up-btn,\n.w-e-menu .w-e-panel-container .w-e-up-video-container .w-e-up-btn {\n  display: inline-block;\n  color: #999;\n  cursor: pointer;\n  font-size: 60px;\n  line-height: 1;\n}\n.w-e-menu .w-e-panel-container .w-e-up-img-container .w-e-up-btn:hover,\n.w-e-menu .w-e-panel-container .w-e-up-video-container .w-e-up-btn:hover {\n  color: #333;\n}\n',""]),t.exports=e},function(t,e,n){var r=n(20),o=n(159);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);r(o,{insert:"head",singleton:!1}),t.exports=o.locals||{}},function(t,e,n){(e=n(21)(!1)).push([t.i,".w-e-toolbar .w-e-droplist {\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: #fff;\n  border: 1px solid #f1f1f1;\n  border-right-color: #ccc;\n  border-bottom-color: #ccc;\n}\n.w-e-toolbar .w-e-droplist .w-e-dp-title {\n  text-align: center;\n  color: #999;\n  line-height: 2;\n  border-bottom: 1px solid #f1f1f1;\n  font-size: 13px;\n}\n.w-e-toolbar .w-e-droplist ul.w-e-list {\n  list-style: none;\n  line-height: 1;\n}\n.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item {\n  color: #333;\n  padding: 5px 0;\n}\n.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item:hover {\n  background-color: #f1f1f1;\n}\n.w-e-toolbar .w-e-droplist ul.w-e-block {\n  list-style: none;\n  text-align: left;\n  padding: 5px;\n}\n.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item {\n  display: inline-block;\n  padding: 3px 5px;\n}\n.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item:hover {\n  background-color: #f1f1f1;\n}\n",""]),t.exports=e},function(t,e,n){"use strict";var r=n(0)(n(161));Element.prototype.matches||(Element.prototype.matches=function(t){for(var e=this.ownerDocument.querySelectorAll(t),n=e.length;n>=0&&e.item(n)!==this;n--);return n>-1}),r.default||(window.Promise=r.default)},function(t,e,n){t.exports=n(162)},function(t,e,n){var r=n(163);t.exports=r},function(t,e,n){n(61),n(50),n(54),n(175),n(178),n(179);var r=n(9);t.exports=r.Promise},function(t,e,n){var r=n(62),o=n(49),i=function(t){return function(e,n){var i,a,s=String(o(e)),l=r(n),u=s.length;return l<0||l>=u?t?"":void 0:(i=s.charCodeAt(l))<55296||i>56319||l+1===u||(a=s.charCodeAt(l+1))<56320||a>57343?t?s.charAt(l):i:t?s.slice(l,l+2):a-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},function(t,e,n){var r=n(8),o=n(102),i=r.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},function(t,e,n){var r=n(8),o=n(19);t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},function(t,e,n){"use strict";var r=n(104).IteratorPrototype,o=n(77),i=n(48),a=n(37),s=n(44),l=function(){return this};t.exports=function(t,e,n){var u=e+" Iterator";return t.prototype=o(r,{next:i(1,n)}),a(t,u,!1,!0),s[u]=l,t}},function(t,e,n){var r=n(11);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,n){var r=n(14),o=n(18),i=n(25),a=n(52);t.exports=r?Object.defineProperties:function(t,e){i(t);for(var n,r=a(e),s=r.length,l=0;s>l;)o.f(t,n=r[l++],e[n]);return t}},function(t,e,n){"use strict";var r=n(81),o=n(65);t.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},function(t,e,n){var r=n(25),o=n(172);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=i,n}}():void 0)},function(t,e,n){var r=n(13);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e,n){"use strict";var r=n(30),o=n(82),i=n(44),a=n(42),s=n(75),l="Array Iterator",u=a.set,c=a.getterFor(l);t.exports=s(Array,"Array",(function(t,e){u(this,{type:l,target:r(t),index:0,kind:e})}),(function(){var t=c(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,n){"use strict";var r,o,i,a,s=n(5),l=n(43),u=n(8),c=n(36),f=n(109),d=n(53),p=n(110),h=n(37),v=n(111),m=n(13),g=n(41),A=n(83),y=n(34),w=n(102),b=n(66),_=n(115),x=n(116),E=n(117).set,S=n(176),T=n(119),C=n(177),D=n(85),k=n(120),M=n(42),N=n(101),R=n(10),B=n(86),P=R("species"),O="Promise",I=M.get,L=M.set,H=M.getterFor(O),F=f,j=u.TypeError,U=u.document,V=u.process,Q=c("fetch"),z=D.f,Y=z,q="process"==y(V),$=!!(U&&U.createEvent&&u.dispatchEvent),G="unhandledrejection",J=N(O,(function(){if(w(F)===String(F)){if(66===B)return!0;if(!q&&"function"!=typeof PromiseRejectionEvent)return!0}if(l&&!F.prototype.finally)return!0;if(B>=51&&/native code/.test(F))return!1;var t=F.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[P]=e,!(t.then((function(){}))instanceof e)})),K=J||!_((function(t){F.all(t).catch((function(){}))})),W=function(t){var e;return!(!m(t)||"function"!=typeof(e=t.then))&&e},X=function(t,e,n){if(!e.notified){e.notified=!0;var r=e.reactions;S((function(){for(var o=e.value,i=1==e.state,a=0;r.length>a;){var s,l,u,c=r[a++],f=i?c.ok:c.fail,d=c.resolve,p=c.reject,h=c.domain;try{f?(i||(2===e.rejection&&nt(t,e),e.rejection=1),!0===f?s=o:(h&&h.enter(),s=f(o),h&&(h.exit(),u=!0)),s===c.promise?p(j("Promise-chain cycle")):(l=W(s))?l.call(s,d,p):d(s)):p(o)}catch(t){h&&!u&&h.exit(),p(t)}}e.reactions=[],e.notified=!1,n&&!e.rejection&&tt(t,e)}))}},Z=function(t,e,n){var r,o;$?((r=U.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),u.dispatchEvent(r)):r={promise:e,reason:n},(o=u["on"+t])?o(r):t===G&&C("Unhandled promise rejection",n)},tt=function(t,e){E.call(u,(function(){var n,r=e.value;if(et(e)&&(n=k((function(){q?V.emit("unhandledRejection",r,t):Z(G,t,r)})),e.rejection=q||et(e)?2:1,n.error))throw n.value}))},et=function(t){return 1!==t.rejection&&!t.parent},nt=function(t,e){E.call(u,(function(){q?V.emit("rejectionHandled",t):Z("rejectionhandled",t,e.value)}))},rt=function(t,e,n,r){return function(o){t(e,n,o,r)}},ot=function(t,e,n,r){e.done||(e.done=!0,r&&(e=r),e.value=n,e.state=2,X(t,e,!0))},it=function(t,e,n,r){if(!e.done){e.done=!0,r&&(e=r);try{if(t===n)throw j("Promise can't be resolved itself");var o=W(n);o?S((function(){var r={done:!1};try{o.call(n,rt(it,t,r,e),rt(ot,t,r,e))}catch(n){ot(t,r,n,e)}})):(e.value=n,e.state=1,X(t,e,!1))}catch(n){ot(t,{done:!1},n,e)}}};J&&(F=function(t){A(this,F,O),g(t),r.call(this);var e=I(this);try{t(rt(it,this,e),rt(ot,this,e))}catch(t){ot(this,e,t)}},(r=function(t){L(this,{type:O,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(F.prototype,{then:function(t,e){var n=H(this),r=z(x(this,F));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=q?V.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&X(this,n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=I(t);this.promise=t,this.resolve=rt(it,t,e),this.reject=rt(ot,t,e)},D.f=z=function(t){return t===F||t===i?new o(t):Y(t)},l||"function"!=typeof f||(a=f.prototype.then,d(f.prototype,"then",(function(t,e){var n=this;return new F((function(t,e){a.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof Q&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return T(F,Q.apply(u,arguments))}}))),s({global:!0,wrap:!0,forced:J},{Promise:F}),h(F,O,!1,!0),v(O),i=c(O),s({target:O,stat:!0,forced:J},{reject:function(t){var e=z(this);return e.reject.call(void 0,t),e.promise}}),s({target:O,stat:!0,forced:l||J},{resolve:function(t){return T(l&&this===i?F:this,t)}}),s({target:O,stat:!0,forced:K},{all:function(t){var e=this,n=z(e),r=n.resolve,o=n.reject,i=k((function(){var n=g(e.resolve),i=[],a=0,s=1;b(t,(function(t){var l=a++,u=!1;i.push(void 0),s++,n.call(e,t).then((function(t){u||(u=!0,i[l]=t,--s||r(i))}),o)})),--s||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=z(e),r=n.reject,o=k((function(){var o=g(e.resolve);b(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},function(t,e,n){var r,o,i,a,s,l,u,c,f=n(8),d=n(71).f,p=n(34),h=n(117).set,v=n(118),m=f.MutationObserver||f.WebKitMutationObserver,g=f.process,A=f.Promise,y="process"==p(g),w=d(f,"queueMicrotask"),b=w&&w.value;b||(r=function(){var t,e;for(y&&(t=g.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?a():i=void 0,t}}i=void 0,t&&t.enter()},y?a=function(){g.nextTick(r)}:m&&!v?(s=!0,l=document.createTextNode(""),new m(r).observe(l,{characterData:!0}),a=function(){l.data=s=!s}):A&&A.resolve?(u=A.resolve(void 0),c=u.then,a=function(){c.call(u,r)}):a=function(){h.call(f,r)}),t.exports=b||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},function(t,e,n){var r=n(8);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},function(t,e,n){"use strict";var r=n(5),o=n(41),i=n(85),a=n(120),s=n(66);r({target:"Promise",stat:!0},{allSettled:function(t){var e=this,n=i.f(e),r=n.resolve,l=n.reject,u=a((function(){var n=o(e.resolve),i=[],a=0,l=1;s(t,(function(t){var o=a++,s=!1;i.push(void 0),l++,n.call(e,t).then((function(t){s||(s=!0,i[o]={status:"fulfilled",value:t},--l||r(i))}),(function(t){s||(s=!0,i[o]={status:"rejected",reason:t},--l||r(i))}))})),--l||r(i)}));return u.error&&l(u.value),n.promise}})},function(t,e,n){"use strict";var r=n(5),o=n(43),i=n(109),a=n(11),s=n(36),l=n(116),u=n(119),c=n(53);r({target:"Promise",proto:!0,real:!0,forced:!!i&&a((function(){i.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(t){var e=l(this,s("Promise")),n="function"==typeof t;return this.then(n?function(n){return u(e,t()).then((function(){return n}))}:t,n?function(n){return u(e,t()).then((function(){throw n}))}:t)}}),o||"function"!=typeof i||i.prototype.finally||c(i.prototype,"finally",s("Promise").prototype.finally)},function(t,e,n){n(54);var r=n(181),o=n(65),i=Array.prototype,a={DOMTokenList:!0,NodeList:!0};t.exports=function(t){var e=t.forEach;return t===i||t instanceof Array&&e===i.forEach||a.hasOwnProperty(o(t))?r:e}},function(t,e,n){var r=n(182);t.exports=r},function(t,e,n){n(183);var r=n(15);t.exports=r("Array").forEach},function(t,e,n){"use strict";var r=n(5),o=n(184);r({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},function(t,e,n){"use strict";var r=n(32).forEach,o=n(67),i=n(22),a=o("forEach"),s=i("forEach");t.exports=a&&s?[].forEach:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}},function(t,e,n){var r=n(186);t.exports=r},function(t,e,n){n(187);var r=n(9);t.exports=r.Array.isArray},function(t,e,n){n(5)({target:"Array",stat:!0},{isArray:n(55)})},function(t,e,n){var r=n(189);t.exports=r},function(t,e,n){var r=n(190),o=Array.prototype;t.exports=function(t){var e=t.map;return t===o||t instanceof Array&&e===o.map?r:e}},function(t,e,n){n(191);var r=n(15);t.exports=r("Array").map},function(t,e,n){"use strict";var r=n(5),o=n(32).map,i=n(56),a=n(22),s=i("map"),l=a("map");r({target:"Array",proto:!0,forced:!s||!l},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var r=n(193);t.exports=r},function(t,e,n){var r=n(194),o=String.prototype;t.exports=function(t){var e=t.trim;return"string"==typeof t||t===o||t instanceof String&&e===o.trim?r:e}},function(t,e,n){n(195);var r=n(15);t.exports=r("String").trim},function(t,e,n){"use strict";var r=n(5),o=n(90).trim;r({target:"String",proto:!0,forced:n(196)("trim")},{trim:function(){return o(this)}})},function(t,e,n){var r=n(11),o=n(68);t.exports=function(t){return r((function(){return!!o[t]()||"​᠎"!="​᠎"[t]()||o[t].name!==t}))}},function(t,e,n){var r=n(198);t.exports=r},function(t,e,n){n(199),n(61),n(50),n(54);var r=n(9);t.exports=r.Map},function(t,e,n){"use strict";var r=n(122),o=n(124);t.exports=r("Map",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),o)},function(t,e,n){var r=n(11);t.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(t,e,n){var r=n(202);t.exports=r},function(t,e,n){var r=n(203),o=Array.prototype;t.exports=function(t){var e=t.indexOf;return t===o||t instanceof Array&&e===o.indexOf?r:e}},function(t,e,n){n(204);var r=n(15);t.exports=r("Array").indexOf},function(t,e,n){"use strict";var r=n(5),o=n(78).indexOf,i=n(67),a=n(22),s=[].indexOf,l=!!s&&1/[1].indexOf(1,-0)<0,u=i("indexOf"),c=a("indexOf",{ACCESSORS:!0,1:0});r({target:"Array",proto:!0,forced:l||!u||!c},{indexOf:function(t){return l?s.apply(this,arguments)||0:o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var r=n(206);t.exports=r},function(t,e,n){var r=n(207),o=Array.prototype;t.exports=function(t){var e=t.splice;return t===o||t instanceof Array&&e===o.splice?r:e}},function(t,e,n){n(208);var r=n(15);t.exports=r("Array").splice},function(t,e,n){"use strict";var r=n(5),o=n(79),i=n(62),a=n(35),s=n(31),l=n(88),u=n(69),c=n(56),f=n(22),d=c("splice"),p=f("splice",{ACCESSORS:!0,0:0,1:2}),h=Math.max,v=Math.min;r({target:"Array",proto:!0,forced:!d||!p},{splice:function(t,e){var n,r,c,f,d,p,m=s(this),g=a(m.length),A=o(t,g),y=arguments.length;if(0===y?n=r=0:1===y?(n=0,r=g-A):(n=y-2,r=v(h(i(e),0),g-A)),g+n-r>9007199254740991)throw TypeError("Maximum allowed length exceeded");for(c=l(m,r),f=0;f<r;f++)(d=A+f)in m&&u(c,f,m[d]);if(c.length=r,n<r){for(f=A;f<g-r;f++)p=f+n,(d=f+r)in m?m[p]=m[d]:delete m[p];for(f=g;f>g-r+n;f--)delete m[f-1]}else if(n>r)for(f=g-r;f>A;f--)p=f+n-1,(d=f+r-1)in m?m[p]=m[d]:delete m[p];for(f=0;f<n;f++)m[f+A]=arguments[f+2];return m.length=g-r+n,c}})},function(t,e,n){var r=n(210);t.exports=r},function(t,e,n){var r=n(211),o=Array.prototype;t.exports=function(t){var e=t.filter;return t===o||t instanceof Array&&e===o.filter?r:e}},function(t,e,n){n(212);var r=n(15);t.exports=r("Array").filter},function(t,e,n){"use strict";var r=n(5),o=n(32).filter,i=n(56),a=n(22),s=i("filter"),l=a("filter");r({target:"Array",proto:!0,forced:!s||!l},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var r=n(214);t.exports=r},function(t,e,n){var r=n(215),o=n(217),i=Array.prototype,a=String.prototype;t.exports=function(t){var e=t.includes;return t===i||t instanceof Array&&e===i.includes?r:"string"==typeof t||t===a||t instanceof String&&e===a.includes?o:e}},function(t,e,n){n(216);var r=n(15);t.exports=r("Array").includes},function(t,e,n){"use strict";var r=n(5),o=n(78).includes,i=n(82);r({target:"Array",proto:!0,forced:!n(22)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(t,e,n){n(218);var r=n(15);t.exports=r("String").includes},function(t,e,n){"use strict";var r=n(5),o=n(219),i=n(49);r({target:"String",proto:!0,forced:!n(221)("includes")},{includes:function(t){return!!~String(i(this)).indexOf(o(t),arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var r=n(220);t.exports=function(t){if(r(t))throw TypeError("The method doesn't accept regular expressions");return t}},function(t,e,n){var r=n(13),o=n(34),i=n(10)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},function(t,e,n){var r=n(10)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,"/./"[t](e)}catch(t){}}return!1}},function(t,e,n){var r=n(223);t.exports=r},function(t,e,n){var r=n(224),o=Function.prototype;t.exports=function(t){var e=t.bind;return t===o||t instanceof Function&&e===o.bind?r:e}},function(t,e,n){n(225);var r=n(15);t.exports=r("Function").bind},function(t,e,n){n(5)({target:"Function",proto:!0},{bind:n(226)})},function(t,e,n){"use strict";var r=n(41),o=n(13),i=[].slice,a={};t.exports=Function.bind||function(t){var e=r(this),n=i.call(arguments,1),s=function(){var r=n.concat(i.call(arguments));return this instanceof s?function(t,e,n){if(!(e in a)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";a[e]=Function("C,a","return new C("+r.join(",")+")")}return a[e](t,n)}(e,r.length,r):e.apply(t,r)};return o(e.prototype)&&(s.prototype=e.prototype),s}},function(t,e,n){t.exports=n(228)},function(t,e,n){var r=n(229);t.exports=r},function(t,e,n){n(125),n(50),n(54);var r=n(93);t.exports=r.f("iterator")},function(t,e,n){t.exports=n(231)},function(t,e,n){var r=n(232);n(251),n(252),n(253),n(254),n(255),t.exports=r},function(t,e,n){n(233),n(61),n(234),n(236),n(237),n(238),n(239),n(125),n(240),n(241),n(242),n(243),n(244),n(245),n(246),n(247),n(248),n(249),n(250);var r=n(9);t.exports=r.Symbol},function(t,e,n){"use strict";var r=n(5),o=n(11),i=n(55),a=n(13),s=n(31),l=n(35),u=n(69),c=n(88),f=n(56),d=n(10),p=n(86),h=d("isConcatSpreadable"),v=9007199254740991,m="Maximum allowed index exceeded",g=p>=51||!o((function(){var t=[];return t[h]=!1,t.concat()[0]!==t})),A=f("concat"),y=function(t){if(!a(t))return!1;var e=t[h];return void 0!==e?!!e:i(t)};r({target:"Array",proto:!0,forced:!g||!A},{concat:function(t){var e,n,r,o,i,a=s(this),f=c(a,0),d=0;for(e=-1,r=arguments.length;e<r;e++)if(y(i=-1===e?a:arguments[e])){if(d+(o=l(i.length))>v)throw TypeError(m);for(n=0;n<o;n++,d++)n in i&&u(f,d,i[n])}else{if(d>=v)throw TypeError(m);u(f,d++,i)}return f.length=d,f}})},function(t,e,n){"use strict";var r=n(5),o=n(8),i=n(36),a=n(43),s=n(14),l=n(76),u=n(106),c=n(11),f=n(16),d=n(55),p=n(13),h=n(25),v=n(31),m=n(30),g=n(60),A=n(48),y=n(77),w=n(52),b=n(126),_=n(235),x=n(127),E=n(71),S=n(18),T=n(59),C=n(19),D=n(53),k=n(74),M=n(63),N=n(51),R=n(64),B=n(10),P=n(93),O=n(12),I=n(37),L=n(42),H=n(32).forEach,F=M("hidden"),j="Symbol",U="prototype",V=B("toPrimitive"),Q=L.set,z=L.getterFor(j),Y=Object[U],q=o.Symbol,$=i("JSON","stringify"),G=E.f,J=S.f,K=_.f,W=T.f,X=k("symbols"),Z=k("op-symbols"),tt=k("string-to-symbol-registry"),et=k("symbol-to-string-registry"),nt=k("wks"),rt=o.QObject,ot=!rt||!rt[U]||!rt[U].findChild,it=s&&c((function(){return 7!=y(J({},"a",{get:function(){return J(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=G(Y,e);r&&delete Y[e],J(t,e,n),r&&t!==Y&&J(Y,e,r)}:J,at=function(t,e){var n=X[t]=y(q[U]);return Q(n,{type:j,tag:t,description:e}),s||(n.description=e),n},st=u?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof q},lt=function(t,e,n){t===Y&&lt(Z,e,n),h(t);var r=g(e,!0);return h(n),f(X,r)?(n.enumerable?(f(t,F)&&t[F][r]&&(t[F][r]=!1),n=y(n,{enumerable:A(0,!1)})):(f(t,F)||J(t,F,A(1,{})),t[F][r]=!0),it(t,r,n)):J(t,r,n)},ut=function(t,e){h(t);var n=m(e),r=w(n).concat(pt(n));return H(r,(function(e){s&&!ct.call(n,e)||lt(t,e,n[e])})),t},ct=function(t){var e=g(t,!0),n=W.call(this,e);return!(this===Y&&f(X,e)&&!f(Z,e))&&(!(n||!f(this,e)||!f(X,e)||f(this,F)&&this[F][e])||n)},ft=function(t,e){var n=m(t),r=g(e,!0);if(n!==Y||!f(X,r)||f(Z,r)){var o=G(n,r);return!o||!f(X,r)||f(n,F)&&n[F][r]||(o.enumerable=!0),o}},dt=function(t){var e=K(m(t)),n=[];return H(e,(function(t){f(X,t)||f(N,t)||n.push(t)})),n},pt=function(t){var e=t===Y,n=K(e?Z:m(t)),r=[];return H(n,(function(t){!f(X,t)||e&&!f(Y,t)||r.push(X[t])})),r};l||(q=function(){if(this instanceof q)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=R(t),n=function(t){this===Y&&n.call(Z,t),f(this,F)&&f(this[F],e)&&(this[F][e]=!1),it(this,e,A(1,t))};return s&&ot&&it(Y,e,{configurable:!0,set:n}),at(e,t)},D(q[U],"toString",(function(){return z(this).tag})),D(q,"withoutSetter",(function(t){return at(R(t),t)})),T.f=ct,S.f=lt,E.f=ft,b.f=_.f=dt,x.f=pt,P.f=function(t){return at(B(t),t)},s&&(J(q[U],"description",{configurable:!0,get:function(){return z(this).description}}),a||D(Y,"propertyIsEnumerable",ct,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!l,sham:!l},{Symbol:q}),H(w(nt),(function(t){O(t)})),r({target:j,stat:!0,forced:!l},{for:function(t){var e=String(t);if(f(tt,e))return tt[e];var n=q(e);return tt[e]=n,et[n]=e,n},keyFor:function(t){if(!st(t))throw TypeError(t+" is not a symbol");if(f(et,t))return et[t]},useSetter:function(){ot=!0},useSimple:function(){ot=!1}}),r({target:"Object",stat:!0,forced:!l,sham:!s},{create:function(t,e){return void 0===e?y(t):ut(y(t),e)},defineProperty:lt,defineProperties:ut,getOwnPropertyDescriptor:ft}),r({target:"Object",stat:!0,forced:!l},{getOwnPropertyNames:dt,getOwnPropertySymbols:pt}),r({target:"Object",stat:!0,forced:c((function(){x.f(1)}))},{getOwnPropertySymbols:function(t){return x.f(v(t))}}),$&&r({target:"JSON",stat:!0,forced:!l||c((function(){var t=q();return"[null]"!=$([t])||"{}"!=$({a:t})||"{}"!=$(Object(t))}))},{stringify:function(t,e,n){for(var r,o=[t],i=1;arguments.length>i;)o.push(arguments[i++]);if(r=e,(p(e)||void 0!==t)&&!st(t))return d(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!st(e))return e}),o[1]=e,$.apply(null,o)}}),q[U][V]||C(q[U],V,q[U].valueOf),I(q,j),N[F]=!0},function(t,e,n){var r=n(30),o=n(126).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return a.slice()}}(t):o(r(t))}},function(t,e,n){n(12)("asyncIterator")},function(t,e){},function(t,e,n){n(12)("hasInstance")},function(t,e,n){n(12)("isConcatSpreadable")},function(t,e,n){n(12)("match")},function(t,e,n){n(12)("matchAll")},function(t,e,n){n(12)("replace")},function(t,e,n){n(12)("search")},function(t,e,n){n(12)("species")},function(t,e,n){n(12)("split")},function(t,e,n){n(12)("toPrimitive")},function(t,e,n){n(12)("toStringTag")},function(t,e,n){n(12)("unscopables")},function(t,e,n){n(37)(Math,"Math",!0)},function(t,e,n){var r=n(8);n(37)(r.JSON,"JSON",!0)},function(t,e,n){n(12)("asyncDispose")},function(t,e,n){n(12)("dispose")},function(t,e,n){n(12)("observable")},function(t,e,n){n(12)("patternMatch")},function(t,e,n){n(12)("replaceAll")},function(t,e,n){t.exports=n(257)},function(t,e,n){var r=n(258);t.exports=r},function(t,e,n){n(259);var r=n(9);t.exports=r.parseInt},function(t,e,n){var r=n(5),o=n(260);r({global:!0,forced:parseInt!=o},{parseInt:o})},function(t,e,n){var r=n(8),o=n(90).trim,i=n(68),a=r.parseInt,s=/^[+-]?0[Xx]/,l=8!==a(i+"08")||22!==a(i+"0x16");t.exports=l?function(t,e){var n=o(String(t));return a(n,e>>>0||(s.test(n)?16:10))}:a},function(t,e,n){var r=n(262);t.exports=r},function(t,e,n){var r=n(263),o=Array.prototype;t.exports=function(t){var e=t.slice;return t===o||t instanceof Array&&e===o.slice?r:e}},function(t,e,n){n(264);var r=n(15);t.exports=r("Array").slice},function(t,e,n){"use strict";var r=n(5),o=n(13),i=n(55),a=n(79),s=n(35),l=n(30),u=n(69),c=n(10),f=n(56),d=n(22),p=f("slice"),h=d("slice",{ACCESSORS:!0,0:0,1:2}),v=c("species"),m=[].slice,g=Math.max;r({target:"Array",proto:!0,forced:!p||!h},{slice:function(t,e){var n,r,c,f=l(this),d=s(f.length),p=a(t,d),h=a(void 0===e?d:e,d);if(i(f)&&("function"!=typeof(n=f.constructor)||n!==Array&&!i(n.prototype)?o(n)&&null===(n=n[v])&&(n=void 0):n=void 0,n===Array||void 0===n))return m.call(f,p,h);for(r=new(void 0===n?Array:n)(g(h-p,0)),c=0;p<h;p++,c++)p in f&&u(r,c,f[p]);return r.length=c,r}})},function(t,e,n){n(266);var r=n(9);t.exports=r.setTimeout},function(t,e,n){var r=n(5),o=n(8),i=n(84),a=[].slice,s=function(t){return function(e,n){var r=arguments.length>2,o=r?a.call(arguments,2):void 0;return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,o)}:e,n)}};r({global:!0,bind:!0,forced:/MSIE .\./.test(i)},{setTimeout:s(o.setTimeout),setInterval:s(o.setInterval)})},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(128));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=a.__importDefault(n(272)),l=a.__importDefault(n(273)),u=a.__importDefault(n(129)),c=a.__importDefault(n(274)),f=a.__importDefault(n(275)),d=a.__importDefault(n(276)),p=a.__importDefault(n(130)),h=a.__importDefault(n(277)),v=a.__importDefault(n(278)),m=a.__importDefault(n(279)),g=(0,i.default)({},s.default,l.default,u.default,f.default,c.default,d.default,p.default,h.default,v.default,m.default,{linkCheck:function(t,e){return!0}});e.default=g},function(t,e,n){var r=n(269);t.exports=r},function(t,e,n){n(270);var r=n(9);t.exports=r.Object.assign},function(t,e,n){var r=n(5),o=n(271);r({target:"Object",stat:!0,forced:Object.assign!==o},{assign:o})},function(t,e,n){"use strict";var r=n(14),o=n(11),i=n(52),a=n(127),s=n(59),l=n(31),u=n(72),c=Object.assign,f=Object.defineProperty;t.exports=!c||o((function(){if(r&&1!==c({b:1},c(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},n=Symbol(),o="abcdefghijklmnopqrst";return t[n]=7,o.split("").forEach((function(t){e[t]=t})),7!=c({},t)[n]||i(c({},e)).join("")!=o}))?function(t,e){for(var n=l(t),o=arguments.length,c=1,f=a.f,d=s.f;o>c;)for(var p,h=u(arguments[c++]),v=f?i(h).concat(f(h)):i(h),m=v.length,g=0;m>g;)p=v[g++],r&&!d.call(h,p)||(n[p]=h[p]);return n}:c},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.default={menus:["head","bold","fontSize","fontName","italic","underline","strikeThrough","indent","lineHeight","foreColor","backColor","link","list","todo","justify","quote","emoticon","image","video","table","code","splitLine","undo","redo"],fontNames:["黑体","仿宋","楷体","标楷体","华文仿宋","华文楷体","宋体","微软雅黑","Arial","Tahoma","Verdana","Times New Roman","Courier New"],fontSizes:{"x-small":{name:"10px",value:"1"},small:{name:"13px",value:"2"},normal:{name:"16px",value:"3"},large:{name:"18px",value:"4"},"x-large":{name:"24px",value:"5"},"xx-large":{name:"32px",value:"6"},"xxx-large":{name:"48px",value:"7"}},colors:["#000000","#ffffff","#eeece0","#1c487f","#4d80bf","#c24f4a","#8baa4a","#7b5ba1","#46acc8","#f9963b"],languageType:["Bash","C","C#","C++","CSS","Java","JavaScript","JSON","TypeScript","Plain text","Html","XML","SQL","Go","Kotlin","Lua","Markdown","PHP","Python","Shell Session","Ruby"],languageTab:"　　　　",emotions:[{title:"表情",type:"emoji",content:"😀 😃 😄 😁 😆 😅 😂 🤣 😊 😇 🙂 🙃 😉 😌 😍 😘 😗 😙 😚 😋 😛 😝 😜 🤓 😎 😏 😒 😞 😔 😟 😕 🙁 😣 😖 😫 😩 😢 😭 😤 😠 😡 😳 😱 😨 🤗 🤔 😶 😑 😬 🙄 😯 😴 😷 🤑 😈 🤡 💩 👻 💀 👀 👣".split(/\s/)},{title:"手势",type:"emoji",content:"👐 🙌 👏 🤝 👍 👎 👊 ✊ 🤛 🤜 🤞 ✌️ 🤘 👌 👈 👉 👆 👇 ☝️ ✋ 🤚 🖐 🖖 👋 🤙 💪 🖕 ✍️ 🙏".split(/\s/)}],lineHeights:["1","1.15","1.6","2","2.5","3"],undoLimit:20,indentation:"2em",showMenuTooltips:!0,menuTooltipPosition:"up"}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(7);e.default={onchangeTimeout:200,onchange:null,onfocus:r.EMPTY_FN,onblur:r.EMPTY_FN,onCatalogChange:null,customAlert:function(t,e,n){window.alert(t),n&&console.error("wangEditor: "+n)}}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.default={pasteFilterStyle:!0,pasteIgnoreImg:!1,pasteTextHandle:function(t){return t}}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.default={styleWithCSS:!1}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(7);e.default={linkImgCheck:function(t,e,n){return!0},showLinkImg:!0,showLinkImgAlt:!0,showLinkImgHref:!0,linkImgCallback:r.EMPTY_FN,uploadImgAccept:["jpg","jpeg","png","gif","bmp"],uploadImgServer:"",uploadImgShowBase64:!1,uploadImgMaxSize:5242880,uploadImgMaxLength:100,uploadFileName:"",uploadImgParams:{},uploadImgParamsWithUrl:!1,uploadImgHeaders:{},uploadImgHooks:{},uploadImgTimeout:1e4,withCredentials:!1,customUploadImg:null,uploadImgFromMedia:null}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.default={lang:"zh-CN",languages:{"zh-CN":{wangEditor:{重置:"重置",插入:"插入",默认:"默认",创建:"创建",修改:"修改",如:"如",请输入正文:"请输入正文",menus:{title:{标题:"标题",加粗:"加粗",字号:"字号",字体:"字体",斜体:"斜体",下划线:"下划线",删除线:"删除线",缩进:"缩进",行高:"行高",文字颜色:"文字颜色",背景色:"背景色",链接:"链接",序列:"序列",对齐:"对齐",引用:"引用",表情:"表情",图片:"图片",视频:"视频",表格:"表格",代码:"代码",分割线:"分割线",恢复:"恢复",撤销:"撤销",全屏:"全屏",取消全屏:"取消全屏",待办事项:"待办事项"},dropListMenu:{设置标题:"设置标题",背景颜色:"背景颜色",文字颜色:"文字颜色",设置字号:"设置字号",设置字体:"设置字体",设置缩进:"设置缩进",对齐方式:"对齐方式",设置行高:"设置行高",序列:"序列",head:{正文:"正文"},indent:{增加缩进:"增加缩进",减少缩进:"减少缩进"},justify:{靠左:"靠左",居中:"居中",靠右:"靠右",两端:"两端"},list:{无序列表:"无序列表",有序列表:"有序列表"}},panelMenus:{emoticon:{默认:"默认",新浪:"新浪",emoji:"emoji",手势:"手势"},image:{上传图片:"上传图片",网络图片:"网络图片",图片地址:"图片地址",图片文字说明:"图片文字说明",跳转链接:"跳转链接"},link:{链接:"链接",链接文字:"链接文字",取消链接:"取消链接",查看链接:"查看链接"},video:{插入视频:"插入视频",上传视频:"上传视频"},table:{行:"行",列:"列",的:"的",表格:"表格",添加行:"添加行",删除行:"删除行",添加列:"添加列",删除列:"删除列",设置表头:"设置表头",取消表头:"取消表头",插入表格:"插入表格",删除表格:"删除表格"},code:{删除代码:"删除代码",修改代码:"修改代码",插入代码:"插入代码"}}},validate:{张图片:"张图片",大于:"大于",图片链接:"图片链接",不是图片:"不是图片",返回结果:"返回结果",上传图片超时:"上传图片超时",上传图片错误:"上传图片错误",上传图片失败:"上传图片失败",插入图片错误:"插入图片错误",一次最多上传:"一次最多上传",下载链接失败:"下载链接失败",图片验证未通过:"图片验证未通过",服务器返回状态:"服务器返回状态",上传图片返回结果错误:"上传图片返回结果错误",请替换为支持的图片类型:"请替换为支持的图片类型",您插入的网络图片无法识别:"您插入的网络图片无法识别",您刚才插入的图片链接未通过编辑器校验:"您刚才插入的图片链接未通过编辑器校验",插入视频错误:"插入视频错误",视频链接:"视频链接",不是视频:"不是视频",视频验证未通过:"视频验证未通过",个视频:"个视频",上传视频超时:"上传视频超时",上传视频错误:"上传视频错误",上传视频失败:"上传视频失败",上传视频返回结果错误:"上传视频返回结果错误"}}},en:{wangEditor:{重置:"reset",插入:"insert",默认:"default",创建:"create",修改:"edit",如:"like",请输入正文:"please enter the text",menus:{title:{标题:"head",加粗:"bold",字号:"font size",字体:"font family",斜体:"italic",下划线:"underline",删除线:"strikethrough",缩进:"indent",行高:"line heihgt",文字颜色:"font color",背景色:"background",链接:"link",序列:"numbered list",对齐:"align",引用:"quote",表情:"emoticons",图片:"image",视频:"media",表格:"table",代码:"code",分割线:"split line",恢复:"redo",撤销:"undo",全屏:"fullscreen",取消全屏:"cancel fullscreen",待办事项:"todo"},dropListMenu:{设置标题:"title",背景颜色:"background",文字颜色:"font color",设置字号:"font size",设置字体:"font family",设置缩进:"indent",对齐方式:"align",设置行高:"line heihgt",序列:"list",head:{正文:"text"},indent:{增加缩进:"indent",减少缩进:"outdent"},justify:{靠左:"left",居中:"center",靠右:"right",两端:"justify"},list:{无序列表:"unordered",有序列表:"ordered"}},panelMenus:{emoticon:{表情:"emoji",手势:"gesture"},image:{上传图片:"upload image",网络图片:"network image",图片地址:"image link",图片文字说明:"image alt",跳转链接:"hyperlink"},link:{链接:"link",链接文字:"link text",取消链接:"unlink",查看链接:"view links"},video:{插入视频:"insert video",上传视频:"upload local video"},table:{行:"rows",列:"columns",的:" ",表格:"table",添加行:"insert row",删除行:"delete row",添加列:"insert column",删除列:"delete column",设置表头:"set header",取消表头:"cancel header",插入表格:"insert table",删除表格:"delete table"},code:{删除代码:"delete code",修改代码:"edit code",插入代码:"insert code"}}},validate:{张图片:"images",大于:"greater than",图片链接:"image link",不是图片:"is not image",返回结果:"return results",上传图片超时:"upload image timeout",上传图片错误:"upload image error",上传图片失败:"upload image failed",插入图片错误:"insert image error",一次最多上传:"once most at upload",下载链接失败:"download link failed",图片验证未通过:"image validate failed",服务器返回状态:"server return status",上传图片返回结果错误:"upload image return results error",请替换为支持的图片类型:"please replace with a supported image type",您插入的网络图片无法识别:"the network picture you inserted is not recognized",您刚才插入的图片链接未通过编辑器校验:"the image link you just inserted did not pass the editor verification",插入视频错误:"insert video error",视频链接:"video link",不是视频:"is not video",视频验证未通过:"video validate failed",个视频:"videos",上传视频超时:"upload video timeout",上传视频错误:"upload video error",上传视频失败:"upload video failed",上传视频返回结果错误:"upload video return results error"}}}}}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(6);e.default={compatibleMode:function(){return!(!r.UA.isIE()&&!r.UA.isOldEdge)},historyMaxSize:30}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(7);e.default={onlineVideoCheck:function(t){return!0},onlineVideoCallback:r.EMPTY_FN,showLinkVideo:!0,uploadVideoAccept:["mp4"],uploadVideoServer:"",uploadVideoMaxSize:1073741824,uploadVideoName:"",uploadVideoParams:{},uploadVideoParamsWithUrl:!1,uploadVideoHeaders:{},uploadVideoHooks:{},uploadVideoTimeout:72e5,withVideoCredentials:!1,customUploadVideo:null,customInsertVideo:null}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(17));(0,o.default)(e,"__esModule",{value:!0});var a=n(2).__importDefault(n(3)),s=n(6),l=n(7),u=function(){function t(t){this._currentRange=null,this.editor=t}return t.prototype.getRange=function(){return this._currentRange},t.prototype.saveRange=function(t){if(t)this._currentRange=t;else{var e=window.getSelection();if(0!==e.rangeCount){var n=e.getRangeAt(0),r=this.getSelectionContainerElem(n);if((null==r?void 0:r.length)&&"false"!==r.attr("contenteditable")&&!r.parentUntil("[contenteditable=false]")){var o=this.editor,a=o.$textElem;if(a.isContain(r)){var s;if(a.elems[0]===r.elems[0]&&(0,i.default)(s=a.html()).call(s)===l.EMPTY_P){var u=a.children(),c=null==u?void 0:u.last();o.selection.createRangeByElem(c,!0,!0),o.selection.restoreSelection()}this._currentRange=n}}}}},t.prototype.collapseRange=function(t){void 0===t&&(t=!1);var e=this._currentRange;e&&e.collapse(t)},t.prototype.getSelectionText=function(){var t=this._currentRange;return t?t.toString():""},t.prototype.getSelectionContainerElem=function(t){var e,n;if(e=t||this._currentRange)return n=e.commonAncestorContainer,a.default(1===n.nodeType?n:n.parentNode)},t.prototype.getSelectionStartElem=function(t){var e,n;if(e=t||this._currentRange)return n=e.startContainer,a.default(1===n.nodeType?n:n.parentNode)},t.prototype.getSelectionEndElem=function(t){var e,n;if(e=t||this._currentRange)return n=e.endContainer,a.default(1===n.nodeType?n:n.parentNode)},t.prototype.isSelectionEmpty=function(){var t=this._currentRange;return!(!t||!t.startContainer||t.startContainer!==t.endContainer||t.startOffset!==t.endOffset)},t.prototype.restoreSelection=function(){var t=window.getSelection(),e=this._currentRange;t&&e&&(t.removeAllRanges(),t.addRange(e))},t.prototype.createEmptyRange=function(){var t,e=this.editor,n=this.getRange();if(n&&this.isSelectionEmpty())try{s.UA.isWebkit()?(e.cmd.do("insertHTML","&#8203;"),n.setEnd(n.endContainer,n.endOffset+1),this.saveRange(n)):(t=a.default("<strong>&#8203;</strong>"),e.cmd.do("insertElem",t),this.createRangeByElem(t,!0))}catch(t){}},t.prototype.createRangeByElems=function(t,e){var n=window.getSelection?window.getSelection():document.getSelection();null==n||n.removeAllRanges();var r=document.createRange();r.setStart(t,0),r.setEnd(e,e.childNodes.length||1),this.saveRange(r),this.restoreSelection()},t.prototype.createRangeByElem=function(t,e,n){if(t.length){var r=t.elems[0],o=document.createRange();n?o.selectNodeContents(r):o.selectNode(r),null!=e&&(o.collapse(e),e||(this.saveRange(o),this.editor.selection.moveCursor(r))),this.saveRange(o)}},t.prototype.getSelectionRangeTopNodes=function(){var t,e,n=null===(t=this.getSelectionStartElem())||void 0===t?void 0:t.getNodeTop(this.editor),r=null===(e=this.getSelectionEndElem())||void 0===e?void 0:e.getNodeTop(this.editor);return this.recordSelectionNodes(a.default(n),a.default(r))},t.prototype.moveCursor=function(t,e){var n,r=this.getRange(),o=3===t.nodeType?null===(n=t.nodeValue)||void 0===n?void 0:n.length:t.childNodes.length;(s.UA.isFirefox||s.UA.isIE())&&0!==o&&(3!==t.nodeType&&"BR"!==t.childNodes[o-1].nodeName||(o-=1));var i=null!=e?e:o;r&&t&&(r.setStart(t,i),r.setEnd(t,i),this.restoreSelection())},t.prototype.getCursorPos=function(){var t=window.getSelection();return null==t?void 0:t.anchorOffset},t.prototype.clearWindowSelectionRange=function(){var t=window.getSelection();t&&t.removeAllRanges()},t.prototype.recordSelectionNodes=function(t,e){var n=[],r=!0;try{for(var o=t,i=this.editor.$textElem;r;){var s=null==o?void 0:o.getNodeTop(this.editor);"BODY"===s.getNodeName()&&(r=!1),s.length>0&&(n.push(a.default(o)),(null==e?void 0:e.equal(s))||i.equal(s)?r=!1:o=s.getNextSibling())}}catch(t){r=!1}return n},t.prototype.setRangeToElem=function(t){var e=this.getRange();null==e||e.setStart(t,0),null==e||e.setEnd(t,0)},t}();e.default=u},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2).__importDefault(n(3)),o=function(){function t(t){this.editor=t}return t.prototype.do=function(t,e){var n=this.editor;n.config.styleWithCSS&&document.execCommand("styleWithCSS",!1,"true");var r=n.selection;if(r.getRange()){switch(r.restoreSelection(),t){case"insertHTML":this.insertHTML(e);break;case"insertElem":this.insertElem(e);break;default:this.execCommand(t,e)}n.menus.changeActive(),r.saveRange(),r.restoreSelection()}},t.prototype.insertHTML=function(t){var e=this.editor,n=e.selection.getRange();if(null!=n)if(this.queryCommandSupported("insertHTML"))this.execCommand("insertHTML",t);else if(n.insertNode){if(n.deleteContents(),r.default(t).elems.length>0)n.insertNode(r.default(t).elems[0]);else{var o=document.createElement("p");o.appendChild(document.createTextNode(t)),n.insertNode(o)}e.selection.collapseRange()}},t.prototype.insertElem=function(t){var e=this.editor.selection.getRange();null!=e&&e.insertNode&&(e.deleteContents(),e.insertNode(t.elems[0]))},t.prototype.execCommand=function(t,e){document.execCommand(t,!1,e)},t.prototype.queryCommandValue=function(t){return document.queryCommandValue(t)},t.prototype.queryCommandState=function(t){return document.queryCommandState(t)},t.prototype.queryCommandSupported=function(t){return document.queryCommandSupported(t)},t}();e.default=o},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(29)),a=r(n(4)),s=r(n(17)),l=r(n(27)),u=r(n(46));(0,o.default)(e,"__esModule",{value:!0});var c=n(2),f=c.__importDefault(n(3)),d=c.__importDefault(n(287)),p=n(6),h=c.__importDefault(n(299)),v=c.__importDefault(n(300)),m=n(7),g=function(){function t(t){this.editor=t,this.eventHooks={onBlurEvents:[],changeEvents:[],dropEvents:[],clickEvents:[],keydownEvents:[],keyupEvents:[],tabUpEvents:[],tabDownEvents:[],enterUpEvents:[],enterDownEvents:[],deleteUpEvents:[],deleteDownEvents:[],pasteEvents:[],linkClickEvents:[],codeClickEvents:[],textScrollEvents:[],toolbarClickEvents:[],imgClickEvents:[],imgDragBarMouseDownEvents:[],tableClickEvents:[],menuClickEvents:[],dropListMenuHoverEvents:[],splitLineEvents:[],videoClickEvents:[]}}return t.prototype.init=function(){this._saveRange(),this._bindEventHooks(),d.default(this)},t.prototype.togglePlaceholder=function(){var t,e=this.html(),n=(0,i.default)(t=this.editor.$textContainerElem).call(t,".placeholder");n.hide(),this.editor.isComposing||e&&" "!==e||n.show()},t.prototype.clear=function(){this.html(m.EMPTY_P)},t.prototype.html=function(t){var e=this.editor,n=e.$textElem;if(null==t){var r=n.html(),o=(r=(r=(r=(r=r.replace(/\u200b/gm,"")).replace(/<p><\/p>/gim,"")).replace(m.EMPTY_P_LAST_REGEX,"")).replace(m.EMPTY_P_REGEX,"<p>")).match(/<(img|br|hr|input)[^>]*>/gi);return null!==o&&(0,a.default)(o).call(o,(function(t){t.match(/\/>/)||(r=r.replace(t,t.substring(0,t.length-1)+"/>"))})),r}""===(t=(0,s.default)(t).call(t))&&(t=m.EMPTY_P),0!==(0,l.default)(t).call(t,"<")&&(t="<p>"+t+"</p>"),n.html(t),e.initSelection()},t.prototype.setJSON=function(t){var e=v.default(t).children(),n=this.editor.$textElem;e&&n.replaceChildAll(e)},t.prototype.getJSON=function(){var t=this.editor.$textElem;return h.default(t)},t.prototype.text=function(t){var e=this.editor,n=e.$textElem;if(null==t){var r=n.text();return r.replace(/\u200b/gm,"")}n.text("<p>"+t+"</p>"),e.initSelection()},t.prototype.append=function(t){var e=this.editor;0!==(0,l.default)(t).call(t,"<")&&(t="<p>"+t+"</p>"),this.html(this.html()+t),e.initSelection()},t.prototype._saveRange=function(){var t=this.editor,e=t.$textElem,n=f.default(document);function r(){t.selection.saveRange(),t.menus.changeActive()}function o(){r(),n.off("mouseup",o)}function i(){n.on("mouseup",o),e.off("mouseleave",i)}e.on("keyup",r),e.on("click",(function t(){r(),e.off("click",t)})),e.on("mousedown",(function(){e.on("mouseleave",i)})),e.on("mouseup",(function(n){e.off("mouseleave",i),(0,u.default)((function(){null!==t.selection.getRange()&&r()}),0)}))},t.prototype._bindEventHooks=function(){var t=this.editor,e=t.$textElem,n=this.eventHooks;function r(t){t.preventDefault()}e.on("click",(function(t){var e=n.clickEvents;(0,a.default)(e).call(e,(function(e){return e(t)}))})),e.on("keyup",(function(t){if(13===t.keyCode){var e=n.enterUpEvents;(0,a.default)(e).call(e,(function(e){return e(t)}))}})),e.on("keyup",(function(t){var e=n.keyupEvents;(0,a.default)(e).call(e,(function(e){return e(t)}))})),e.on("keydown",(function(t){var e=n.keydownEvents;(0,a.default)(e).call(e,(function(e){return e(t)}))})),e.on("keyup",(function(t){if(8===t.keyCode||46===t.keyCode){var e=n.deleteUpEvents;(0,a.default)(e).call(e,(function(e){return e(t)}))}})),e.on("keydown",(function(t){if(8===t.keyCode||46===t.keyCode){var e=n.deleteDownEvents;(0,a.default)(e).call(e,(function(e){return e(t)}))}})),e.on("paste",(function(t){if(!p.UA.isIE()){t.preventDefault();var e=n.pasteEvents;(0,a.default)(e).call(e,(function(e){return e(t)}))}})),e.on("keydown",(function(e){(t.isFocus||t.isCompatibleMode)&&(e.ctrlKey||e.metaKey)&&90===e.keyCode&&(e.preventDefault(),e.shiftKey?t.history.restore():t.history.revoke())})),e.on("keyup",(function(t){if(9===t.keyCode){t.preventDefault();var e=n.tabUpEvents;(0,a.default)(e).call(e,(function(e){return e(t)}))}})),e.on("keydown",(function(t){if(9===t.keyCode){t.preventDefault();var e=n.tabDownEvents;(0,a.default)(e).call(e,(function(e){return e(t)}))}})),e.on("scroll",p.throttle((function(t){var e=n.textScrollEvents;(0,a.default)(e).call(e,(function(e){return e(t)}))}),100)),f.default(document).on("dragleave",r).on("drop",r).on("dragenter",r).on("dragover",r),t.beforeDestroy((function(){f.default(document).off("dragleave",r).off("drop",r).off("dragenter",r).off("dragover",r)})),e.on("drop",(function(t){t.preventDefault();var e=n.dropEvents;(0,a.default)(e).call(e,(function(e){return e(t)}))})),e.on("click",(function(t){var e=null,r=t.target,o=f.default(r);if("A"===o.getNodeName())e=o;else{var i=o.parentUntil("a");null!=i&&(e=i)}if(e){var s=n.linkClickEvents;(0,a.default)(s).call(s,(function(t){return t(e)}))}})),e.on("click",(function(t){var e=null,r=t.target,o=f.default(r);if("IMG"!==o.getNodeName()||o.elems[0].getAttribute("data-emoji")||(t.stopPropagation(),e=o),e){var i=n.imgClickEvents;(0,a.default)(i).call(i,(function(t){return t(e)}))}})),e.on("click",(function(t){var e=null,r=t.target,o=f.default(r);if("PRE"===o.getNodeName())e=o;else{var i=o.parentUntil("pre");null!==i&&(e=i)}if(e){var s=n.codeClickEvents;(0,a.default)(s).call(s,(function(t){return t(e)}))}})),e.on("click",(function(e){var r=null,o=e.target,i=f.default(o);if("HR"===i.getNodeName()&&(r=i),r){t.selection.createRangeByElem(r),t.selection.restoreSelection();var s=n.splitLineEvents;(0,a.default)(s).call(s,(function(t){return t(r)}))}})),t.$toolbarElem.on("click",(function(t){var e=n.toolbarClickEvents;(0,a.default)(e).call(e,(function(e){return e(t)}))})),t.$textContainerElem.on("mousedown",(function(t){var e=t.target;if(f.default(e).hasClass("w-e-img-drag-rb")){var r=n.imgDragBarMouseDownEvents;(0,a.default)(r).call(r,(function(t){return t()}))}})),e.on("click",(function(e){var r,o=e.target;if(r=f.default(o).parentUntilEditor("TABLE",t,o)){var i=n.tableClickEvents;(0,a.default)(i).call(i,(function(t){return t(r,e)}))}})),e.on("keydown",(function(t){if(13===t.keyCode){var e=n.enterDownEvents;(0,a.default)(e).call(e,(function(e){return e(t)}))}})),e.on("click",(function(t){var e=null,r=t.target,o=f.default(r);if("VIDEO"===o.getNodeName()&&(t.stopPropagation(),e=o),e){var i=n.videoClickEvents;(0,a.default)(i).call(i,(function(t){return t(e)}))}}))},t}();e.default=g},function(t,e,n){var r=n(284);t.exports=r},function(t,e,n){var r=n(285),o=Array.prototype;t.exports=function(t){var e=t.find;return t===o||t instanceof Array&&e===o.find?r:e}},function(t,e,n){n(286);var r=n(15);t.exports=r("Array").find},function(t,e,n){"use strict";var r=n(5),o=n(32).find,i=n(82),a=n(22),s="find",l=!0,u=a(s);s in[]&&Array(1)[s]((function(){l=!1})),r({target:"Array",proto:!0,forced:l||!u},{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i(s)},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(288)),i=r.__importStar(n(289)),a=r.__importDefault(n(290)),s=r.__importDefault(n(291)),l=r.__importDefault(n(298));e.default=function(t){var e=t.editor,n=t.eventHooks;o.default(e,n.enterUpEvents,n.enterDownEvents),i.default(e,n.deleteUpEvents,n.deleteDownEvents),i.cutToKeepP(e,n.keyupEvents),a.default(e,n.tabDownEvents),s.default(e,n.pasteEvents),l.default(e,n.imgClickEvents)}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(27));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=n(7),l=a.__importDefault(n(3));e.default=function(t,e,n){function r(e){var n,r=l.default(s.EMPTY_P);r.insertBefore(e),(0,i.default)(n=e.html()).call(n,"<img")>=0?r.remove():(t.selection.createRangeByElem(r,!0,!0),t.selection.restoreSelection(),e.remove())}e.push((function(){var e=t.$textElem,n=t.selection.getSelectionContainerElem(),o=n.parent();"<code><br></code>"===o.html()||"FONT"===n.getNodeName()&&""===n.text()&&"monospace"===n.attr("face")?r(o):o.equal(e)&&("P"===n.getNodeName()&&null===n.attr("data-we-empty-p")||n.text()||r(n))})),n.push((function(e){var n;t.selection.saveRange(null===(n=getSelection())||void 0===n?void 0:n.getRangeAt(0)),t.selection.getSelectionContainerElem().id===t.textElemId&&(e.preventDefault(),t.cmd.do("insertHTML","<p><br></p>"))}))}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(17)),a=r(n(28));(0,o.default)(e,"__esModule",{value:!0}),e.cutToKeepP=void 0;var s=n(2),l=n(7),u=s.__importDefault(n(3));e.cutToKeepP=function(t,e){e.push((function(e){var n;if(88===e.keyCode){var r=t.$textElem,o=(0,i.default)(n=r.html().toLowerCase()).call(n);if(!o||"<br>"===o){var a=u.default(l.EMPTY_P);r.html(" "),r.append(a),t.selection.createRangeByElem(a,!1,!0),t.selection.restoreSelection(),t.selection.moveCursor(a.getNode(),0)}}}))},e.default=function(t,e,n){e.push((function(){var e=t.$textElem,n=t.$textElem.html(),r=t.$textElem.text(),o=(0,i.default)(n).call(n),s=["<p><br></p>","<br>",'<p data-we-empty-p=""></p>',l.EMPTY_P];if(/^\s*$/.test(r)&&(!o||(0,a.default)(s).call(s,o))){e.html(l.EMPTY_P);var u=e.getNode();t.selection.createRangeByElems(u.childNodes[0],u.childNodes[0]);var c=t.selection.getSelectionContainerElem();t.selection.restoreSelection(),t.selection.moveCursor(c.getNode(),0)}})),n.push((function(e){var n,r=t.$textElem;(0,i.default)(n=r.html().toLowerCase()).call(n)!==l.EMPTY_P||e.preventDefault()}))}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.default=function(t,e){e.push((function(){if(t.cmd.queryCommandSupported("insertHTML")){var e=t.selection.getSelectionContainerElem();if(e){var n=e.parent(),r=e.getNodeName(),o=n.getNodeName();"CODE"==r||"CODE"===o||"PRE"===o||/hljs/.test(o)?t.cmd.do("insertHTML",t.config.languageTab):t.cmd.do("insertHTML","&nbsp;&nbsp;&nbsp;&nbsp;")}}}))}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(17)),a=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var s=n(131),l=n(6),u=n(7);function c(t){var e,n=(0,i.default)(e=t.replace(/<div>/gim,"<p>").replace(/<\/div>/gim,"</p>")).call(e),r=document.createElement("div");return r.innerHTML=n,r.innerHTML.replace(/<p><\/p>/gim,"")}e.default=function(t,e){e.push((function(e){var n=t.config,r=n.pasteFilterStyle,o=n.pasteIgnoreImg,i=n.pasteTextHandle,f=s.getPasteHtml(e,r,o),d=s.getPasteText(e);d=d.replace(/\n/gm,"<br>");var p=t.selection.getSelectionContainerElem();if(p){var h,v=null==p?void 0:p.getNodeName(),m=null==p?void 0:p.getNodeTop(t),g="";if(m.elems[0]&&(g=null==m?void 0:m.getNodeName()),"CODE"===v||"PRE"===g)return i&&l.isFunction(i)&&(d=""+(i(d)||"")),void t.cmd.do("insertHTML",(h=d,h.replace(/<br>|<br\/>/gm,"\n").replace(/<[^>]+>/gm,"")));if(u.urlRegex.test(d)&&r){i&&l.isFunction(i)&&(d=""+(i(d)||""));var A=d.replace(u.urlRegex,(function(t){return'<a href="'+t+'" target="_blank">'+t+"</a>"})),y=t.selection.getRange(),w=document.createElement("div"),b=document.createDocumentFragment();if(w.innerHTML=A,null==y)return;for(;w.childNodes.length;)b.append(w.childNodes[0]);var _=b.querySelectorAll("a");return(0,a.default)(_).call(_,(function(t){t.innerText=t.href})),y.insertNode&&(y.deleteContents(),y.insertNode(b)),void t.selection.clearWindowSelectionRange()}if(f)try{if(i&&l.isFunction(i)&&(f=""+(i(f)||"")),/[\.\#\@]?\w+[ ]+\{[^}]*\}/.test(f)&&r)t.cmd.do("insertHTML",""+c(d));else{var x=c(f);if(function(t){var e;if(""===t)return!1;var n=document.createElement("div");return n.innerHTML=t,"P"===(null===(e=n.firstChild)||void 0===e?void 0:e.nodeName)}(x)){var E=t.$textElem;if(t.cmd.do("insertHTML",x),E.equal(p))return void t.selection.createEmptyRange();(function(t){if(!(null==t?void 0:t.length))return!1;var e=t.elems[0];return"P"===e.nodeName&&"<br>"===e.innerHTML})(m)&&m.remove()}else t.cmd.do("insertHTML",x)}}catch(e){i&&l.isFunction(i)&&(d=""+(i(d)||"")),t.cmd.do("insertHTML",""+c(d))}}}))}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(17)),a=r(n(4)),s=r(n(28));(0,o.default)(e,"__esModule",{value:!0});var l=n(2),u=n(293),c=l.__importDefault(n(297));function f(t,e){var n;return t=(0,i.default)(n=t.toLowerCase()).call(n),!!u.IGNORE_TAGS.has(t)||!(!e||"img"!==t)}e.default=function(t,e,n){void 0===e&&(e=!0),void 0===n&&(n=!1);var r=[],o="";function l(t){(t=(0,i.default)(t).call(t))&&(u.EMPTY_TAGS.has(t)||(o=t))}(new c.default).parse(t,{startElement:function(t,o){if(l(t),!f(t,n)){var i=u.NECESSARY_ATTRS.get(t)||[],c=[];(0,a.default)(o).call(o,(function(t){var n=t.name;"style"!==n?!1!==(0,s.default)(i).call(i,n)&&c.push(t):e||c.push(t)}));var d=function(t,e){var n="";n="<"+t;var r=[];return(0,a.default)(e).call(e,(function(t){r.push(t.name+'="'+t.value+'"')})),r.length>0&&(n=n+" "+r.join(" ")),n+(u.EMPTY_TAGS.has(t)?"/":"")+">"}(t,c);r.push(d)}},characters:function(t){t&&(f(o,n)||r.push(t))},endElement:function(t){if(!f(t,n)){var e=function(t){return"</"+t+">"}(t);r.push(e),o=""}},comment:function(t){l(t)}});var d=r.join("");return function(t){var e=/<span>(.*?)<\/span>/;return t.replace(/<span>.*?<\/span>/gi,(function(t){var n=t.match(e);return null==n?"":n[1]}))}(d)}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(132)),a=r(n(121));(0,o.default)(e,"__esModule",{value:!0}),e.TOP_LEVEL_TAGS=e.EMPTY_TAGS=e.NECESSARY_ATTRS=e.IGNORE_TAGS=void 0,e.IGNORE_TAGS=new i.default(["doctype","!doctype","html","head","meta","body","script","style","link","frame","iframe","title","svg","center","o:p"]),e.NECESSARY_ATTRS=new a.default([["img",["src","alt"]],["a",["href","target"]],["td",["colspan","rowspan"]],["th",["colspan","rowspan"]]]),e.EMPTY_TAGS=new i.default(["area","base","basefont","br","col","hr","img","input","isindex","embed"]),e.TOP_LEVEL_TAGS=new i.default(["h1","h2","h3","h4","h5","p","ul","ol","table","blockquote","pre","hr","form"])},function(t,e,n){var r=n(295);t.exports=r},function(t,e,n){n(296),n(61),n(50),n(54);var r=n(9);t.exports=r.Set},function(t,e,n){"use strict";var r=n(122),o=n(124);t.exports=r("Set",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),o)},function(t,e){function n(){}n.prototype={handler:null,startTagRe:/^<([^>\s\/]+)((\s+[^=>\s]+(\s*=\s*((\"[^"]*\")|(\'[^']*\')|[^>\s]+))?)*)\s*\/?\s*>/m,endTagRe:/^<\/([^>\s]+)[^>]*>/m,attrRe:/([^=\s]+)(\s*=\s*((\"([^"]*)\")|(\'([^']*)\')|[^>\s]+))?/gm,parse:function(t,e){e&&(this.contentHandler=e);for(var n,r,o,i=!1,a=this;t.length>0;)"\x3c!--"==t.substring(0,4)?-1!=(o=t.indexOf("--\x3e"))?(this.contentHandler.comment(t.substring(4,o)),t=t.substring(o+3),i=!1):i=!0:"</"==t.substring(0,2)?this.endTagRe.test(t)?(RegExp.leftContext,n=RegExp.lastMatch,r=RegExp.rightContext,n.replace(this.endTagRe,(function(){return a.parseEndTag.apply(a,arguments)})),t=r,i=!1):i=!0:"<"==t.charAt(0)&&(this.startTagRe.test(t)?(RegExp.leftContext,n=RegExp.lastMatch,r=RegExp.rightContext,n.replace(this.startTagRe,(function(){return a.parseStartTag.apply(a,arguments)})),t=r,i=!1):i=!0),i&&(-1==(o=t.indexOf("<"))?(this.contentHandler.characters(t),t=""):(this.contentHandler.characters(t.substring(0,o)),t=t.substring(o))),i=!0},parseStartTag:function(t,e,n){var r=this.parseAttributes(e,n);this.contentHandler.startElement(e,r)},parseEndTag:function(t,e){this.contentHandler.endElement(e)},parseAttributes:function(t,e){var n=this,r=[];return e.replace(this.attrRe,(function(e,o,i,a,s,l,u,c){r.push(n.parseAttribute(t,e,o,i,a,s,l,u,c))})),r},parseAttribute:function(t,e,n){var r="";return arguments[7]?r=arguments[8]:arguments[5]?r=arguments[6]:arguments[3]&&(r=arguments[4]),{name:n,value:r||arguments[3]?r:null}}},t.exports=n},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.default=function(t,e){e.push((function(e){t.selection.createRangeByElem(e),t.selection.restoreSelection()}))}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=n(6),l=a.__importDefault(n(3));e.default=function t(e){var n=[],r=e.childNodes()||[];return(0,i.default)(r).call(r,(function(e){var r,o=e.nodeType;if(3===o&&(r=e.textContent||"",r=s.replaceHtmlSymbol(r)),1===o){(r={}).tag=e.nodeName.toLowerCase();for(var i=[],a=e.attributes,u=a.length||0,c=0;c<u;c++){var f=a[c];i.push({name:f.name,value:f.value})}r.attrs=i,r.children=t(l.default(e))}r&&n.push(r)})),n}},function(t,e,n){"use strict";var r=n(0),o=r(n(92)),i=r(n(1)),a=r(n(4));(0,i.default)(e,"__esModule",{value:!0});var s=n(2).__importDefault(n(3));e.default=function t(e,n){void 0===n&&(n=document.createElement("div"));var r=n;return(0,a.default)(e).call(e,(function(e){var n,i;"string"==typeof e&&(n=document.createTextNode(e)),"object"===(0,o.default)(e)&&(n=document.createElement(e.tag),(0,a.default)(i=e.attrs).call(i,(function(t){s.default(n).attr(t.name,t.value)})),e.children&&e.children.length>0&&t(e.children,n.getRootNode())),n&&r.appendChild(n)})),s.default(r)}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(89)),a=r(n(70)),s=r(n(28)),l=r(n(302)),u=r(n(4)),c=r(n(94)),f=r(n(133)),d=r(n(46)),p=r(n(57));(0,o.default)(e,"__esModule",{value:!0});var h=n(2),v=h.__importDefault(n(87)),m=h.__importDefault(n(314)),g=h.__importDefault(n(3)),A=function(){function t(t){this.editor=t,this.menuList=[],this.constructorList=m.default}return t.prototype.extend=function(t,e){e&&"function"==typeof e&&(this.constructorList[t]=e)},t.prototype.init=function(){var t,e,n=this,r=this.editor.config,o=r.excludeMenus;!1===(0,i.default)(o)&&(o=[]),r.menus=(0,a.default)(t=r.menus).call(t,(function(t){return!1===(0,s.default)(o).call(o,t)}));var f=(0,l.default)(v.default.globalCustomMenuConstructorList);f=(0,a.default)(f).call(f,(function(t){return(0,s.default)(o).call(o,t)})),(0,u.default)(f).call(f,(function(t){delete v.default.globalCustomMenuConstructorList[t]})),(0,u.default)(e=r.menus).call(e,(function(t){var e=n.constructorList[t];n._initMenuList(t,e)}));for(var d=0,p=(0,c.default)(v.default.globalCustomMenuConstructorList);d<p.length;d++){var h=p[d],m=h[0],g=h[1];this._initMenuList(m,g)}this._addToToolbar(),r.showMenuTooltips&&this._bindMenuTooltips()},t.prototype._initMenuList=function(t,e){var n;if(null!=e&&"function"==typeof e)if((0,f.default)(n=this.menuList).call(n,(function(e){return e.key===t})))console.warn("菜单名称重复:"+t);else{var r=new e(this.editor);r.key=t,this.menuList.push(r)}},t.prototype._bindMenuTooltips=function(){var t=this.editor,e=t.$toolbarElem,n=t.config.menuTooltipPosition,r=g.default('<div class="w-e-menu-tooltip w-e-menu-tooltip-'+n+'">\n            <div class="w-e-menu-tooltip-item-wrapper">\n              <div></div>\n            </div>\n          </div>');r.css("visibility","hidden"),e.append(r),r.css("z-index",t.zIndex.get("tooltip"));var o=0;function i(){o&&clearTimeout(o)}function a(){i(),r.css("visibility","hidden")}e.on("mouseover",(function(s){var l,u,c=s.target,f=g.default(c);if(f.isContain(e))a();else{if(null!=f.parentUntil(".w-e-droplist"))a();else if(f.attr("data-title"))l=f.attr("data-title"),u=f;else{var p=f.parentUntil(".w-e-menu");null!=p&&(l=p.attr("data-title"),u=p)}if(l&&u){i();var h=u.getOffsetData();r.text(t.i18next.t("menus.title."+l));var v=r.getOffsetData(),m=h.left+h.width/2-v.width/2;r.css("left",m+"px"),"up"===n?r.css("top",h.top-v.height-8+"px"):"down"===n&&r.css("top",h.top+h.height+8+"px"),o=(0,d.default)((function(){r.css("visibility","visible")}),200)}else a()}})).on("mouseleave",(function(){a()}))},t.prototype._addToToolbar=function(){var t,e=this.editor.$toolbarElem;(0,u.default)(t=this.menuList).call(t,(function(t){var n=t.$elem;n&&e.append(n)}))},t.prototype.menuFind=function(t){for(var e=this.menuList,n=0,r=e.length;n<r;n++)if(e[n].key===t)return e[n];return e[0]},t.prototype.changeActive=function(){var t;(0,u.default)(t=this.menuList).call(t,(function(t){var e;(0,d.default)((0,p.default)(e=t.tryChangeActive).call(e,t),100)}))},t}();e.default=A},function(t,e,n){t.exports=n(303)},function(t,e,n){var r=n(304);t.exports=r},function(t,e,n){n(305);var r=n(9);t.exports=r.Object.keys},function(t,e,n){var r=n(5),o=n(31),i=n(52);r({target:"Object",stat:!0,forced:n(11)((function(){i(1)}))},{keys:function(t){return i(o(t))}})},function(t,e,n){var r=n(307);t.exports=r},function(t,e,n){n(308);var r=n(9);t.exports=r.Object.entries},function(t,e,n){var r=n(5),o=n(309).entries;r({target:"Object",stat:!0},{entries:function(t){return o(t)}})},function(t,e,n){var r=n(14),o=n(52),i=n(30),a=n(59).f,s=function(t){return function(e){for(var n,s=i(e),l=o(s),u=l.length,c=0,f=[];u>c;)n=l[c++],r&&!a.call(s,n)||f.push(t?[n,s[n]]:s[n]);return f}};t.exports={entries:s(!0),values:s(!1)}},function(t,e,n){var r=n(311);t.exports=r},function(t,e,n){var r=n(312),o=Array.prototype;t.exports=function(t){var e=t.some;return t===o||t instanceof Array&&e===o.some?r:e}},function(t,e,n){n(313);var r=n(15);t.exports=r("Array").some},function(t,e,n){"use strict";var r=n(5),o=n(32).some,i=n(67),a=n(22),s=i("some"),l=a("some");r({target:"Array",proto:!0,forced:!s||!l},{some:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(315)),i=r.__importDefault(n(316)),a=r.__importDefault(n(321)),s=r.__importDefault(n(326)),l=r.__importDefault(n(327)),u=r.__importDefault(n(328)),c=r.__importDefault(n(329)),f=r.__importDefault(n(331)),d=r.__importDefault(n(333)),p=r.__importDefault(n(334)),h=r.__importDefault(n(337)),v=r.__importDefault(n(338)),m=r.__importDefault(n(339)),g=r.__importDefault(n(350)),A=r.__importDefault(n(365)),y=r.__importDefault(n(369)),w=r.__importDefault(n(137)),b=r.__importDefault(n(378)),_=r.__importDefault(n(380)),x=r.__importDefault(n(381)),E=r.__importDefault(n(382)),S=r.__importDefault(n(401)),T=r.__importDefault(n(406)),C=r.__importDefault(n(409));e.default={bold:o.default,head:i.default,italic:s.default,link:a.default,underline:l.default,strikeThrough:u.default,fontName:c.default,fontSize:f.default,justify:d.default,quote:p.default,backColor:h.default,foreColor:v.default,video:m.default,image:g.default,indent:A.default,emoticon:y.default,list:w.default,lineHeight:b.default,undo:_.default,redo:x.default,table:E.default,code:S.default,splitLine:T.default,todo:C.default}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(23)),i=r.__importDefault(n(3)),a=function(t){function e(e){var n=i.default('<div class="w-e-menu" data-title="加粗">\n                <i class="w-e-icon-bold"></i>\n            </div>');return t.call(this,n,e)||this}return r.__extends(e,t),e.prototype.clickHandler=function(){var t=this.editor,e=t.selection.isSelectionEmpty();e&&t.selection.createEmptyRange(),t.cmd.do("bold"),e&&(t.selection.collapseRange(),t.selection.restoreSelection())},e.prototype.tryChangeActive=function(){this.editor.cmd.queryCommandState("bold")?this.active():this.unActive()},e}(o.default);e.default=a},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(27)),a=r(n(29)),s=r(n(4)),l=r(n(317)),u=r(n(28));(0,o.default)(e,"__esModule",{value:!0});var c=n(2),f=c.__importDefault(n(24)),d=c.__importDefault(n(3)),p=n(6),h=n(7),v=function(t){function e(e){var n=this,r=d.default('<div class="w-e-menu" data-title="标题"><i class="w-e-icon-header"></i></div>'),o={width:100,title:"设置标题",type:"list",list:[{$elem:d.default("<h1>H1</h1>"),value:"<h1>"},{$elem:d.default("<h2>H2</h2>"),value:"<h2>"},{$elem:d.default("<h3>H3</h3>"),value:"<h3>"},{$elem:d.default("<h4>H4</h4>"),value:"<h4>"},{$elem:d.default("<h5>H5</h5>"),value:"<h5>"},{$elem:d.default("<p>"+e.i18next.t("menus.dropListMenu.head.正文")+"</p>"),value:"<p>"}],clickHandler:function(t){n.command(t)}};return n=t.call(this,r,e,o)||this,e.config.onCatalogChange&&(n.oldCatalogs=[],n.addListenerCatalog(),n.getCatalogs()),n}return c.__extends(e,t),e.prototype.command=function(t){var e=this.editor,n=e.selection.getSelectionContainerElem();if(n&&e.$textElem.equal(n))this.setMultilineHead(t);else{var r;if((0,i.default)(r=["OL","UL","LI","TABLE","TH","TR","CODE","HR"]).call(r,d.default(n).getNodeName())>-1)return;e.cmd.do("formatBlock",t)}"<p>"!==t&&this.addUidForSelectionElem()},e.prototype.addUidForSelectionElem=function(){var t=this.editor.selection.getSelectionContainerElem(),e=p.getRandomCode();d.default(t).attr("id",e)},e.prototype.addListenerCatalog=function(){var t=this;this.editor.txt.eventHooks.changeEvents.push((function(){t.getCatalogs()}))},e.prototype.getCatalogs=function(){var t=this.editor,e=this.editor.$textElem,n=t.config.onCatalogChange,r=(0,a.default)(e).call(e,"h1,h2,h3,h4,h5"),o=[];(0,s.default)(r).call(r,(function(t,e){var n=d.default(t),r=n.attr("id"),i=n.getNodeName(),a=n.text();r||(r=p.getRandomCode(),n.attr("id",r)),a&&o.push({tag:i,id:r,text:a})})),(0,l.default)(this.oldCatalogs)!==(0,l.default)(o)&&(this.oldCatalogs=o,n&&n(o))},e.prototype.setMultilineHead=function(t){var e,n,r=this,o=this.editor,i=o.selection,a=null===(e=i.getSelectionContainerElem())||void 0===e?void 0:e.elems[0],l=["IMG","VIDEO","TABLE","TH","TR","UL","OL","PRE","HR","BLOCKQUOTE"],u=d.default(i.getSelectionStartElem()),c=d.default(i.getSelectionEndElem());c.elems[0].outerHTML!==d.default(h.EMPTY_P).elems[0].outerHTML||c.elems[0].nextSibling||(c=c.prev());var f=[];f.push(u.getNodeTop(o));var p=[],v=null===(n=i.getRange())||void 0===n?void 0:n.commonAncestorContainer.childNodes;null==v||(0,s.default)(v).call(v,(function(t,e){t===f[0].getNode()&&p.push(e),t===c.getNodeTop(o).getNode()&&p.push(e)}));for(var m=0;f[m].getNode()!==c.getNodeTop(o).getNode();){if(!f[m].elems[0])return;var g=d.default(f[m].next().getNode());f.push(g),m++}null==f||(0,s.default)(f).call(f,(function(e,n){if(!r.hasTag(e,l)){var o=d.default(t),i=e.parent().getNode();o.html(""+e.html()),i.insertBefore(o.getNode(),e.getNode()),e.remove()}})),i.createRangeByElems(a.children[p[0]],a.children[p[1]])},e.prototype.hasTag=function(t,e){var n,r=this;if(!t)return!1;if((0,u.default)(e).call(e,null==t?void 0:t.getNodeName()))return!0;var o=!1;return null===(n=t.children())||void 0===n||(0,s.default)(n).call(n,(function(t){o=r.hasTag(d.default(t),e)})),o},e.prototype.tryChangeActive=function(){var t=this.editor.cmd.queryCommandValue("formatBlock");/^h/i.test(t)?this.active():this.unActive()},e}(f.default);e.default=v},function(t,e,n){t.exports=n(318)},function(t,e,n){var r=n(319);t.exports=r},function(t,e,n){n(320);var r=n(9);r.JSON||(r.JSON={stringify:JSON.stringify}),t.exports=function(t,e,n){return r.JSON.stringify.apply(null,arguments)}},function(t,e,n){var r=n(5),o=n(36),i=n(11),a=o("JSON","stringify"),s=/[\uD800-\uDFFF]/g,l=/^[\uD800-\uDBFF]$/,u=/^[\uDC00-\uDFFF]$/,c=function(t,e,n){var r=n.charAt(e-1),o=n.charAt(e+1);return l.test(t)&&!u.test(o)||u.test(t)&&!l.test(r)?"\\u"+t.charCodeAt(0).toString(16):t},f=i((function(){return'"\\udf06\\ud834"'!==a("\udf06\ud834")||'"\\udead"'!==a("\udead")}));a&&r({target:"JSON",stat:!0,forced:f},{stringify:function(t,e,n){var r=a.apply(null,arguments);return"string"==typeof r?r.replace(s,c):r}})},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(17));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=a.__importDefault(n(38)),l=a.__importDefault(n(3)),u=a.__importDefault(n(322)),c=a.__importStar(n(96)),f=a.__importDefault(n(33)),d=a.__importDefault(n(324)),p=n(7),h=function(t){function e(e){var n,r=l.default('<div class="w-e-menu" data-title="链接"><i class="w-e-icon-link"></i></div>');return n=t.call(this,r,e)||this,d.default(e),n}return a.__extends(e,t),e.prototype.clickHandler=function(){var t,e=this.editor,n=e.selection.getSelectionContainerElem(),r=e.$textElem,o=r.html();if((0,i.default)(o).call(o)===p.EMPTY_P){var a=r.children();e.selection.createRangeByElem(a,!0,!0),n=e.selection.getSelectionContainerElem()}if(!n||!e.$textElem.equal(n))if(this.isActive){var s,u;if(!(t=e.selection.getSelectionContainerElem()))return;if("A"!==t.getNodeName()){var f=c.getParentNodeA(t);t=l.default(f)}s=t.elems[0].innerText,u=t.attr("href"),this.createPanel(s,u)}else e.selection.isSelectionEmpty()?this.createPanel("",""):this.createPanel(e.selection.getSelectionText(),"")},e.prototype.createPanel=function(t,e){var n=u.default(this.editor,t,e);new f.default(this,n).create()},e.prototype.tryChangeActive=function(){var t=this.editor;c.default(t)?this.active():this.unActive()},e}(s.default);e.default=h},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(28)),a=r(n(17)),s=r(n(29));(0,o.default)(e,"__esModule",{value:!0});var l=n(2),u=n(6),c=l.__importDefault(n(3)),f=l.__importStar(n(96)),d=n(323);e.default=function(t,e,n){var r,o=u.getRandom("input-link"),l=u.getRandom("input-text"),p=u.getRandom("btn-ok"),h=u.getRandom("btn-del"),v=f.default(t)?"inline-block":"none";function m(){if(f.default(t)){var e=t.selection.getSelectionContainerElem();e&&(t.selection.createRangeByElem(e),t.selection.restoreSelection(),r=e)}}return{width:300,height:0,tabs:[{title:t.i18next.t("menus.panelMenus.link.链接"),tpl:'<div>\n                        <input\n                            id="'+l+'"\n                            type="text"\n                            class="block"\n                            placeholder="'+t.i18next.t("menus.panelMenus.link.链接文字")+'"/>\n                        </td>\n                        <input\n                            id="'+o+'"\n                            type="text"\n                            class="block"\n                            placeholder="'+t.i18next.t("如")+' https://..."/>\n                        </td>\n                        <div class="w-e-button-container">\n                            <button type="button" id="'+p+'" class="right">\n                                '+t.i18next.t("插入")+'\n                            </button>\n                            <button type="button" id="'+h+'" class="gray right" style="display:'+v+'">\n                                '+t.i18next.t("menus.panelMenus.link.取消链接")+"\n                            </button>\n                        </div>\n                    </div>",events:[{selector:"#"+p,type:"click",fn:function(){var e,n,r,s,u,p=t.selection.getSelectionContainerElem(),h=null==p?void 0:p.elems[0];t.selection.restoreSelection();var v=t.selection.getSelectionRangeTopNodes()[0].getNode(),g=window.getSelection(),A=c.default("#"+o),y=c.default("#"+l),w=(0,a.default)(e=A.val()).call(e),b=(0,a.default)(n=y.val()).call(n),_="";g&&!(null==g?void 0:g.isCollapsed)&&(_=null===(s=d.insertHtml(g,v))||void 0===s?void 0:(0,a.default)(s).call(s));var x=null==_?void 0:_.replace(/<.*?>/g,""),E=null!==(u=null==x?void 0:x.length)&&void 0!==u?u:0;if(E<=b.length){var S=b.substring(0,E),T=b.substring(E);x===S&&(b=x+T)}if(w&&(b||(b=w),function(e,n){var r=t.config.linkCheck(e,n);if(void 0===r);else{if(!0===r)return!0;t.config.customAlert(r,"warning")}return!1}(b,w))){if("A"===(null==h?void 0:h.nodeName))return h.setAttribute("href",w),h.innerText=b,!0;if("A"!==(null==h?void 0:h.nodeName)&&(0,i.default)(r=f.EXTRA_TAG).call(r,h.nodeName)){var C=f.getParentNodeA(p);if(C)return C.setAttribute("href",w),h.innerText=b,!0}return function(e,n){var r=e.replace(/</g,"&lt;").replace(/>/g,"&gt;"),o=c.default('<a target="_blank">'+r+"</a>"),i=o.elems[0];i.innerText=e,i.href=n,f.default(t)?(m(),t.cmd.do("insertElem",o)):t.cmd.do("insertElem",o)}(b,w),!0}},bindEnter:!0},{selector:"#"+h,type:"click",fn:function(){return function(){if(f.default(t))if(m(),"A"===r.getNodeName()){var e,n=r.elems[0],o=n.parentElement;o&&(0,i.default)(e=f.EXTRA_TAG).call(e,o.nodeName)?o.innerHTML=n.innerHTML:t.cmd.do("insertHTML","<span>"+n.innerHTML+"</span>")}else{var a=f.getParentNodeA(r).innerHTML;t.cmd.do("insertHTML","<span>"+a+"</span>")}}(),!0}}]}],setLinkValue:function(t,r){var i="",a="";"text"===r&&(i="#"+l,a=e),"link"===r&&(i="#"+o,a=n),(0,s.default)(t).call(t,i).elems[0].value=a}}}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));function a(t,e){var n=t,r=t;do{if(n.textContent===e)break;r=n,n.parentNode&&(n=null==n?void 0:n.parentNode)}while("P"!==(null==n?void 0:n.nodeName));return r}function s(t,e){var n=t.nodeName,r="";if(3===t.nodeType||/^(h|H)[1-6]$/.test(n))return e;if(1===t.nodeType){var o=t.getAttribute("style"),i=t.getAttribute("face"),a=t.getAttribute("color");o&&(r=r+' style="'+o+'"'),i&&(r=r+' face="'+i+'"'),a&&(r=r+' color="'+a+'"')}return"<"+(n=n.toLowerCase())+r+">"+e+"</"+n+">"}function l(t,e,n,r){var o,i=null===(o=e.textContent)||void 0===o?void 0:o.substring(n,r),a=e,l="";do{i=l=s(a,null!=i?i:""),a=null==a?void 0:a.parentElement}while(a&&a.textContent!==t);return l}function u(t,e){return(0,i.default)(t).call(t,(function(t){e=s(t,e)})),e}(0,o.default)(e,"__esModule",{value:!0}),e.insertHtml=e.createPartHtml=e.makeHtmlString=e.getTopNode=void 0,e.getTopNode=a,e.makeHtmlString=s,e.createPartHtml=l,e.insertHtml=function(t,e){var n,r,o,i,c,f=t.anchorNode,d=t.focusNode,p=t.anchorOffset,h=t.focusOffset,v=null!==(n=e.textContent)&&void 0!==n?n:"",m=function(t){for(var e,n=null!==(e=t.textContent)&&void 0!==e?e:"",r=[];(null==t?void 0:t.textContent)===n;)"P"!==t.nodeName&&"TABLE"!==t.nodeName&&r.push(t),t=t.childNodes[0];return r}(e),g="",A="",y="",w=f,b=d,_=f;if(null==f?void 0:f.isEqualNode(null!=d?d:null)){var x=l(v,f,p,h);return u(m,x)}for(f&&(g=l(v,f,null!=p?p:0)),d&&(y=l(v,d,0,h)),f&&(w=a(f,v)),d&&(b=a(d,v)),_=null!==(r=null==w?void 0:w.nextSibling)&&void 0!==r?r:f;!(null==_?void 0:_.isEqualNode(null!=b?b:null));){if("#text"===(null==_?void 0:_.nodeName))A+=null==_?void 0:_.textContent;else{var E=null===(i=null===(o=null==_?void 0:_.firstChild)||void 0===o?void 0:o.parentElement)||void 0===i?void 0:i.innerHTML;_&&(A+=s(_,null!=E?E:""))}var S=null!==(c=null==_?void 0:_.nextSibling)&&void 0!==c?c:_;if(S===_)break;_=S}return u(m,""+g+A+y)}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2).__importDefault(n(325));e.default=function(t){r.default(t)}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(28));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=a.__importDefault(n(3)),l=a.__importDefault(n(39)),u=n(96);e.default=function(t){var e=function(t){var e;return{showLinkTooltip:function(n){var r=[{$elem:s.default("<span>"+t.i18next.t("menus.panelMenus.link.查看链接")+"</span>"),onClick:function(t,e){var n=e.attr("href");return window.open(n,"_target"),!0}},{$elem:s.default("<span>"+t.i18next.t("menus.panelMenus.link.取消链接")+"</span>"),onClick:function(t,e){var n,r;t.selection.createRangeByElem(e),t.selection.restoreSelection();var o=e.childNodes();if("IMG"===(null==o?void 0:o.getNodeName())){var a=null===(r=null===(n=t.selection.getSelectionContainerElem())||void 0===n?void 0:n.children())||void 0===r?void 0:r.elems[0].children[0];t.cmd.do("insertHTML","<img \n                                src="+(null==a?void 0:a.getAttribute("src"))+" \n                                style="+(null==a?void 0:a.getAttribute("style"))+">")}else{var s,l=e.elems[0],c=l.innerHTML,f=l.parentElement;f&&(0,i.default)(s=u.EXTRA_TAG).call(s,f.nodeName)?f.innerHTML=c:t.cmd.do("insertHTML","<span>"+c+"</span>")}return!0}}];(e=new l.default(t,n,r)).create()},hideLinkTooltip:function(){e&&(e.remove(),e=null)}}}(t),n=e.showLinkTooltip,r=e.hideLinkTooltip;t.txt.eventHooks.linkClickEvents.push(n),t.txt.eventHooks.clickEvents.push(r),t.txt.eventHooks.keyupEvents.push(r),t.txt.eventHooks.toolbarClickEvents.push(r),t.txt.eventHooks.menuClickEvents.push(r),t.txt.eventHooks.textScrollEvents.push(r)}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(23)),i=r.__importDefault(n(3)),a=function(t){function e(e){var n=i.default('<div class="w-e-menu" data-title="斜体">\n                <i class="w-e-icon-italic"></i>\n            </div>');return t.call(this,n,e)||this}return r.__extends(e,t),e.prototype.clickHandler=function(){var t=this.editor,e=t.selection.isSelectionEmpty();e&&t.selection.createEmptyRange(),t.cmd.do("italic"),e&&(t.selection.collapseRange(),t.selection.restoreSelection())},e.prototype.tryChangeActive=function(){this.editor.cmd.queryCommandState("italic")?this.active():this.unActive()},e}(o.default);e.default=a},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(23)),i=r.__importDefault(n(3)),a=function(t){function e(e){var n=i.default('<div class="w-e-menu" data-title="下划线">\n                <i class="w-e-icon-underline"></i>\n            </div>');return t.call(this,n,e)||this}return r.__extends(e,t),e.prototype.clickHandler=function(){var t=this.editor,e=t.selection.isSelectionEmpty();e&&t.selection.createEmptyRange(),t.cmd.do("underline"),e&&(t.selection.collapseRange(),t.selection.restoreSelection())},e.prototype.tryChangeActive=function(){this.editor.cmd.queryCommandState("underline")?this.active():this.unActive()},e}(o.default);e.default=a},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(23)),i=r.__importDefault(n(3)),a=function(t){function e(e){var n=i.default('<div class="w-e-menu" data-title="删除线">\n                <i class="w-e-icon-strikethrough"></i>\n            </div>');return t.call(this,n,e)||this}return r.__extends(e,t),e.prototype.clickHandler=function(){var t=this.editor,e=t.selection.isSelectionEmpty();e&&t.selection.createEmptyRange(),t.cmd.do("strikeThrough"),e&&(t.selection.collapseRange(),t.selection.restoreSelection())},e.prototype.tryChangeActive=function(){this.editor.cmd.queryCommandState("strikeThrough")?this.active():this.unActive()},e}(o.default);e.default=a},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(24)),i=r.__importDefault(n(3)),a=r.__importDefault(n(330)),s=function(t){function e(e){var n=this,r=i.default('<div class="w-e-menu" data-title="字体">\n                <i class="w-e-icon-font"></i>\n            </div>'),o={width:100,title:"设置字体",type:"list",list:new a.default(e.config.fontNames).getItemList(),clickHandler:function(t){n.command(t)}};return n=t.call(this,r,e,o)||this}return r.__extends(e,t),e.prototype.command=function(t){var e,n=this.editor,r=n.selection.isSelectionEmpty(),o=null===(e=n.selection.getSelectionContainerElem())||void 0===e?void 0:e.elems[0];if(null!=o){var i="p"!==(null==o?void 0:o.nodeName.toLowerCase()),a=(null==o?void 0:o.getAttribute("face"))===t;if(r){if(i&&!a){var s=n.selection.getSelectionRangeTopNodes();n.selection.createRangeByElem(s[0]),n.selection.moveCursor(s[0].elems[0])}n.selection.setRangeToElem(o),n.selection.createEmptyRange()}n.cmd.do("fontName",t),r&&(n.selection.collapseRange(),n.selection.restoreSelection())}},e.prototype.tryChangeActive=function(){},e}(o.default);e.default=s},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var a=n(2).__importDefault(n(3)),s=function(){function t(t){var e=this;this.itemList=[],(0,i.default)(t).call(t,(function(t){var n="string"==typeof t?t:t.value,r="string"==typeof t?t:t.name;e.itemList.push({$elem:a.default("<p style=\"font-family:'"+n+"'\">"+r+"</p>"),value:r})}))}return t.prototype.getItemList=function(){return this.itemList},t}();e.default=s},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(24)),i=r.__importDefault(n(3)),a=r.__importDefault(n(332)),s=function(t){function e(e){var n=this,r=i.default('<div class="w-e-menu" data-title="字号">\n                <i class="w-e-icon-text-heigh"></i>\n            </div>'),o={width:160,title:"设置字号",type:"list",list:new a.default(e.config.fontSizes).getItemList(),clickHandler:function(t){n.command(t)}};return n=t.call(this,r,e,o)||this}return r.__extends(e,t),e.prototype.command=function(t){var e,n=this.editor,r=n.selection.isSelectionEmpty();null!=(null===(e=n.selection.getSelectionContainerElem())||void 0===e?void 0:e.elems[0])&&(n.cmd.do("fontSize",t),r&&(n.selection.collapseRange(),n.selection.restoreSelection()))},e.prototype.tryChangeActive=function(){},e}(o.default);e.default=s},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2).__importDefault(n(3)),o=function(){function t(t){for(var e in this.itemList=[],t){var n=t[e];this.itemList.push({$elem:r.default('<p style="font-size:'+e+'">'+n.name+"</p>"),value:n.value})}}return t.prototype.getItemList=function(){return this.itemList},t}();e.default=o},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4)),a=r(n(27));(0,o.default)(e,"__esModule",{value:!0});var s=n(2),l=s.__importDefault(n(24)),u=s.__importDefault(n(3)),c=["LI"],f=["BLOCKQUOTE"],d=function(t){function e(e){var n=this,r=u.default('<div class="w-e-menu" data-title="对齐"><i class="w-e-icon-paragraph-left"></i></div>'),o={width:100,title:"对齐方式",type:"list",list:[{$elem:u.default('<p>\n                            <i class="w-e-icon-paragraph-left w-e-drop-list-item"></i>\n                            '+e.i18next.t("menus.dropListMenu.justify.靠左")+"\n                        </p>"),value:"left"},{$elem:u.default('<p>\n                            <i class="w-e-icon-paragraph-center w-e-drop-list-item"></i>\n                            '+e.i18next.t("menus.dropListMenu.justify.居中")+"\n                        </p>"),value:"center"},{$elem:u.default('<p>\n                            <i class="w-e-icon-paragraph-right w-e-drop-list-item"></i>\n                            '+e.i18next.t("menus.dropListMenu.justify.靠右")+"\n                        </p>"),value:"right"},{$elem:u.default('<p>\n                            <i class="w-e-icon-paragraph-justify w-e-drop-list-item"></i>\n                            '+e.i18next.t("menus.dropListMenu.justify.两端")+"\n                        </p>"),value:"justify"}],clickHandler:function(t){n.command(t)}};return n=t.call(this,r,e,o)||this}return s.__extends(e,t),e.prototype.command=function(t){var e=this.editor,n=e.selection,r=n.getSelectionContainerElem();n.saveRange();var o=e.selection.getSelectionRangeTopNodes();if(null==r?void 0:r.length)if(this.isSpecialNode(r,o[0])||this.isSpecialTopNode(o[0])){var a=this.getSpecialNodeUntilTop(r,o[0]);if(null==a)return;u.default(a).css("text-align",t)}else(0,i.default)(o).call(o,(function(e){e.css("text-align",t)}));n.restoreSelection()},e.prototype.getSpecialNodeUntilTop=function(t,e){for(var n=t.elems[0],r=e.elems[0];null!=n;){if(-1!==(0,a.default)(c).call(c,null==n?void 0:n.nodeName))return n;if(n.parentNode===r)return n;n=n.parentNode}return n},e.prototype.isSpecialNode=function(t,e){var n=this.getSpecialNodeUntilTop(t,e);return null!=n&&-1!==(0,a.default)(c).call(c,n.nodeName)},e.prototype.isSpecialTopNode=function(t){var e;return null!=t&&-1!==(0,a.default)(f).call(f,null===(e=t.elems[0])||void 0===e?void 0:e.nodeName)},e.prototype.tryChangeActive=function(){},e}(l.default);e.default=d},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=a.__importDefault(n(3)),l=a.__importDefault(n(23)),u=a.__importDefault(n(335)),c=a.__importDefault(n(336)),f=n(7),d=function(t){function e(e){var n,r=s.default('<div class="w-e-menu" data-title="引用">\n                <i class="w-e-icon-quotes-left"></i>\n            </div>');return n=t.call(this,r,e)||this,u.default(e),n}return a.__extends(e,t),e.prototype.clickHandler=function(){var t,e,n=this.editor,r=n.selection.isSelectionEmpty(),o=n.selection.getSelectionRangeTopNodes(),a=o[o.length-1];if("BLOCKQUOTE"!==this.getTopNodeName()){var l=c.default(o);if(n.$textElem.equal(a)){var u=null===(t=n.selection.getSelectionContainerElem())||void 0===t?void 0:t.elems[0];n.selection.createRangeByElems(u.children[0],u.children[0]),o=n.selection.getSelectionRangeTopNodes(),l=c.default(o),a.append(l)}else l.insertAfter(a);this.delSelectNode(o);var d=null===(e=l.childNodes())||void 0===e?void 0:e.last().getNode();if(null==d)return;return d.textContent?n.selection.moveCursor(d):n.selection.moveCursor(d,0),this.tryChangeActive(),void s.default(f.EMPTY_P).insertAfter(l)}var p=s.default(a.childNodes()),h=p.length,v=a;(0,i.default)(p).call(p,(function(t){var e=s.default(t);e.insertAfter(v),v=e})),a.remove(),n.selection.moveCursor(p.elems[h-1]),this.tryChangeActive(),r&&(n.selection.collapseRange(),n.selection.restoreSelection())},e.prototype.tryChangeActive=function(){var t;"BLOCKQUOTE"===(null===(t=this.editor.selection.getSelectionRangeTopNodes()[0])||void 0===t?void 0:t.getNodeName())?this.active():this.unActive()},e.prototype.getTopNodeName=function(){var t=this.editor.selection.getSelectionRangeTopNodes()[0];return null==t?void 0:t.getNodeName()},e.prototype.delSelectNode=function(t){(0,i.default)(t).call(t,(function(t){t.remove()}))},e}(l.default);e.default=d},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=n(7),i=r.__importDefault(n(3));e.default=function(t){t.txt.eventHooks.enterDownEvents.push((function(e){var n,r=t.selection.getSelectionContainerElem(),a=t.selection.getSelectionRangeTopNodes()[0];if("BLOCKQUOTE"===(null==a?void 0:a.getNodeName())){if("BLOCKQUOTE"===r.getNodeName()){var s=null===(n=r.childNodes())||void 0===n?void 0:n.getNode();t.selection.moveCursor(s)}if(""===r.text()){e.preventDefault(),r.remove();var l=i.default(o.EMPTY_P);l.insertAfter(a),t.selection.moveCursor(l.getNode(),0)}""===a.text()&&a.remove()}}))}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var a=n(2).__importDefault(n(3));e.default=function(t){var e=a.default("<blockquote></blockquote>");return(0,i.default)(t).call(t,(function(t){e.append(t.clone(!0))})),e}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(26));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=a.__importDefault(n(24)),l=a.__importDefault(n(3)),u=n(6),c=function(t){function e(e){var n,r=this,o=l.default('<div class="w-e-menu" data-title="背景色">\n                <i class="w-e-icon-paint-brush"></i>\n            </div>'),a={width:120,title:"背景颜色",type:"inline-block",list:(0,i.default)(n=e.config.colors).call(n,(function(t){return{$elem:l.default('<i style="color:'+t+';" class="w-e-icon-paint-brush"></i>'),value:t}})),clickHandler:function(t){r.command(t)}};return r=t.call(this,o,e,a)||this}return a.__extends(e,t),e.prototype.command=function(t){var e,n=this.editor,r=n.selection.isSelectionEmpty(),o=null===(e=n.selection.getSelectionContainerElem())||void 0===e?void 0:e.elems[0];if(null!=o){var i="p"!==(null==o?void 0:o.nodeName.toLowerCase()),a=null==o?void 0:o.style.backgroundColor,s=u.hexToRgb(t)===a;if(r){if(i&&!s){var l=n.selection.getSelectionRangeTopNodes();n.selection.createRangeByElem(l[0]),n.selection.moveCursor(l[0].elems[0])}n.selection.createEmptyRange()}n.cmd.do("backColor",t),r&&(n.selection.collapseRange(),n.selection.restoreSelection())}},e.prototype.tryChangeActive=function(){},e}(s.default);e.default=c},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(26));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=a.__importDefault(n(24)),l=a.__importDefault(n(3)),u=function(t){function e(e){var n,r=this,o=l.default('<div class="w-e-menu" data-title="文字颜色">\n                <i class="w-e-icon-pencil2"></i>\n            </div>'),a={width:120,title:"文字颜色",type:"inline-block",list:(0,i.default)(n=e.config.colors).call(n,(function(t){return{$elem:l.default('<i style="color:'+t+';" class="w-e-icon-pencil2"></i>'),value:t}})),clickHandler:function(t){r.command(t)}};return r=t.call(this,o,e,a)||this}return a.__extends(e,t),e.prototype.command=function(t){var e,n=this.editor,r=n.selection.isSelectionEmpty(),o=null===(e=n.selection.getSelectionContainerElem())||void 0===e?void 0:e.elems[0];if(null!=o){var i=n.selection.getSelectionText();if("A"===o.nodeName&&o.textContent===i){var a=l.default("<span>&#8203;</span>").getNode();o.appendChild(a)}n.cmd.do("foreColor",t),r&&(n.selection.collapseRange(),n.selection.restoreSelection())}},e.prototype.tryChangeActive=function(){},e}(s.default);e.default=u},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(3)),i=r.__importDefault(n(33)),a=r.__importDefault(n(38)),s=r.__importDefault(n(340)),l=r.__importDefault(n(346)),u=function(t){function e(e){var n,r=o.default('<div class="w-e-menu" data-title="视频">\n                <i class="w-e-icon-play"></i>\n            </div>');return n=t.call(this,r,e)||this,l.default(e),n}return r.__extends(e,t),e.prototype.clickHandler=function(){this.createPanel("")},e.prototype.createPanel=function(t){var e=s.default(this.editor,t);new i.default(this,e).create()},e.prototype.tryChangeActive=function(){},e}(a.default);e.default=u},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(17));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=n(6),l=a.__importDefault(n(3)),u=a.__importDefault(n(341)),c=n(7);e.default=function(t,e){var n=t.config,r=new u.default(t),o=s.getRandom("input-iframe"),a=s.getRandom("btn-ok"),f=s.getRandom("input-upload"),d=s.getRandom("btn-local-ok"),p=[{title:t.i18next.t("menus.panelMenus.video.上传视频"),tpl:'<div class="w-e-up-video-container">\n                    <div id="'+d+'" class="w-e-up-btn">\n                        <i class="w-e-icon-upload2"></i>\n                    </div>\n                    <div style="display:none;">\n                        <input id="'+f+'" type="file" accept="video/*"/>\n                    </div>\n                 </div>',events:[{selector:"#"+d,type:"click",fn:function(){var t=l.default("#"+f).elems[0];if(!t)return!0;t.click()}},{selector:"#"+f,type:"change",fn:function(){var t=l.default("#"+f).elems[0];if(!t)return!0;var e=t.files;return e.length&&r.uploadVideo(e),!0}}]},{title:t.i18next.t("menus.panelMenus.video.插入视频"),tpl:'<div>\n                    <input \n                        id="'+o+'" \n                        type="text" \n                        class="block" \n                        placeholder="'+t.i18next.t("如")+'：<iframe src=... ></iframe>"/>\n                    </td>\n                    <div class="w-e-button-container">\n                        <button type="button" id="'+a+'" class="right">\n                            '+t.i18next.t("插入")+"\n                        </button>\n                    </div>\n                </div>",events:[{selector:"#"+a,type:"click",fn:function(){var e,n=l.default("#"+o),r=(0,i.default)(e=n.val()).call(e);if(r&&function(e){var n=t.config.onlineVideoCheck(e);return!0===n||("string"==typeof n&&t.config.customAlert(n,"error"),!1)}(r))return function(e){t.cmd.do("insertHTML",e+c.EMPTY_P),t.config.onlineVideoCallback(e)}(r),!0},bindEnter:!0}]}],h={width:300,height:0,tabs:[]};return window.FileReader&&(n.uploadVideoServer||n.customUploadVideo)&&h.tabs.push(p[0]),n.showLinkVideo&&h.tabs.push(p[1]),h}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(133)),a=r(n(57)),s=r(n(4)),l=r(n(27));(0,o.default)(e,"__esModule",{value:!0});var u=n(2),c=n(6),f=u.__importDefault(n(135)),d=u.__importDefault(n(136)),p=n(7),h=n(6),v=function(){function t(t){this.editor=t}return t.prototype.uploadVideo=function(t){var e=this;if(t.length){var n=this.editor,r=n.config,o=function(t){return n.i18next.t("validate."+t)},u=r.uploadVideoServer,p=r.uploadVideoMaxSize/1024,h=r.uploadVideoName,v=r.uploadVideoParams,m=r.uploadVideoParamsWithUrl,g=r.uploadVideoHeaders,A=r.uploadVideoHooks,y=r.uploadVideoTimeout,w=r.withVideoCredentials,b=r.customUploadVideo,_=r.uploadVideoAccept,x=[],E=[];if(c.arrForEach(t,(function(t){var e=t.name,n=t.size/1024/1024;e&&n&&(_ instanceof Array?(0,i.default)(_).call(_,(function(t){return t===e.split(".")[e.split(".").length-1]}))?p<n?E.push("【"+e+"】"+o("大于")+" "+p+"M"):x.push(t):E.push("【"+e+"】"+o("不是视频")):E.push("【"+_+"】"+o("uploadVideoAccept 不是Array")))})),E.length)r.customAlert(o("视频验证未通过")+": \n"+E.join("\n"),"warning");else if(0!==x.length)if(b&&"function"==typeof b){var S;b(x,(0,a.default)(S=this.insertVideo).call(S,this))}else{var T=new FormData;if((0,s.default)(x).call(x,(function(t,e){var n=h||t.name;x.length>1&&(n+=e+1),T.append(n,t)})),u){var C=u.split("#");u=C[0];var D=C[1]||"";(0,s.default)(c).call(c,v,(function(t,e){m&&((0,l.default)(u).call(u,"?")>0?u+="&":u+="?",u=u+t+"="+e),T.append(t,e)})),D&&(u+="#"+D);var k=f.default(u,{timeout:y,formData:T,headers:g,withCredentials:!!w,beforeSend:function(t){if(A.before)return A.before(t,n,x)},onTimeout:function(t){r.customAlert(o("上传视频超时"),"error"),A.timeout&&A.timeout(t,n)},onProgress:function(t,e){var r=new d.default(n);e.lengthComputable&&(t=e.loaded/e.total,r.show(t))},onError:function(t){r.customAlert(o("上传视频错误"),"error",o("上传视频错误")+"，"+o("服务器返回状态")+": "+t.status),A.error&&A.error(t,n)},onFail:function(t,e){r.customAlert(o("上传视频失败"),"error",o("上传视频返回结果错误")+"，"+o("返回结果")+": "+e),A.fail&&A.fail(t,n,e)},onSuccess:function(t,i){if(A.customInsert){var s;A.customInsert((0,a.default)(s=e.insertVideo).call(s,e),i,n)}else{if("0"!=i.errno)return r.customAlert(o("上传视频失败"),"error",o("上传视频返回结果错误")+"，"+o("返回结果")+" errno="+i.errno),void(A.fail&&A.fail(t,n,i));var l=i.data;e.insertVideo(l.url),A.success&&A.success(t,n,i)}}});"string"==typeof k&&r.customAlert(k,"error")}}else r.customAlert(o("传入的文件不合法"),"warning")}},t.prototype.insertVideo=function(t){var e=this.editor,n=e.config,r=function(t,n){return void 0===n&&(n="validate."),e.i18next.t(n+t)};if(n.customInsertVideo)n.customInsertVideo(t);else{h.UA.isFirefox?e.cmd.do("insertHTML",'<p data-we-video-p="true"><video src="'+t+'" controls="controls" style="max-width:100%"></video></p><p>&#8203</p>'):e.cmd.do("insertHTML",'<video src="'+t+'" controls="controls" style="max-width:100%"></video>'+p.EMPTY_P);var o=document.createElement("video");o.onload=function(){o=null},o.onerror=function(){n.customAlert(r("插入视频错误"),"error","wangEditor: "+r("插入视频错误")+"，"+r("视频链接")+' "'+t+'"，'+r("下载链接失败")),o=null},o.onabort=function(){return o=null},o.src=t}},t}();e.default=v},function(t,e,n){t.exports=n(343)},function(t,e,n){var r=n(344);t.exports=r},function(t,e,n){n(345);var r=n(9);t.exports=r.Date.now},function(t,e,n){n(5)({target:"Date",stat:!0},{now:function(){return(new Date).getTime()}})},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(347)),i=r.__importDefault(n(349));e.default=function(t){o.default(t),i.default(t)}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.createShowHideFn=void 0;var r=n(2),o=r.__importDefault(n(3)),i=r.__importDefault(n(39)),a=r.__importDefault(n(348));function s(t){var e,n=function(e,n){return void 0===n&&(n=""),t.i18next.t(n+e)};return{showVideoTooltip:function(r){var s=[{$elem:o.default("<span class='w-e-icon-trash-o'></span>"),onClick:function(t,e){return e.remove(),!0}},{$elem:o.default("<span>100%</span>"),onClick:function(t,e){return e.attr("width","100%"),e.removeAttr("height"),!0}},{$elem:o.default("<span>50%</span>"),onClick:function(t,e){return e.attr("width","50%"),e.removeAttr("height"),!0}},{$elem:o.default("<span>30%</span>"),onClick:function(t,e){return e.attr("width","30%"),e.removeAttr("height"),!0}},{$elem:o.default("<span>"+n("重置")+"</span>"),onClick:function(t,e){return e.removeAttr("width"),e.removeAttr("height"),!0}},{$elem:o.default("<span>"+n("menus.justify.靠左")+"</span>"),onClick:function(t,e){return a.default(e,"left"),!0}},{$elem:o.default("<span>"+n("menus.justify.居中")+"</span>"),onClick:function(t,e){return a.default(e,"center"),!0}},{$elem:o.default("<span>"+n("menus.justify.靠右")+"</span>"),onClick:function(t,e){return a.default(e,"right"),!0}}];(e=new i.default(t,r,s)).create()},hideVideoTooltip:function(){e&&(e.remove(),e=null)}}}e.createShowHideFn=s,e.default=function(t){var e=s(t),n=e.showVideoTooltip,r=e.hideVideoTooltip;t.txt.eventHooks.videoClickEvents.push(n),t.txt.eventHooks.clickEvents.push(r),t.txt.eventHooks.keyupEvents.push(r),t.txt.eventHooks.toolbarClickEvents.push(r),t.txt.eventHooks.menuClickEvents.push(r),t.txt.eventHooks.textScrollEvents.push(r),t.txt.eventHooks.changeEvents.push(r)}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(28));(0,o.default)(e,"__esModule",{value:!0});var a=n(2).__importDefault(n(3));e.default=function(t,e){var n=function(t,e){for(var n,r=t.elems[0];null!=r;){if((0,i.default)(e).call(e,null==r?void 0:r.nodeName))return r;if("BODY"===(null===(n=null==r?void 0:r.parentNode)||void 0===n?void 0:n.nodeName))return null;r=r.parentNode}return r}(t,["P"]);n&&a.default(n).css("text-align",e)}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(6);e.default=function(t){if(r.UA.isFirefox){var e=t.txt,n=t.selection;e.eventHooks.keydownEvents.push((function(e){var r=n.getSelectionContainerElem();if(r){var o=r.getNodeTop(t),i=o.length&&o.prev().length?o.prev():null;i&&i.attr("data-we-video-p")&&0===n.getCursorPos()&&8===e.keyCode&&i.remove()}}))}}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(26));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=n(7),l=a.__importDefault(n(3)),u=a.__importDefault(n(33)),c=a.__importDefault(n(38)),f=a.__importDefault(n(351)),d=a.__importDefault(n(364)),p=function(t){function e(e){var n,r=this,o=l.default('<div class="w-e-menu" data-title="图片"><i class="w-e-icon-image"></i></div>'),a=d.default(e);return a.onlyUploadConf&&(o=a.onlyUploadConf.$elem,(0,i.default)(n=a.onlyUploadConf.events).call(n,(function(t){var e=t.type,n=t.fn||s.EMPTY_FN;o.on(e,(function(t){t.stopPropagation(),n(t)}))}))),(r=t.call(this,o,e)||this).imgPanelConfig=a,f.default(e),r}return a.__extends(e,t),e.prototype.clickHandler=function(){this.imgPanelConfig.onlyUploadConf||this.createPanel()},e.prototype.createPanel=function(){var t=this.imgPanelConfig,e=new u.default(this,t);this.setPanel(e),e.create()},e.prototype.tryChangeActive=function(){},e}(c.default);e.default=p},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(352)),i=r.__importDefault(n(353)),a=r.__importDefault(n(354)),s=r.__importDefault(n(362)),l=r.__importDefault(n(363));e.default=function(t){o.default(t),i.default(t),a.default(t),s.default(t),l.default(t)}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=n(131),i=r.__importDefault(n(97));e.default=function(t){t.txt.eventHooks.pasteEvents.unshift((function(e){!function(t,e){if(function(t,e){for(var n,r=(null===(n=e.clipboardData)||void 0===n?void 0:n.types)||[],o=0;o<r.length;o++)if("Files"===r[o])return!0;return!1}(0,t)||!function(t,e){var n=t.config,r=n.pasteFilterStyle,i=n.pasteIgnoreImg;return!!o.getPasteHtml(e,r,i)||!!o.getPasteText(e)}(e,t)){var n=o.getPasteImgs(t);n.length&&new i.default(e).uploadImg(n)}}(e,t)}))}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2).__importDefault(n(97));e.default=function(t){t.txt.eventHooks.dropEvents.push((function(e){var n=e.dataTransfer&&e.dataTransfer.files;n&&n.length&&new r.default(t).uploadImg(n)}))}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(29)),a=r(n(355));(0,o.default)(e,"__esModule",{value:!0}),e.createShowHideFn=void 0;var s=n(2).__importDefault(n(3));n(360);var l=n(6);function u(t,e,n,r,o){t.attr("style","width:"+e+"px; height:"+n+"px; left:"+r+"px; top:"+o+"px;")}function c(t){var e,n=t.$textContainerElem,r=function(t,e){var n=s.default('<div class="w-e-img-drag-mask">\n            <div class="w-e-img-drag-show-size"></div>\n            <div class="w-e-img-drag-rb"></div>\n         </div>');return n.hide(),e.append(n),n}(0,n);function o(){(0,i.default)(n).call(n,".w-e-img-drag-mask").hide()}return function(t,n){t.on("click",(function(t){t.stopPropagation()})),t.on("mousedown",".w-e-img-drag-rb",(function(r){if(r.preventDefault(),e){var o=r.clientX,l=r.clientY,c=n.getBoundingClientRect(),f=e.getBoundingClientRect(),d=f.width,p=f.height,h=f.left-c.left,v=f.top-c.top,m=d/p,g=d,A=p,y=s.default(document);y.on("mousemove",b),y.on("mouseup",_),y.on("mouseleave",w)}function w(){y.off("mousemove",b),y.off("mouseup",_)}function b(e){e.stopPropagation(),e.preventDefault(),g=d+(e.clientX-o),A=p+(e.clientY-l),g/A!=m&&(A=g/m),g=(0,a.default)(g.toFixed(2)),A=(0,a.default)(A.toFixed(2)),(0,i.default)(t).call(t,".w-e-img-drag-show-size").text(g.toFixed(2).replace(".00","")+"px * "+A.toFixed(2).replace(".00","")+"px"),u(t,g,A,h,v)}function _(){e.attr("width",g+""),e.attr("height",A+"");var n=e.getBoundingClientRect();u(t,g,A,n.left-c.left,n.top-c.top),w()}}))}(r,n),s.default(document).on("click",o),t.beforeDestroy((function(){s.default(document).off("click",o)})),{showDrag:function(t){if(l.UA.isIE())return!1;t&&function(t,e,n){var r=t.getBoundingClientRect(),o=n.getBoundingClientRect(),s=o.width.toFixed(2),l=o.height.toFixed(2);(0,i.default)(e).call(e,".w-e-img-drag-show-size").text(s+"px * "+l+"px"),u(e,(0,a.default)(s),(0,a.default)(l),o.left-r.left,o.top-r.top),e.show()}(n,r,e=t)},hideDrag:o}}e.createShowHideFn=c,e.default=function(t){var e=c(t),n=e.showDrag,r=e.hideDrag;t.txt.eventHooks.imgClickEvents.push(n),t.txt.eventHooks.textScrollEvents.push(r),t.txt.eventHooks.keyupEvents.push(r),t.txt.eventHooks.toolbarClickEvents.push(r),t.txt.eventHooks.menuClickEvents.push(r),t.txt.eventHooks.changeEvents.push(r)}},function(t,e,n){t.exports=n(356)},function(t,e,n){var r=n(357);t.exports=r},function(t,e,n){n(358);var r=n(9);t.exports=r.parseFloat},function(t,e,n){var r=n(5),o=n(359);r({global:!0,forced:parseFloat!=o},{parseFloat:o})},function(t,e,n){var r=n(8),o=n(90).trim,i=n(68),a=r.parseFloat,s=1/a(i+"-0")!=-1/0;t.exports=s?function(t){var e=o(String(t)),n=a(e);return 0===n&&"-"==e.charAt(0)?-0:n}:a},function(t,e,n){var r=n(20),o=n(361);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);r(o,{insert:"head",singleton:!1}),t.exports=o.locals||{}},function(t,e,n){(e=n(21)(!1)).push([t.i,".w-e-text-container {\n  overflow: hidden;\n}\n.w-e-img-drag-mask {\n  position: absolute;\n  z-index: 1;\n  border: 1px dashed #ccc;\n  box-sizing: border-box;\n}\n.w-e-img-drag-mask .w-e-img-drag-rb {\n  position: absolute;\n  right: -5px;\n  bottom: -5px;\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n  background: #ccc;\n  cursor: se-resize;\n}\n.w-e-img-drag-mask .w-e-img-drag-show-size {\n  min-width: 110px;\n  height: 22px;\n  line-height: 22px;\n  font-size: 14px;\n  color: #999;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: #999;\n  color: #fff;\n  border-radius: 2px;\n  padding: 0 5px;\n}\n",""]),t.exports=e},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.createShowHideFn=void 0;var r=n(2),o=r.__importDefault(n(3)),i=r.__importDefault(n(39));function a(t){var e,n=function(e,n){return void 0===n&&(n=""),t.i18next.t(n+e)};return{showImgTooltip:function(r){var a=[{$elem:o.default("<span class='w-e-icon-trash-o'></span>"),onClick:function(t,e){return t.selection.createRangeByElem(e),t.selection.restoreSelection(),t.cmd.do("delete"),!0}},{$elem:o.default("<span>30%</span>"),onClick:function(t,e){return e.attr("width","30%"),e.removeAttr("height"),!0}},{$elem:o.default("<span>50%</span>"),onClick:function(t,e){return e.attr("width","50%"),e.removeAttr("height"),!0}},{$elem:o.default("<span>100%</span>"),onClick:function(t,e){return e.attr("width","100%"),e.removeAttr("height"),!0}}];a.push({$elem:o.default("<span>"+n("重置")+"</span>"),onClick:function(t,e){return e.removeAttr("width"),e.removeAttr("height"),!0}}),r.attr("data-href")&&a.push({$elem:o.default("<span>"+n("查看链接")+"</span>"),onClick:function(t,e){var n=e.attr("data-href");return n&&(n=decodeURIComponent(n),window.open(n,"_target")),!0}}),(e=new i.default(t,r,a)).create()},hideImgTooltip:function(){e&&(e.remove(),e=null)}}}e.createShowHideFn=a,e.default=function(t){var e=a(t),n=e.showImgTooltip,r=e.hideImgTooltip;t.txt.eventHooks.imgClickEvents.push(n),t.txt.eventHooks.clickEvents.push(r),t.txt.eventHooks.keyupEvents.push(r),t.txt.eventHooks.toolbarClickEvents.push(r),t.txt.eventHooks.menuClickEvents.push(r),t.txt.eventHooks.textScrollEvents.push(r),t.txt.eventHooks.imgDragBarMouseDownEvents.push(r),t.txt.eventHooks.changeEvents.push(r)}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.default=function(t){var e=t.txt,n=t.selection;e.eventHooks.keydownEvents.push((function(t){var e=n.getSelectionContainerElem(),r=n.getRange();if(r&&e&&8===t.keyCode&&n.isSelectionEmpty()){var o=r.startContainer,i=r.startOffset,a=null;if(0===i)for(;o!==e.elems[0]&&e.elems[0].contains(o)&&o.parentNode&&!a;){if(o.previousSibling){a=o.previousSibling;break}o=o.parentNode}else 3!==o.nodeType&&(a=o.childNodes[i-1]);if(a){for(var s=a;s.childNodes.length;)s=s.childNodes[s.childNodes.length-1];s instanceof HTMLElement&&"IMG"===s.tagName&&(s.remove(),t.preventDefault())}}}))}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(26)),a=r(n(17));(0,o.default)(e,"__esModule",{value:!0});var s=n(2),l=s.__importDefault(n(3)),u=n(6),c=s.__importDefault(n(97));e.default=function(t){var e,n=t.config,r=new c.default(t),o=u.getRandom("up-trigger-id"),s=u.getRandom("up-file-id"),f=u.getRandom("input-link-url"),d=u.getRandom("input-link-url-alt"),p=u.getRandom("input-link-url-href"),h=u.getRandom("btn-link"),v=function(e,n){return void 0===n&&(n="menus.panelMenus.image."),t.i18next.t(n+e)},m=1===n.uploadImgMaxLength?"":'multiple="multiple"',g=(0,i.default)(e=n.uploadImgAccept).call(e,(function(t){return"image/"+t})).join(","),A=function(t,e,n){return'<div class="'+t+'" data-title="'+n+'">\n            <div id="'+o+'" class="w-e-up-btn">\n                <i class="'+e+'"></i>\n            </div>\n            <div style="display:none;">\n                <input id="'+s+'" type="file" '+m+' accept="'+g+'"/>\n            </div>\n        </div>'},y=[{selector:"#"+o,type:"click",fn:function(){var t=n.uploadImgFromMedia;if(t&&"function"==typeof t)return t(),!0;var e=l.default("#"+s).elems[0];if(!e)return!0;e.click()}},{selector:"#"+s,type:"change",fn:function(){var t=l.default("#"+s).elems[0];if(!t)return!0;var e=t.files;return(null==e?void 0:e.length)&&r.uploadImg(e),t&&(t.value=""),!0}}],w=['<input\n            id="'+f+'"\n            type="text"\n            class="block"\n            placeholder="'+v("图片地址")+'"/>'];n.showLinkImgAlt&&w.push('\n        <input\n            id="'+d+'"\n            type="text"\n            class="block"\n            placeholder="'+v("图片文字说明")+'"/>'),n.showLinkImgHref&&w.push('\n        <input\n            id="'+p+'"\n            type="text"\n            class="block"\n            placeholder="'+v("跳转链接")+'"/>');var b=[{title:v("上传图片"),tpl:A("w-e-up-img-container","w-e-icon-upload2",""),events:y},{title:v("网络图片"),tpl:"<div>\n                    "+w.join("")+'\n                    <div class="w-e-button-container">\n                        <button type="button" id="'+h+'" class="right">'+v("插入","")+"</button>\n                    </div>\n                </div>",events:[{selector:"#"+h,type:"click",fn:function(){var t,e,o,i,s,u,c,h=l.default("#"+f),v=(0,a.default)(t=h.val()).call(t);if(v&&(n.showLinkImgAlt&&(e=(0,a.default)(o=l.default("#"+d).val()).call(o)),n.showLinkImgHref&&(i=(0,a.default)(s=l.default("#"+p).val()).call(s)),u=v,!0===(c=n.linkImgCheck(u))||("string"==typeof c&&n.customAlert(c,"error"),0)))return r.insertImg(v,e,i),!0},bindEnter:!0}]}],_={width:300,height:0,tabs:[],onlyUploadConf:{$elem:l.default(A("w-e-menu","w-e-icon-image","图片")),events:y}};return window.FileReader&&(n.uploadImgShowBase64||n.uploadImgServer||n.customUploadImg||n.uploadImgFromMedia)&&_.tabs.push(b[0]),n.showLinkImg&&(_.tabs.push(b[1]),_.onlyUploadConf=void 0),_}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=a.__importDefault(n(3)),l=a.__importDefault(n(24)),u=a.__importDefault(n(366)),c=function(t){function e(e){var n=this,r=s.default('<div class="w-e-menu" data-title="缩进">\n                <i class="w-e-icon-indent-increase"></i>\n            </div>'),o={width:130,title:"设置缩进",type:"list",list:[{$elem:s.default('<p>\n                            <i class="w-e-icon-indent-increase w-e-drop-list-item"></i>\n                            '+e.i18next.t("menus.dropListMenu.indent.增加缩进")+"\n                        <p>"),value:"increase"},{$elem:s.default('<p>\n                            <i class="w-e-icon-indent-decrease w-e-drop-list-item"></i>\n                            '+e.i18next.t("menus.dropListMenu.indent.减少缩进")+"\n                        <p>"),value:"decrease"}],clickHandler:function(t){n.command(t)}};return n=t.call(this,r,e,o)||this}return a.__extends(e,t),e.prototype.command=function(t){var e=this.editor,n=e.selection.getSelectionContainerElem();if(n&&e.$textElem.equal(n)){var r=e.selection.getSelectionRangeTopNodes();r.length>0&&(0,i.default)(r).call(r,(function(n){u.default(s.default(n),t,e)}))}else n&&n.length>0&&(0,i.default)(n).call(n,(function(n){u.default(s.default(n),t,e)}));e.selection.restoreSelection(),this.tryChangeActive()},e.prototype.tryChangeActive=function(){var t=this.editor,e=t.selection.getSelectionStartElem(),n=s.default(e).getNodeTop(t);n.length<=0||(""!=n.elems[0].style.paddingLeft?this.active():this.unActive())},e}(l.default);e.default=c},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(45)),a=r(n(17));(0,o.default)(e,"__esModule",{value:!0});var s=n(2),l=s.__importDefault(n(367)),u=s.__importDefault(n(368)),c=/^(\d+)(\w+)$/,f=/^(\d+)%$/;function d(t){var e=t.config.indentation;if("string"==typeof e){if(c.test(e)){var n,r=(0,i.default)(n=(0,a.default)(e).call(e).match(c)).call(n,1,3),o=r[0],s=r[1];return{value:Number(o),unit:s}}if(f.test(e))return{value:Number((0,a.default)(e).call(e).match(f)[1]),unit:"%"}}else if(void 0!==e.value&&e.unit)return e;return{value:2,unit:"em"}}e.default=function(t,e,n){var r=t.getNodeTop(n);/^(P|H[0-9]*)$/.test(r.getNodeName())&&("increase"===e?l.default(r,d(n)):"decrease"===e&&u.default(r,d(n)))}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(45));(0,o.default)(e,"__esModule",{value:!0}),e.default=function(t,e){var n=t.elems[0];if(""===n.style.paddingLeft)t.css("padding-left",e.value+e.unit);else{var r=n.style.paddingLeft,o=(0,i.default)(r).call(r,0,r.length-e.unit.length),a=Number(o)+e.value;t.css("padding-left",""+a+e.unit)}}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(45));(0,o.default)(e,"__esModule",{value:!0}),e.default=function(t,e){var n=t.elems[0];if(""!==n.style.paddingLeft){var r=n.style.paddingLeft,o=(0,i.default)(r).call(r,0,r.length-e.unit.length),a=Number(o)-e.value;a>0?t.css("padding-left",""+a+e.unit):t.css("padding-left","")}}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(3)),i=r.__importDefault(n(38)),a=r.__importDefault(n(33)),s=r.__importDefault(n(370)),l=function(t){function e(e){var n=o.default('<div class="w-e-menu" data-title="表情">\n                <i class="w-e-icon-happy"></i>\n            </div>');return t.call(this,n,e)||this}return r.__extends(e,t),e.prototype.createPanel=function(){var t=s.default(this.editor);new a.default(this,t).create()},e.prototype.clickHandler=function(){this.createPanel()},e.prototype.tryChangeActive=function(){},e}(i.default);e.default=l},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(26)),a=r(n(70)),s=r(n(17));(0,o.default)(e,"__esModule",{value:!0});var l=n(2).__importDefault(n(3));e.default=function(t){var e=t.config.emotions;function n(t){var e,n,r=[];return"image"==t.type?(r=(0,i.default)(e=t.content).call(e,(function(t){return"string"==typeof t?"":'<span  title="'+t.alt+'">\n                    <img class="eleImg" data-emoji="'+t.alt+'" style src="'+t.src+'" alt="['+t.alt+']">\n                </span>'})),r=(0,a.default)(r).call(r,(function(t){return""!==t}))):r=(0,i.default)(n=t.content).call(n,(function(t){return'<span class="eleImg" title="'+t+'">'+t+"</span>"})),r.join("").replace(/&nbsp;/g,"")}return{width:300,height:230,tabs:(0,i.default)(e).call(e,(function(e){return{title:t.i18next.t("menus.panelMenus.emoticon."+e.title),tpl:"<div>"+n(e)+"</div>",events:[{selector:".eleImg",type:"click",fn:function(e){var n,r,o=l.default(e.target);return n="IMG"===o.getNodeName()?(0,s.default)(r=o.parent().html()).call(r):"<span>"+o.html()+"</span>",t.cmd.do("insertHTML",n),!0}}]}}))}}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.createListHandle=e.ClassType=void 0;var r,o=n(2),i=o.__importDefault(n(3)),a=o.__importDefault(n(372)),s=o.__importDefault(n(374)),l=o.__importDefault(n(375)),u=o.__importDefault(n(376)),c=o.__importDefault(n(377));!function(t){t.Wrap="WrapListHandle",t.Join="JoinListHandle",t.StartJoin="StartJoinListHandle",t.EndJoin="EndJoinListHandle",t.Other="OtherListHandle"}(r=e.ClassType||(e.ClassType={}));var f={WrapListHandle:a.default,JoinListHandle:s.default,StartJoinListHandle:l.default,EndJoinListHandle:u.default,OtherListHandle:c.default};e.createListHandle=function(t,e,n){if(t===r.Other&&void 0===n)throw new Error("other 类需要传入 range");return t!==r.Other?new f[t](e):new f[t](e,n)};var d=function(){function t(t){this.handle=t,this.handle.exec()}return t.prototype.getSelectionRangeElem=function(){return i.default(this.handle.selectionRangeElem.get())},t}();e.default=d},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=a.__importDefault(n(3)),l=n(58),u=n(47),c=function(t){function e(e){return t.call(this,e)||this}return a.__extends(e,t),e.prototype.exec=function(){var t,e=this.options,n=e.listType,r=e.listTarget,o=e.$selectionElem,a=e.$startElem,l=e.$endElem,c=[],f=null==o?void 0:o.getNodeName(),d=a.prior,p=l.prior;if(!a.prior&&!l.prior||!(null==d?void 0:d.prev().length)&&!(null==p?void 0:p.next().length)){var h;(0,i.default)(h=null==o?void 0:o.children()).call(h,(function(t){c.push(s.default(t))})),f===n?t=u.createElementFragment(c,u.createDocumentFragment(),"p"):(t=u.createElement(r),(0,i.default)(c).call(c,(function(e){t.appendChild(e.elems[0])}))),this.selectionRangeElem.set(t),u.insertBefore(o,t,o.elems[0]),o.remove()}else{for(var v=d;v.length;)c.push(v),v=(null==p?void 0:p.equal(v))?s.default(void 0):v.next();var m=d.prev(),g=p.next();if(f===n?t=u.createElementFragment(c,u.createDocumentFragment(),"p"):(t=u.createElement(r),(0,i.default)(c).call(c,(function(e){t.append(e.elems[0])}))),m.length&&g.length){for(var A=[];g.length;)A.push(g),g=g.next();var y=u.createElement(f);(0,i.default)(A).call(A,(function(t){y.append(t.elems[0])})),s.default(y).insertAfter(o),this.selectionRangeElem.set(t),(w=o.next()).length?u.insertBefore(o,t,w.elems[0]):o.parent().elems[0].append(t)}else if(m.length){var w;this.selectionRangeElem.set(t),(w=o.next()).length?u.insertBefore(o,t,w.elems[0]):o.parent().elems[0].append(t)}else this.selectionRangeElem.set(t),u.insertBefore(o,t,o.elems[0])}},e}(l.ListHandle);e.default=c},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var a=function(){function t(){this._element=null}return t.prototype.set=function(t){if(t instanceof DocumentFragment){var e,n=[];(0,i.default)(e=t.childNodes).call(e,(function(t){n.push(t)})),t=n}this._element=t},t.prototype.get=function(){return this._element},t.prototype.clear=function(){this._element=null},t}();e.default=a},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=a.__importDefault(n(3)),l=n(58),u=n(47),c=function(t){function e(e){return t.call(this,e)||this}return a.__extends(e,t),e.prototype.exec=function(){var t,e,n,r,o,a,l,c,f=this.options,d=f.editor,p=f.listType,h=f.listTarget,v=f.$startElem,m=f.$endElem,g=d.selection.getSelectionRangeTopNodes(),A=null==v?void 0:v.getNodeName();if(A===(null==m?void 0:m.getNodeName()))if(g.length>2)if(g.shift(),g.pop(),c=u.createElementFragment(u.filterSelectionNodes(g),u.createDocumentFragment()),A===p)null===(t=m.children())||void 0===t||(0,i.default)(t).call(t,(function(t){c.append(t)})),m.remove(),this.selectionRangeElem.set(c),v.elems[0].append(c);else{for(var y=document.createDocumentFragment(),w=document.createDocumentFragment(),b=u.getStartPoint(v);b.length;){var _=b.elems[0];b=b.next(),y.append(_)}for(var x=u.getEndPoint(m),E=[];x.length;)E.unshift(x.elems[0]),x=x.prev();(0,i.default)(E).call(E,(function(t){w.append(t)}));var S=u.createElement(h);S.append(y),S.append(c),S.append(w),c=S,this.selectionRangeElem.set(c),s.default(S).insertAfter(v),!(null===(e=v.children())||void 0===e?void 0:e.length)&&v.remove(),!(null===(n=m.children())||void 0===n?void 0:n.length)&&m.remove()}else{for(g.length=0,b=u.getStartPoint(v);b.length;)g.push(b),b=b.next();for(x=u.getEndPoint(m),E=[];x.length;)E.unshift(x),x=x.prev();g.push.apply(g,E),A===p?(c=u.createElementFragment(g,u.createDocumentFragment(),"p"),this.selectionRangeElem.set(c),u.insertBefore(v,c,m.elems[0])):(c=u.createElement(h),(0,i.default)(g).call(g,(function(t){c.append(t.elems[0])})),this.selectionRangeElem.set(c),s.default(c).insertAfter(v)),!(null===(r=v.children())||void 0===r?void 0:r.length)&&m.remove(),!(null===(o=m.children())||void 0===o?void 0:o.length)&&m.remove()}else{var T=[];for(x=u.getEndPoint(m);x.length;)T.unshift(x),x=x.prev();var C=[];for(b=u.getStartPoint(v);b.length;)C.push(b),b=b.next();if(c=u.createDocumentFragment(),g.shift(),g.pop(),(0,i.default)(C).call(C,(function(t){return c.append(t.elems[0])})),c=u.createElementFragment(u.filterSelectionNodes(g),c),(0,i.default)(T).call(T,(function(t){return c.append(t.elems[0])})),this.selectionRangeElem.set(c),A===p)v.elems[0].append(c),!(null===(a=m.children())||void 0===a?void 0:a.length)&&m.remove();else if(null===(l=m.children())||void 0===l?void 0:l.length){var D=m.children();u.insertBefore(D,c,D.elems[0])}else m.elems[0].append(c)}},e}(l.ListHandle);e.default=c},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=a.__importDefault(n(3)),l=n(58),u=n(47),c=function(t){function e(e){return t.call(this,e)||this}return a.__extends(e,t),e.prototype.exec=function(){var t,e,n=this.options,r=n.editor,o=n.listType,a=n.listTarget,l=n.$startElem,c=r.selection.getSelectionRangeTopNodes(),f=null==l?void 0:l.getNodeName();c.shift();for(var d=[],p=u.getStartPoint(l);p.length;)d.push(p),p=p.next();f===o?(e=u.createDocumentFragment(),(0,i.default)(d).call(d,(function(t){return e.append(t.elems[0])})),e=u.createElementFragment(u.filterSelectionNodes(c),e),this.selectionRangeElem.set(e),l.elems[0].append(e)):(e=u.createElement(a),(0,i.default)(d).call(d,(function(t){return e.append(t.elems[0])})),e=u.createElementFragment(u.filterSelectionNodes(c),e),this.selectionRangeElem.set(e),s.default(e).insertAfter(l),!(null===(t=l.children())||void 0===t?void 0:t.length)&&l.remove())},e}(l.ListHandle);e.default=c},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=a.__importDefault(n(3)),l=n(58),u=n(47),c=function(t){function e(e){return t.call(this,e)||this}return a.__extends(e,t),e.prototype.exec=function(){var t,e,n,r=this.options,o=r.editor,a=r.listType,l=r.listTarget,c=r.$endElem,f=o.selection.getSelectionRangeTopNodes(),d=null==c?void 0:c.getNodeName();f.pop();for(var p=[],h=u.getEndPoint(c);h.length;)p.unshift(h),h=h.prev();if(d===a)if(n=u.createElementFragment(u.filterSelectionNodes(f),u.createDocumentFragment()),(0,i.default)(p).call(p,(function(t){return n.append(t.elems[0])})),this.selectionRangeElem.set(n),null===(t=c.children())||void 0===t?void 0:t.length){var v=c.children();u.insertBefore(v,n,v.elems[0])}else c.elems[0].append(n);else{var m=u.filterSelectionNodes(f);m.push.apply(m,p),n=u.createElementFragment(m,u.createElement(l)),this.selectionRangeElem.set(n),s.default(n).insertBefore(c),!(null===(e=c.children())||void 0===e?void 0:e.length)&&c.remove()}},e}(l.ListHandle);e.default=c},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=n(58),i=n(47),a=function(t){function e(e,n){var r=t.call(this,e)||this;return r.range=n,r}return r.__extends(e,t),e.prototype.exec=function(){var t=this.options,e=t.editor,n=t.listTarget,r=e.selection.getSelectionRangeTopNodes(),o=i.createElementFragment(i.filterSelectionNodes(r),i.createElement(n));this.selectionRangeElem.set(o),this.range.insertNode(o)},e}(o.ListHandle);e.default=a},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4)),a=r(n(27));(0,o.default)(e,"__esModule",{value:!0});var s=n(2),l=s.__importDefault(n(24)),u=s.__importDefault(n(3)),c=s.__importDefault(n(379)),f=function(t){function e(e){var n=this,r=u.default('<div class="w-e-menu" data-title="行高">\n                    <i class="w-e-icon-row-height"></i>\n                </div>'),o={width:100,title:"设置行高",type:"list",list:new c.default(e,e.config.lineHeights).getItemList(),clickHandler:function(t){e.selection.saveRange(),n.command(t)}};return n=t.call(this,r,e,o)||this}return s.__extends(e,t),e.prototype.command=function(t){var e=this.editor;e.selection.restoreSelection();var n=u.default(e.selection.getSelectionContainerElem());if(n.elems.length)if(n&&e.$textElem.equal(n)){for(var r=!1,o=u.default(e.selection.getSelectionStartElem()).elems[0],i=u.default(e.selection.getSelectionEndElem()).elems[0],a=this.getDom(o),s=this.getDom(i),l=n.elems[0].children,c=0;c<l.length;c++){var f=l[c];if("P"===u.default(f).getNodeName()&&(f===a&&(r=!0),r&&(u.default(f).css("line-height",t),f===s)))return void(r=!1)}e.selection.createRangeByElems(o,i)}else{var d=n.elems[0],p=this.getDom(d);"P"===u.default(p).getNodeName()&&(u.default(p).css("line-height",t),e.selection.createRangeByElems(p,p))}},e.prototype.getDom=function(t){var e=u.default(t).elems[0];return e.parentNode?e=function t(e,n){var r=u.default(e.parentNode);return n.$textElem.equal(r)?e:t(r.elems[0],n)}(e,this.editor):e},e.prototype.styleProcessing=function(t){var e="";return(0,i.default)(t).call(t,(function(t){""!==t&&-1===(0,a.default)(t).call(t,"line-height")&&(e=e+t+";")})),e},e.prototype.setRange=function(t,e){var n=this.editor,r=window.getSelection?window.getSelection():document.getSelection();null==r||r.removeAllRanges();var o=document.createRange(),i=t,a=e;o.setStart(i,0),o.setEnd(a,1),null==r||r.addRange(o),n.selection.saveRange(),null==r||r.removeAllRanges(),n.selection.restoreSelection()},e.prototype.tryChangeActive=function(){var t=this.editor,e=t.selection.getSelectionContainerElem();if(!e||!t.$textElem.equal(e)){var n=u.default(t.selection.getSelectionStartElem());if(0!==n.length){var r=(n=this.getDom(n.elems[0])).getAttribute("style")?n.getAttribute("style"):"";r&&-1!==(0,a.default)(r).call(r,"line-height")?this.active():this.unActive()}}},e}(l.default);e.default=f},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var a=n(2).__importDefault(n(3)),s=function(){function t(t,e){var n=this;this.itemList=[{$elem:a.default("<span>"+t.i18next.t("默认")+"</span>"),value:""}],(0,i.default)(e).call(e,(function(t){n.itemList.push({$elem:a.default("<span>"+t+"</span>"),value:t})}))}return t.prototype.getItemList=function(){return this.itemList},t}();e.default=s},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(3)),i=function(t){function e(e){var n=o.default('<div class="w-e-menu" data-title="撤销">\n                <i class="w-e-icon-undo"></i>\n            </div>');return t.call(this,n,e)||this}return r.__extends(e,t),e.prototype.clickHandler=function(){var t=this.editor;t.history.revoke();var e=t.$textElem.children();if(null==e?void 0:e.length){var n=e.last();t.selection.createRangeByElem(n,!1,!0),t.selection.restoreSelection()}},e.prototype.tryChangeActive=function(){this.editor.isCompatibleMode||(this.editor.history.size[0]?this.active():this.unActive())},e}(r.__importDefault(n(23)).default);e.default=i},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(3)),i=function(t){function e(e){var n=o.default('<div class="w-e-menu" data-title="恢复">\n                <i class="w-e-icon-redo"></i>\n            </div>');return t.call(this,n,e)||this}return r.__extends(e,t),e.prototype.clickHandler=function(){var t=this.editor;t.history.restore();var e=t.$textElem.children();if(null==e?void 0:e.length){var n=e.last();t.selection.createRangeByElem(n,!1,!0),t.selection.restoreSelection()}},e.prototype.tryChangeActive=function(){this.editor.isCompatibleMode||(this.editor.history.size[1]?this.active():this.unActive())},e}(r.__importDefault(n(23)).default);e.default=i},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(38)),i=r.__importDefault(n(3)),a=r.__importDefault(n(383)),s=r.__importDefault(n(33)),l=r.__importDefault(n(392)),u=function(t){function e(e){var n,r=i.default('<div class="w-e-menu" data-title="表格"><i class="w-e-icon-table2"></i></div>');return n=t.call(this,r,e)||this,l.default(e),n}return r.__extends(e,t),e.prototype.clickHandler=function(){this.createPanel()},e.prototype.createPanel=function(){var t=a.default(this.editor);new s.default(this,t).create()},e.prototype.tryChangeActive=function(){},e}(o.default);e.default=u},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(384));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=n(6),l=a.__importDefault(n(3));n(389);var u=a.__importDefault(n(391));function c(t){return t>0&&(0,i.default)(t)}e.default=function(t){var e=new u.default(t),n=s.getRandom("w-col-id"),r=s.getRandom("w-row-id"),o=s.getRandom("btn-link"),i="menus.panelMenus.table.",a=function(e){return t.i18next.t(e)},f=[{title:a(i+"插入表格"),tpl:'<div>\n                    <div class="w-e-table">\n                        <span>'+a("创建")+'</span>\n                        <input id="'+r+'"  type="text" class="w-e-table-input" value="5"/></td>\n                        <span>'+a(i+"行")+'</span>\n                        <input id="'+n+'" type="text" class="w-e-table-input" value="5"/></td>\n                        <span>'+(a(i+"列")+a(i+"的")+a(i+"表格"))+'</span>\n                    </div>\n                    <div class="w-e-button-container">\n                        <button type="button" id="'+o+'" class="right">'+a("插入")+"</button>\n                    </div>\n                </div>",events:[{selector:"#"+o,type:"click",fn:function(){var o=Number(l.default("#"+n).val()),i=Number(l.default("#"+r).val());return c(i)&&c(o)?(e.createAction(i,o),!0):(t.config.customAlert("表格行列请输入正整数","warning"),!1)},bindEnter:!0}]}],d={width:330,height:0,tabs:[]};return d.tabs.push(f[0]),d}},function(t,e,n){t.exports=n(385)},function(t,e,n){var r=n(386);t.exports=r},function(t,e,n){n(387);var r=n(9);t.exports=r.Number.isInteger},function(t,e,n){n(5)({target:"Number",stat:!0},{isInteger:n(388)})},function(t,e,n){var r=n(13),o=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&o(t)===t}},function(t,e,n){var r=n(20),o=n(390);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);r(o,{insert:"head",singleton:!1}),t.exports=o.locals||{}},function(t,e,n){(e=n(21)(!1)).push([t.i,".w-e-table {\n  display: flex;\n}\n.w-e-table .w-e-table-input {\n  width: 40px;\n  text-align: center!important;\n  margin: 0 5px;\n}\n",""]),t.exports=e},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=n(7),i=r.__importDefault(n(3)),a=function(){function t(t){this.editor=t}return t.prototype.createAction=function(t,e){var n=this.editor,r=i.default(n.selection.getSelectionContainerElem()),o=i.default(r.elems[0]).parentUntilEditor("UL",n),a=i.default(r.elems[0]).parentUntilEditor("OL",n);if(!o&&!a){var s=this.createTableHtml(t,e);n.cmd.do("insertHTML",s)}},t.prototype.createTableHtml=function(t,e){for(var n="",r="",i=0;i<t;i++){r="";for(var a=0;a<e;a++)r+=0===i?"<th></th>":"<td></td>";n=n+"<tr>"+r+"</tr>"}return'<table border="0" width="100%" cellpadding="0" cellspacing="0"><tbody>'+n+"</tbody></table>"+o.EMPTY_P},t}();e.default=a},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2).__importDefault(n(393)),o=n(400);e.default=function(t){r.default(t),o.bindEventKeyboardEvent(t),o.bindClickEvent(t)}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(3)),i=r.__importDefault(n(39)),a=r.__importDefault(n(394)),s=r.__importDefault(n(399)),l=n(7);function u(t){var e=t.selection.getSelectionStartElem(),n=t.selection.getSelectionEndElem();return(null==e?void 0:e.elems[0])!==(null==n?void 0:n.elems[0])}function c(t,e){var n=t.elems[0].nextSibling;return n&&"<br>"!==n.innerHTML||(e+=""+l.EMPTY_P),e}e.default=function(t){var e=function(t){var e;return{showTableTooltip:function(n){var r=new s.default(t),f=function(e,n){return void 0===n&&(n="menus.panelMenus.table."),t.i18next.t(n+e)},d=[{$elem:o.default("<span>"+f("删除表格")+"</span>"),onClick:function(t,e){return t.selection.createRangeByElem(e),t.selection.restoreSelection(),t.cmd.do("insertHTML",l.EMPTY_P),!0}},{$elem:o.default("<span>"+f("添加行")+"</span>"),onClick:function(t,e){if(u(t))return!0;var n=o.default(t.selection.getSelectionStartElem()),i=r.getRowNode(n.elems[0]);if(!i)return!0;var s=Number(r.getCurrentRowIndex(e.elems[0],i)),l=r.getTableHtml(e.elems[0]),f=r.getTableHtml(a.default.ProcessingRow(o.default(l),s).elems[0]);return f=c(e,f),t.selection.createRangeByElem(e),t.selection.restoreSelection(),t.cmd.do("insertHTML",f),!0}},{$elem:o.default("<span>"+f("删除行")+"</span>"),onClick:function(t,e){if(u(t))return!0;var n=o.default(t.selection.getSelectionStartElem()),i=r.getRowNode(n.elems[0]);if(!i)return!0;var s=Number(r.getCurrentRowIndex(e.elems[0],i)),f=r.getTableHtml(e.elems[0]),d=a.default.DeleteRow(o.default(f),s).elems[0].children[0].children.length,p="";return t.selection.createRangeByElem(e),t.selection.restoreSelection(),p=c(e,p=0===d?l.EMPTY_P:r.getTableHtml(a.default.DeleteRow(o.default(f),s).elems[0])),t.cmd.do("insertHTML",p),!0}},{$elem:o.default("<span>"+f("添加列")+"</span>"),onClick:function(t,e){if(u(t))return!0;var n=o.default(t.selection.getSelectionStartElem()),i=r.getCurrentColIndex(n.elems[0]),s=r.getTableHtml(e.elems[0]),l=r.getTableHtml(a.default.ProcessingCol(o.default(s),i).elems[0]);return l=c(e,l),t.selection.createRangeByElem(e),t.selection.restoreSelection(),t.cmd.do("insertHTML",l),!0}},{$elem:o.default("<span>"+f("删除列")+"</span>"),onClick:function(t,e){if(u(t))return!0;var n=o.default(t.selection.getSelectionStartElem()),i=r.getCurrentColIndex(n.elems[0]),s=r.getTableHtml(e.elems[0]),f=a.default.DeleteCol(o.default(s),i),d=f.elems[0].children[0].children[0].children.length,p="";return t.selection.createRangeByElem(e),t.selection.restoreSelection(),p=c(e,p=0===d?l.EMPTY_P:r.getTableHtml(f.elems[0])),t.cmd.do("insertHTML",p),!0}},{$elem:o.default("<span>"+f("设置表头")+"</span>"),onClick:function(t,e){if(u(t))return!0;var n=o.default(t.selection.getSelectionStartElem()),i=r.getRowNode(n.elems[0]);if(!i)return!0;var s=Number(r.getCurrentRowIndex(e.elems[0],i));0!==s&&(s=0);var l=r.getTableHtml(e.elems[0]),f=r.getTableHtml(a.default.setTheHeader(o.default(l),s,"th").elems[0]);return f=c(e,f),t.selection.createRangeByElem(e),t.selection.restoreSelection(),t.cmd.do("insertHTML",f),!0}},{$elem:o.default("<span>"+f("取消表头")+"</span>"),onClick:function(t,e){var n=o.default(t.selection.getSelectionStartElem()),i=r.getRowNode(n.elems[0]);if(!i)return!0;var s=Number(r.getCurrentRowIndex(e.elems[0],i));0!==s&&(s=0);var l=r.getTableHtml(e.elems[0]),u=r.getTableHtml(a.default.setTheHeader(o.default(l),s,"td").elems[0]);return u=c(e,u),t.selection.createRangeByElem(e),t.selection.restoreSelection(),t.cmd.do("insertHTML",u),!0}}];(e=new i.default(t,n,d)).create()},hideTableTooltip:function(){e&&(e.remove(),e=null)}}}(t),n=e.showTableTooltip,r=e.hideTableTooltip;t.txt.eventHooks.tableClickEvents.push(n),t.txt.eventHooks.clickEvents.push(r),t.txt.eventHooks.keyupEvents.push(r),t.txt.eventHooks.toolbarClickEvents.push(r),t.txt.eventHooks.menuClickEvents.push(r),t.txt.eventHooks.textScrollEvents.push(r)}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(45)),a=r(n(91)),s=r(n(4)),l=r(n(138));(0,o.default)(e,"__esModule",{value:!0});var u=n(2).__importDefault(n(3));function c(t,e){for(;0!==t.children.length;)t.removeChild(t.children[0]);for(var n=0;n<e.length;n++)t.appendChild(e[n])}function f(t){var e=t.elems[0].children[0];return"COLGROUP"===e.nodeName&&(e=t.elems[0].children[t.elems[0].children.length-1]),e}e.default={ProcessingRow:function(t,e){for(var n=f(t),r=(0,i.default)(Array.prototype).apply(n.children),o=r[0].children.length,s=document.createElement("tr"),l=0;l<o;l++){var d=document.createElement("td");s.appendChild(d)}return(0,a.default)(r).call(r,e+1,0,s),c(n,r),u.default(n.parentNode)},ProcessingCol:function(t,e){for(var n=f(t),r=(0,i.default)(Array.prototype).apply(n.children),o=function(t){var n,o=[];for((0,s.default)(n=(0,l.default)(r[t].children)).call(n,(function(t){o.push(t)}));0!==r[t].children.length;)r[t].removeChild(r[t].children[0]);var i="TH"!==u.default(o[0]).getNodeName()?document.createElement("td"):document.createElement("th");(0,a.default)(o).call(o,e+1,0,i);for(var c=0;c<o.length;c++)r[t].appendChild(o[c])},d=0;d<r.length;d++)o(d);return c(n,r),u.default(n.parentNode)},DeleteRow:function(t,e){var n=f(t),r=(0,i.default)(Array.prototype).apply(n.children);return(0,a.default)(r).call(r,e,1),c(n,r),u.default(n.parentNode)},DeleteCol:function(t,e){for(var n=f(t),r=(0,i.default)(Array.prototype).apply(n.children),o=function(t){var n,o=[];for((0,s.default)(n=(0,l.default)(r[t].children)).call(n,(function(t){o.push(t)}));0!==r[t].children.length;)r[t].removeChild(r[t].children[0]);(0,a.default)(o).call(o,e,1);for(var i=0;i<o.length;i++)r[t].appendChild(o[i])},d=0;d<r.length;d++)o(d);return c(n,r),u.default(n.parentNode)},setTheHeader:function(t,e,n){for(var r=f(t),o=(0,i.default)(Array.prototype).apply(r.children),d=o[e].children,p=document.createElement("tr"),h=function(t){var e,r=document.createElement(n),o=d[t];(0,s.default)(e=(0,l.default)(o.childNodes)).call(e,(function(t){r.appendChild(t)})),p.appendChild(r)},v=0;v<d.length;v++)h(v);return(0,a.default)(o).call(o,e,1,p),c(r,o),u.default(r.parentNode)}}},function(t,e,n){var r=n(396);t.exports=r},function(t,e,n){n(50),n(397);var r=n(9);t.exports=r.Array.from},function(t,e,n){var r=n(5),o=n(398);r({target:"Array",stat:!0,forced:!n(115)((function(t){Array.from(t)}))},{from:o})},function(t,e,n){"use strict";var r=n(40),o=n(31),i=n(114),a=n(112),s=n(35),l=n(69),u=n(113);t.exports=function(t){var e,n,c,f,d,p,h=o(t),v="function"==typeof this?this:Array,m=arguments.length,g=m>1?arguments[1]:void 0,A=void 0!==g,y=u(h),w=0;if(A&&(g=r(g,m>2?arguments[2]:void 0,2)),null==y||v==Array&&a(y))for(n=new v(e=s(h.length));e>w;w++)p=A?g(h[w],w):h[w],l(n,w,p);else for(d=(f=y.call(h)).next,n=new v;!(c=d.call(f)).done;w++)p=A?i(f,g,[c.value,w],!0):c.value,l(n,w,p);return n.length=w,n}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4)),a=r(n(138));(0,o.default)(e,"__esModule",{value:!0});var s=n(2).__importDefault(n(3)),l=function(){function t(t){this.editor=t}return t.prototype.getRowNode=function(t){var e,n=s.default(t).elems[0];return n.parentNode?n=null===(e=s.default(n).parentUntil("TR",n))||void 0===e?void 0:e.elems[0]:n},t.prototype.getCurrentRowIndex=function(t,e){var n,r=0,o=t.children[0];return"COLGROUP"===o.nodeName&&(o=t.children[t.children.length-1]),(0,i.default)(n=(0,a.default)(o.children)).call(n,(function(t,n){t===e&&(r=n)})),r},t.prototype.getCurrentColIndex=function(t){var e,n,r=0,o="TD"===s.default(t).getNodeName()||"TH"===s.default(t).getNodeName()?t:null===(n=s.default(t).parentUntil("TD",t))||void 0===n?void 0:n.elems[0],l=s.default(o).parent();return(0,i.default)(e=(0,a.default)(l.elems[0].children)).call(e,(function(t,e){t===o&&(r=e)})),r},t.prototype.getTableHtml=function(t){return'<table border="0" width="100%" cellpadding="0" cellspacing="0">'+s.default(t).html()+"</table>"},t}();e.default=l},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.bindEventKeyboardEvent=e.bindClickEvent=void 0;var r=n(2).__importDefault(n(3));e.bindClickEvent=function(t){t.txt.eventHooks.tableClickEvents.push((function(e,n){if(n.detail>=3){var o=window.getSelection();if(o){var i=o.focusNode,a=o.anchorNode,s=r.default(null==a?void 0:a.parentElement);if(!e.isContain(r.default(i))){var l="TD"===s.elems[0].tagName?s:s.parentUntilEditor("td",t);if(l){var u=t.selection.getRange();null==u||u.setEnd(l.elems[0],l.elems[0].childNodes.length),t.selection.restoreSelection()}}}}}))},e.bindEventKeyboardEvent=function(t){var e=t.txt,n=t.selection;e.eventHooks.keydownEvents.push((function(e){t.selection.saveRange();var r=n.getSelectionContainerElem();if(r){var o=r.getNodeTop(t),i=o.length&&o.prev().length?o.prev():null;if(i&&"TABLE"===i.getNodeName()&&n.isSelectionEmpty()&&0===n.getCursorPos()&&8===e.keyCode){var a=o.next();!!a.length&&function(t){if(!t.length)return!1;var e=t.elems[0];return"P"===e.nodeName&&"<br>"===e.innerHTML}(o)&&(o.remove(),t.selection.setRangeToElem(a.elems[0])),e.preventDefault()}}}))}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(26));(0,o.default)(e,"__esModule",{value:!0}),e.formatCodeHtml=void 0;var a=n(2),s=a.__importDefault(n(38)),l=a.__importDefault(n(3)),u=n(6),c=a.__importDefault(n(402)),f=a.__importDefault(n(139)),d=a.__importDefault(n(33)),p=a.__importDefault(n(403));e.formatCodeHtml=function(t,e){return e?(e=function(t){var e=t.match(/<pre[\s|\S]+?\/pre>/g);return null===e||(0,i.default)(e).call(e,(function(e){t=t.replace(e,e.replace(/<\/code><code>/g,"\n").replace(/<br>/g,""))})),t}(e=function t(e){var n,r=e.match(/<span\sclass="hljs[\s|\S]+?\/span>/gm);if(!r||!r.length)return e;for(var o=(0,i.default)(n=u.deepClone(r)).call(n,(function(t){return(t=t.replace(/<span\sclass="hljs[^>]+>/,"")).replace(/<\/span>/,"")})),a=0;a<r.length;a++)e=e.replace(r[a],o[a]);return t(e)}(e)),e=u.replaceSpecialSymbol(e)):e};var h=function(t){function e(e){var n,r=l.default('<div class="w-e-menu" data-title="代码"><i class="w-e-icon-terminal"></i></div>');return n=t.call(this,r,e)||this,p.default(e),n}return a.__extends(e,t),e.prototype.insertLineCode=function(t){var e=this.editor,n=l.default("<code>"+t+"</code>");e.cmd.do("insertElem",n),e.selection.createRangeByElem(n,!1),e.selection.restoreSelection()},e.prototype.clickHandler=function(){var t=this.editor,e=t.selection.getSelectionText();this.isActive||(t.selection.isSelectionEmpty()?this.createPanel("",""):this.insertLineCode(e))},e.prototype.createPanel=function(t,e){var n=c.default(this.editor,t,e);new d.default(this,n).create()},e.prototype.tryChangeActive=function(){var t=this.editor;f.default(t)?this.active():this.unActive()},e}(s.default);e.default=h},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(26));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=n(6),l=a.__importDefault(n(3)),u=a.__importDefault(n(139)),c=n(7);e.default=function(t,e,n){var r,o=s.getRandom("input-iframe"),a=s.getRandom("select"),f=s.getRandom("btn-ok");var d=function(e){return t.i18next.t(e)};return{width:500,height:0,tabs:[{title:d("menus.panelMenus.code.插入代码"),tpl:'<div>\n                        <select name="" id="'+a+'">\n                            '+(0,i.default)(r=t.config.languageType).call(r,(function(t){return"<option "+(n==t?"selected":"")+' value ="'+t+'">'+t+"</option>"}))+'\n                        </select>\n                        <textarea id="'+o+'" type="text" class="wang-code-textarea" placeholder="" style="height: 160px">'+e.replace(/&quot;/g,'"')+'</textarea>\n                        <div class="w-e-button-container">\n                            <button type="button" id="'+f+'" class="right">'+(u.default(t)?d("修改"):d("插入"))+"</button>\n                        </div>\n                    </div>",events:[{selector:"#"+f,type:"click",fn:function(){var e=document.getElementById(o),n=l.default("#"+a).val(),r=e.value;if(r)return!u.default(t)&&(function(e,n){var r;u.default(t)&&function(){if(u.default(t)){var e=t.selection.getSelectionStartElem(),n=null==e?void 0:e.getNodeTop(t);n&&(t.selection.createRangeByElem(n),t.selection.restoreSelection())}}(),(null===(r=t.selection.getSelectionStartElem())||void 0===r?void 0:r.elems[0].innerHTML)&&t.cmd.do("insertHTML",c.EMPTY_P);var o=n.replace(/</g,"&lt;").replace(/>/g,"&gt;");t.highlight&&(o=t.highlight.highlightAuto(o).value),t.cmd.do("insertHTML",'<pre><code class="'+e+'">'+o+"</code></pre>");var i=t.selection.getSelectionStartElem(),a=null==i?void 0:i.getNodeTop(t);0===(null==a?void 0:a.getNextSibling().elems.length)&&l.default(c.EMPTY_P).insertAfter(a)}(n,r),!0)}}]}]}}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(404)),i=r.__importDefault(n(405));e.default=function(t){o.default(t),i.default(t)}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.createShowHideFn=void 0;var r=n(2),o=r.__importDefault(n(3)),i=r.__importDefault(n(39));function a(t){var e;return{showCodeTooltip:function(n){var r,a=[{$elem:o.default("<span>"+(void 0===r&&(r="menus.panelMenus.code."),t.i18next.t(r+"删除代码")+"</span>")),onClick:function(t,e){return e.remove(),!0}}];(e=new i.default(t,n,a)).create()},hideCodeTooltip:function(){e&&(e.remove(),e=null)}}}e.createShowHideFn=a,e.default=function(t){var e=a(t),n=e.showCodeTooltip,r=e.hideCodeTooltip;t.txt.eventHooks.codeClickEvents.push(n),t.txt.eventHooks.clickEvents.push(r),t.txt.eventHooks.toolbarClickEvents.push(r),t.txt.eventHooks.menuClickEvents.push(r),t.txt.eventHooks.textScrollEvents.push(r)}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=n(7),i=r.__importDefault(n(3));e.default=function(t){var e=t.$textElem,n=t.selection,r=t.txt.eventHooks.keydownEvents;r.push((function(t){var r;if(40===t.keyCode){var a=n.getSelectionContainerElem(),s=null===(r=e.children())||void 0===r?void 0:r.last();if("XMP"===(null==a?void 0:a.elems[0].tagName)&&"PRE"===(null==s?void 0:s.elems[0].tagName)){var l=i.default(o.EMPTY_P);e.append(l)}}})),r.push((function(r){t.selection.saveRange();var a=n.getSelectionContainerElem();if(a){var s=a.getNodeTop(t),l=null==s?void 0:s.prev(),u=null==s?void 0:s.getNextSibling();if(l.length&&"PRE"===(null==l?void 0:l.getNodeName())&&0===u.length&&0===n.getCursorPos()&&8===r.keyCode){var c=i.default(o.EMPTY_P);e.append(c)}}}))}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(23)),i=r.__importDefault(n(3)),a=r.__importDefault(n(407)),s=n(6),l=n(7),u=function(t){function e(e){var n,r=i.default('<div class="w-e-menu" data-title="分割线"><i class="w-e-icon-split-line"></i></div>');return n=t.call(this,r,e)||this,a.default(e),n}return r.__extends(e,t),e.prototype.clickHandler=function(){var t=this.editor,e=t.selection.getRange(),n=t.selection.getSelectionContainerElem();if(null==n?void 0:n.length){var r=i.default(n.elems[0]),o=r.parentUntil("TABLE",n.elems[0]),a=r.children();"CODE"!==r.getNodeName()&&(o&&"TABLE"===i.default(o.elems[0]).getNodeName()||a&&0!==a.length&&"IMG"===i.default(a.elems[0]).getNodeName()&&!(null==e?void 0:e.collapsed)||this.createSplitLine())}},e.prototype.createSplitLine=function(){var t="<hr/>"+l.EMPTY_P;s.UA.isFirefox&&(t="<hr/><p></p>"),this.editor.cmd.do("insertHTML",t)},e.prototype.tryChangeActive=function(){},e}(o.default);e.default=u},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2).__importDefault(n(408));e.default=function(t){r.default(t)}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(3)),i=r.__importDefault(n(39));e.default=function(t){var e=function(t){var e;return{showSplitLineTooltip:function(n){var r=[{$elem:o.default("<span>"+t.i18next.t("menus.panelMenus.删除")+"</span>"),onClick:function(t,e){return t.selection.createRangeByElem(e),t.selection.restoreSelection(),t.cmd.do("delete"),!0}}];(e=new i.default(t,n,r)).create()},hideSplitLineTooltip:function(){e&&(e.remove(),e=null)}}}(t),n=e.showSplitLineTooltip,r=e.hideSplitLineTooltip;t.txt.eventHooks.splitLineEvents.push(n),t.txt.eventHooks.clickEvents.push(r),t.txt.eventHooks.keyupEvents.push(r),t.txt.eventHooks.toolbarClickEvents.push(r),t.txt.eventHooks.menuClickEvents.push(r),t.txt.eventHooks.textScrollEvents.push(r)}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=a.__importDefault(n(3)),l=a.__importDefault(n(23)),u=n(98),c=a.__importDefault(n(415)),f=a.__importDefault(n(140)),d=function(t){function e(e){var n,r=s.default('<div class="w-e-menu" data-title="待办事项">\n                    <i class="w-e-icon-checkbox-checked"></i>\n                </div>');return n=t.call(this,r,e)||this,c.default(e),n}return a.__extends(e,t),e.prototype.clickHandler=function(){var t=this.editor;u.isAllTodo(t)?(this.cancelTodo(),this.tryChangeActive()):this.setTodo()},e.prototype.tryChangeActive=function(){u.isAllTodo(this.editor)?this.active():this.unActive()},e.prototype.setTodo=function(){var t=this.editor,e=t.selection.getSelectionRangeTopNodes();(0,i.default)(e).call(e,(function(e){var n;if("P"===(null==e?void 0:e.getNodeName())){var r=f.default(e).getTodo(),o=null===(n=r.children())||void 0===n?void 0:n.getNode();r.insertAfter(e),t.selection.moveCursor(o),e.remove()}})),this.tryChangeActive()},e.prototype.cancelTodo=function(){var t=this.editor,e=t.selection.getSelectionRangeTopNodes();(0,i.default)(e).call(e,(function(e){var n,r,o,i=null===(r=null===(n=e.childNodes())||void 0===n?void 0:n.childNodes())||void 0===r?void 0:r.clone(!0),a=s.default("<p></p>");a.append(i),a.insertAfter(e),null===(o=a.childNodes())||void 0===o||o.get(0).remove(),t.selection.moveCursor(a.getNode()),e.remove()}))},e}(l.default);e.default=d},function(t,e,n){t.exports=n(411)},function(t,e,n){var r=n(412);t.exports=r},function(t,e,n){var r=n(413),o=Array.prototype;t.exports=function(t){var e=t.every;return t===o||t instanceof Array&&e===o.every?r:e}},function(t,e,n){n(414);var r=n(15);t.exports=r("Array").every},function(t,e,n){"use strict";var r=n(5),o=n(32).every,i=n(67),a=n(22),s=i("every"),l=a("every");r({target:"Array",proto:!0,forced:!s||!l},{every:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var a=n(2),s=a.__importDefault(n(3)),l=n(98),u=a.__importDefault(n(140)),c=n(98),f=n(7);e.default=function(t){t.txt.eventHooks.enterDownEvents.push((function(e){var n,r;if(l.isAllTodo(t)){e.preventDefault();var o=t.selection,a=o.getSelectionRangeTopNodes()[0],d=null===(n=a.childNodes())||void 0===n?void 0:n.get(0),p=null===(r=window.getSelection())||void 0===r?void 0:r.anchorNode,h=o.getRange();if(!(null==h?void 0:h.collapsed)){var v=null==h?void 0:h.commonAncestorContainer.childNodes,m=null==h?void 0:h.startContainer,g=null==h?void 0:h.endContainer,A=null==h?void 0:h.startOffset,y=null==h?void 0:h.endOffset,w=0,b=0,_=[];null==v||(0,i.default)(v).call(v,(function(t,e){t.contains(m)&&(w=e),t.contains(g)&&(b=e)})),b-w>1&&(null==v||(0,i.default)(v).call(v,(function(t,e){e<=w||e>=b||_.push(t)})),(0,i.default)(_).call(_,(function(t){t.remove()}))),c.dealTextNode(m,A),c.dealTextNode(g,y,!1),t.selection.moveCursor(g,0)}if(""===a.text()){var x=s.default(f.EMPTY_P);return x.insertAfter(a),o.moveCursor(x.getNode()),void a.remove()}var E=o.getCursorPos(),S=l.getCursorNextNode(null==d?void 0:d.getNode(),p,E),T=u.default(s.default(S)),C=T.getInputContainer(),D=C.parent().getNode(),k=T.getTodo(),M=C.getNode().nextSibling;""===(null==d?void 0:d.text())&&(null==d||d.append(s.default("<br>"))),k.insertAfter(a),M&&""!==(null==M?void 0:M.textContent)?o.moveCursor(D):("BR"!==(null==M?void 0:M.nodeName)&&s.default("<br>").insertAfter(C),o.moveCursor(D,1))}})),t.txt.eventHooks.deleteUpEvents.push((function(){var e=t.selection.getSelectionRangeTopNodes()[0];e&&c.isTodo(e)&&""===e.text()&&(s.default(f.EMPTY_P).insertAfter(e),e.remove())})),t.txt.eventHooks.deleteDownEvents.push((function(e){var n,r;if(l.isAllTodo(t)){var o,a=t.selection,u=a.getSelectionRangeTopNodes()[0],c=null===(n=u.childNodes())||void 0===n?void 0:n.getNode(),d=s.default("<p></p>"),p=d.getNode(),h=null===(r=window.getSelection())||void 0===r?void 0:r.anchorNode,v=a.getCursorPos(),m=h.previousSibling;if(""===u.text()){e.preventDefault();var g=s.default(f.EMPTY_P);return g.insertAfter(u),u.remove(),void a.moveCursor(g.getNode(),0)}"SPAN"===(null==m?void 0:m.nodeName)&&"INPUT"===m.childNodes[0].nodeName&&0===v&&(e.preventDefault(),null==c||(0,i.default)(o=c.childNodes).call(o,(function(t,e){0!==e&&p.appendChild(t.cloneNode(!0))})),d.insertAfter(u),u.remove())}})),t.txt.eventHooks.clickEvents.push((function(t){t&&t.target instanceof HTMLInputElement&&"checkbox"===t.target.type&&(t.target.checked?t.target.setAttribute("checked","true"):t.target.removeAttribute("checked"))}))}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.selectorValidator=void 0;var r=n(2),o=r.__importDefault(n(3)),i=n(6),a=n(7),s=r.__importDefault(n(130)),l="1px solid #c9d8db";e.default=function(t){var e,n,r,u=t.toolbarSelector,c=o.default(u),f=t.textSelector,d=t.config.height,p=t.i18next,h=o.default("<div></div>"),v=o.default("<div></div>"),m=null;null==f?(n=c.children(),c.append(h).append(v),h.css("background-color","#FFF").css("border",l).css("border-bottom","1px solid #EEE"),v.css("border",l).css("border-top","none").css("height",d+"px")):(c.append(h),m=o.default(f).children(),o.default(f).append(v),n=v.children()),(e=o.default("<div></div>")).attr("contenteditable","true").css("width","100%").css("height","100%");var g=t.config.placeholder;(r=g!==s.default.placeholder?o.default("<div>"+g+"</div>"):o.default("<div>"+p.t(g)+"</div>")).addClass("placeholder"),n&&n.length?(e.append(n),r.hide()):e.append(o.default(a.EMPTY_P)),m&&m.length&&(e.append(m),r.hide()),v.append(e),v.append(r),h.addClass("w-e-toolbar").css("z-index",t.zIndex.get("toolbar")),v.addClass("w-e-text-container"),v.css("z-index",t.zIndex.get()),e.addClass("w-e-text");var A=i.getRandom("toolbar-elem");h.attr("id",A);var y=i.getRandom("text-elem");e.attr("id",y);var w=v.getBoundingClientRect().height;w!==e.getBoundingClientRect().height&&e.css("min-height",w+"px"),t.$toolbarElem=h,t.$textContainerElem=v,t.$textElem=e,t.toolbarElemId=A,t.textElemId=y},e.selectorValidator=function(t){var e="data-we-id",n=/^wangEditor-\d+$/,r=t.textSelector,i=t.toolbarSelector,a={bar:o.default("<div></div>"),text:o.default("<div></div>")};if(null==i)throw new Error("错误：初始化编辑器时候未传入任何参数，请查阅文档");if(a.bar=o.default(i),!a.bar.elems.length)throw new Error("无效的节点选择器："+i);if(n.test(a.bar.attr(e)))throw new Error("初始化节点已存在编辑器实例，无法重复创建编辑器");if(r){if(a.text=o.default(r),!a.text.elems.length)throw new Error("无效的节点选择器："+r);if(n.test(a.text.attr(e)))throw new Error("初始化节点已存在编辑器实例，无法重复创建编辑器")}a.bar.attr(e,t.id),a.text.attr(e,t.id),t.beforeDestroy((function(){a.bar.removeAttr(e),a.text.removeAttr(e)}))}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2).__importDefault(n(3)),o=n(7);e.default=function t(e,n){var i=e.$textElem,a=i.children();if(!a||!a.length)return i.append(r.default(o.EMPTY_P)),void t(e);var s=a.last();if(n){var l=s.html().toLowerCase(),u=s.getNodeName();if("<br>"!==l&&"<br/>"!==l||"P"!==u)return i.append(r.default(o.EMPTY_P)),void t(e)}e.selection.createRangeByElem(s,!1,!0),e.config.focus?e.selection.restoreSelection():e.selection.clearWindowSelectionRange()}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var a=n(2).__importDefault(n(3));function s(t){(0,t.config.onfocus)(t.txt.html()||"")}e.default=function(t){!function(t){t.txt.eventHooks.changeEvents.push((function(){var e=t.config.onchange;if(e){var n=t.txt.html()||"";t.isFocus=!0,e(n)}t.txt.togglePlaceholder()}))}(t),function(t){function e(e){var n=e.target,r=a.default(n),o=t.$textElem,l=t.$toolbarElem,u=o.isContain(r),c=l.isContain(r),f=l.elems[0]==e.target;if(u)t.isFocus||s(t),t.isFocus=!0;else{if(c&&!f||!t.isFocus)return;!function(t){var e,n=t.config.onblur,r=t.txt.html()||"";(0,i.default)(e=t.txt.eventHooks.onBlurEvents).call(e,(function(t){return t()})),n(r)}(t),t.isFocus=!1}}t.isFocus=!1,document.activeElement===t.$textElem.elems[0]&&t.config.focus&&(s(t),t.isFocus=!0),a.default(document).on("click",e),t.beforeDestroy((function(){a.default(document).off("click",e)}))}(t),function(t){t.$textElem.on("compositionstart",(function(){t.isComposing=!0,t.txt.togglePlaceholder()})).on("compositionend",(function(){t.isComposing=!1,t.txt.togglePlaceholder()}))}(t)}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0}),e.default=function(t){var e=t.config,n=e.lang,r=e.languages;if(null==t.i18next)t.i18next={t:function(t){var e=t.split(".");return e[e.length-1]}};else try{t.i18next.init({ns:"wangEditor",lng:n,defaultNS:"wangEditor",resources:r})}catch(t){throw new Error("i18next:"+t)}}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(29));(0,o.default)(e,"__esModule",{value:!0}),e.setUnFullScreen=e.setFullScreen=void 0;var a=n(2).__importDefault(n(3));n(421);var s="w-e-icon-fullscreen",l="w-e-icon-fullscreen_exit",u="w-e-full-screen-editor";e.setFullScreen=function(t){var e=a.default(t.toolbarSelector),n=t.$textContainerElem,r=t.$toolbarElem,o=(0,i.default)(r).call(r,"i."+s),c=t.config;o.removeClass(s),o.addClass(l),e.addClass(u),e.css("z-index",c.zIndexFullScreen);var f=r.getBoundingClientRect();n.css("height","calc(100% - "+f.height+"px)")},e.setUnFullScreen=function(t){var e=a.default(t.toolbarSelector),n=t.$textContainerElem,r=t.$toolbarElem,o=(0,i.default)(r).call(r,"i."+l),c=t.config;o.removeClass(l),o.addClass(s),e.removeClass(u),e.css("z-index","auto"),n.css("height",c.height+"px")},e.default=function(t){if(!t.textSelector&&t.config.showFullScreen){var n=t.$toolbarElem,r=a.default('<div class="w-e-menu" data-title="全屏">\n            <i class="'+s+'"></i>\n        </div>');r.on("click",(function(n){var o;(0,i.default)(o=a.default(n.currentTarget)).call(o,"i").hasClass(s)?(r.attr("data-title","取消全屏"),e.setFullScreen(t)):(r.attr("data-title","全屏"),e.setUnFullScreen(t))})),n.append(r)}}},function(t,e,n){var r=n(20),o=n(422);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);r(o,{insert:"head",singleton:!1}),t.exports=o.locals||{}},function(t,e,n){(e=n(21)(!1)).push([t.i,".w-e-full-screen-editor {\n  position: fixed;\n  width: 100%!important;\n  height: 100%!important;\n  left: 0;\n  top: 0;\n}\n",""]),t.exports=e},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(29));(0,o.default)(e,"__esModule",{value:!0}),e.default=function(t,e){var n,r=t.isEnable?t.$textElem:(0,i.default)(n=t.$textContainerElem).call(n,".w-e-content-mantle"),o=(0,i.default)(r).call(r,"[id='"+e+"']").getOffsetData().top;r.scrollTop(o)}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2).__importDefault(n(129)),o={menu:2,panel:2,toolbar:1,tooltip:1,textContainer:1},i=function(){function t(){this.tier=o,this.baseZIndex=r.default.zIndex}return t.prototype.get=function(t){return t&&this.tier[t]?this.baseZIndex+this.tier[t]:this.baseZIndex},t.prototype.init=function(t){this.baseZIndex==r.default.zIndex&&(this.baseZIndex=t.config.zIndex)},t}();e.default=i},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(70)),a=r(n(4));(0,o.default)(e,"__esModule",{value:!0});var s=n(2),l=s.__importDefault(n(426)),u=n(6),c=n(7),f=function(t){function e(e){var n=t.call(this,(function(t,r){var o;if(t=function(t,e){return(0,i.default)(t).call(t,(function(t){var n=t.type,r=t.target,o=t.attributeName;return"attributes"!=n||"attributes"==n&&("contenteditable"==o||r!=e)}))}(t,r.target),(o=n.data).push.apply(o,t),e.isCompatibleMode)n.asyncSave();else if(!e.isComposing)return n.asyncSave()}))||this;return n.editor=e,n.data=[],n.asyncSave=c.EMPTY_FN,n}return s.__extends(e,t),e.prototype.save=function(){this.data.length&&(this.editor.history.save(this.data),this.data.length=0,this.emit())},e.prototype.emit=function(){var t;(0,a.default)(t=this.editor.txt.eventHooks.changeEvents).call(t,(function(t){return t()}))},e.prototype.observe=function(){var e=this;t.prototype.observe.call(this,this.editor.$textElem.elems[0]);var n=this.editor.config.onchangeTimeout;this.asyncSave=u.debounce((function(){e.save()}),n),this.editor.isCompatibleMode||this.editor.$textElem.on("compositionend",(function(){e.asyncSave()}))},e}(l.default);e.default=f},function(t,e,n){"use strict";var r=n(0)(n(1));(0,r.default)(e,"__esModule",{value:!0});var o=function(){function t(t,e){var n=this;this.options={subtree:!0,childList:!0,attributes:!0,attributeOldValue:!0,characterData:!0,characterDataOldValue:!0},this.callback=function(e){t(e,n)},this.observer=new MutationObserver(this.callback),e&&(this.options=e)}return(0,r.default)(t.prototype,"target",{get:function(){return this.node},enumerable:!1,configurable:!0}),t.prototype.observe=function(t){this.node instanceof Node||(this.node=t,this.connect())},t.prototype.connect=function(){if(this.node)return this.observer.observe(this.node,this.options),this;throw new Error("还未初始化绑定，请您先绑定有效的 Node 节点")},t.prototype.disconnect=function(){var t=this.observer.takeRecords();t.length&&this.callback(t),this.observer.disconnect()},t}();e.default=o},function(t,e,n){"use strict";var r=n(0)(n(1));(0,r.default)(e,"__esModule",{value:!0});var o=n(2),i=o.__importDefault(n(428)),a=o.__importDefault(n(435)),s=o.__importDefault(n(436)),l=function(){function t(t){this.editor=t,this.content=new i.default(t),this.scroll=new a.default(t),this.range=new s.default(t)}return(0,r.default)(t.prototype,"size",{get:function(){return this.scroll.size},enumerable:!1,configurable:!0}),t.prototype.observe=function(){this.content.observe(),this.scroll.observe(),!this.editor.isCompatibleMode&&this.range.observe()},t.prototype.save=function(t){t.length&&(this.content.save(t),this.scroll.save(),!this.editor.isCompatibleMode&&this.range.save())},t.prototype.revoke=function(){this.editor.change.disconnect();var t=this.content.revoke();t&&(this.scroll.revoke(),this.editor.isCompatibleMode||(this.range.revoke(),this.editor.$textElem.focus())),this.editor.change.connect(),t&&this.editor.change.emit()},t.prototype.restore=function(){this.editor.change.disconnect();var t=this.content.restore();t&&(this.scroll.restore(),this.editor.isCompatibleMode||(this.range.restore(),this.editor.$textElem.focus())),this.editor.change.connect(),t&&this.editor.change.emit()},t}();e.default=l},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(429)),i=r.__importDefault(n(433)),a=function(){function t(t){this.editor=t}return t.prototype.observe=function(){this.editor.isCompatibleMode?this.cache=new i.default(this.editor):this.cache=new o.default(this.editor),this.cache.observe()},t.prototype.save=function(t){this.editor.isCompatibleMode?this.cache.save():this.cache.compile(t)},t.prototype.revoke=function(){var t;return null===(t=this.cache)||void 0===t?void 0:t.revoke()},t.prototype.restore=function(){var t;return null===(t=this.cache)||void 0===t?void 0:t.restore()},t}();e.default=a},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=r.__importDefault(n(99)),i=r.__importDefault(n(431)),a=n(432),s=function(t){function e(e){var n=t.call(this,e.config.historyMaxSize)||this;return n.editor=e,n}return r.__extends(e,t),e.prototype.observe=function(){this.resetMaxSize(this.editor.config.historyMaxSize)},e.prototype.compile=function(t){return this.save(i.default(t)),this},e.prototype.revoke=function(){return t.prototype.revoke.call(this,(function(t){a.revoke(t)}))},e.prototype.restore=function(){return t.prototype.restore.call(this,(function(t){a.restore(t)}))},e}(o.default);e.default=s},function(t,e,n){"use strict";var r=n(0)(n(1));(0,r.default)(e,"__esModule",{value:!0}),e.CeilStack=void 0;var o=function(){function t(t){void 0===t&&(t=0),this.data=[],this.max=0,this.reset=!1,(t=Math.abs(t))&&(this.max=t)}return t.prototype.resetMax=function(t){t=Math.abs(t),this.reset||isNaN(t)||(this.max=t,this.reset=!0)},(0,r.default)(t.prototype,"size",{get:function(){return this.data.length},enumerable:!1,configurable:!0}),t.prototype.instack=function(t){return this.data.unshift(t),this.max&&this.size>this.max&&(this.data.length=this.max),this},t.prototype.outstack=function(){return this.data.shift()},t.prototype.clear=function(){return this.data.length=0,this},t}();e.CeilStack=o},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4)),a=r(n(27));(0,o.default)(e,"__esModule",{value:!0}),e.compliePosition=e.complieNodes=e.compileValue=e.compileType=void 0;var s=n(6);function l(t){switch(t){case"childList":return"node";case"attributes":return"attr";default:return"text"}}function u(t){switch(t.type){case"attributes":return t.target.getAttribute(t.attributeName)||"";case"characterData":return t.target.textContent;default:return""}}function c(t){var e={};return t.addedNodes.length&&(e.add=s.toArray(t.addedNodes)),t.removedNodes.length&&(e.remove=s.toArray(t.removedNodes)),e}function f(t){return t.previousSibling?{type:"before",target:t.previousSibling}:t.nextSibling?{type:"after",target:t.nextSibling}:{type:"parent",target:t.target}}e.compileType=l,e.compileValue=u,e.complieNodes=c,e.compliePosition=f;var d=["UL","OL","H1","H2","H3","H4","H5","H6"];function p(t,e){for(var n=0,r=e.length-1;r>0&&t.contains(e[r]);r--)n++;return n}e.default=function(t){var e=[],n=!1,r=[];return(0,i.default)(t).call(t,(function(t,o){var i={type:l(t.type),target:t.target,attr:t.attributeName||"",value:u(t)||"",oldValue:t.oldValue||"",nodes:c(t),position:f(t)};if(e.push(i),s.UA.isFirefox){if(n&&t.addedNodes.length&&1==t.addedNodes[0].nodeType){var h=t.addedNodes[0],v={type:"node",target:h,attr:"",value:"",oldValue:"",nodes:{add:[n]},position:{type:"parent",target:h}};-1!=(0,a.default)(d).call(d,h.nodeName)?(v.nodes.add=s.toArray(h.childNodes),e.push(v)):3==n.nodeType?(p(h,r)&&(v.nodes.add=s.toArray(h.childNodes)),e.push(v)):-1==(0,a.default)(d).call(d,t.target.nodeName)&&p(h,r)&&(v.nodes.add=s.toArray(h.childNodes),e.push(v))}"node"==i.type&&1==t.removedNodes.length?(n=t.removedNodes[0],r.push(n)):(n=!1,r.length=0)}})),e}},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(4)),a=r(n(94));function s(t,e){var n=t.position.target;switch(t.position.type){case"before":n.nextSibling?(n=n.nextSibling,(0,i.default)(e).call(e,(function(e){t.target.insertBefore(e,n)}))):(0,i.default)(e).call(e,(function(e){t.target.appendChild(e)}));break;case"after":(0,i.default)(e).call(e,(function(e){t.target.insertBefore(e,n)}));break;default:(0,i.default)(e).call(e,(function(t){n.appendChild(t)}))}}(0,o.default)(e,"__esModule",{value:!0}),e.restore=e.revoke=void 0;var l={node:function(t){for(var e=0,n=(0,a.default)(t.nodes);e<n.length;e++){var r=n[e],o=r[0],l=r[1];"add"===o?(0,i.default)(l).call(l,(function(e){t.target.removeChild(e)})):s(t,l)}},text:function(t){t.target.textContent=t.oldValue},attr:function(t){var e=t.target;null==t.oldValue?e.removeAttribute(t.attr):e.setAttribute(t.attr,t.oldValue)}};e.revoke=function(t){for(var e=t.length-1;e>-1;e--){var n=t[e];l[n.type](n)}};var u={node:function(t){for(var e=0,n=(0,a.default)(t.nodes);e<n.length;e++){var r=n[e],o=r[0],l=r[1];"add"===o?s(t,l):(0,i.default)(l).call(l,(function(t){t.parentNode.removeChild(t)}))}},text:function(t){t.target.textContent=t.value},attr:function(t){t.target.setAttribute(t.attr,t.value)}};e.restore=function(t){for(var e=0,n=t;e<n.length;e++){var r=n[e];u[r.type](r)}}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(434),o=function(){function t(t){this.editor=t,this.data=new r.TailChain}return t.prototype.observe=function(){this.data.resetMax(this.editor.config.historyMaxSize),this.data.insertLast(this.editor.$textElem.html())},t.prototype.save=function(){return this.data.insertLast(this.editor.$textElem.html()),this},t.prototype.revoke=function(){var t=this.data.prev();return!!t&&(this.editor.$textElem.html(t),!0)},t.prototype.restore=function(){var t=this.data.next();return!!t&&(this.editor.$textElem.html(t),!0)},t}();e.default=o},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(91));(0,o.default)(e,"__esModule",{value:!0}),e.TailChain=void 0;var a=function(){function t(){this.data=[],this.max=0,this.point=0,this.isRe=!1}return t.prototype.resetMax=function(t){(t=Math.abs(t))&&(this.max=t)},(0,o.default)(t.prototype,"size",{get:function(){return this.data.length},enumerable:!1,configurable:!0}),t.prototype.insertLast=function(t){var e;for(this.isRe&&((0,i.default)(e=this.data).call(e,this.point+1),this.isRe=!1),this.data.push(t);this.max&&this.size>this.max;)this.data.shift();return this.point=this.size-1,this},t.prototype.current=function(){return this.data[this.point]},t.prototype.prev=function(){if(!this.isRe&&(this.isRe=!0),this.point--,!(this.point<0))return this.current();this.point=0},t.prototype.next=function(){if(!this.isRe&&(this.isRe=!0),this.point++,!(this.point>=this.size))return this.current();this.point=this.size-1},t}();e.TailChain=a},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=n(2),o=function(t){function e(e){var n=t.call(this,e.config.historyMaxSize)||this;return n.editor=e,n.last=0,n.target=e.$textElem.elems[0],n}return r.__extends(e,t),e.prototype.observe=function(){var t=this;this.target=this.editor.$textElem.elems[0],this.editor.$textElem.on("scroll",(function(){t.last=t.target.scrollTop})),this.resetMaxSize(this.editor.config.historyMaxSize)},e.prototype.save=function(){return t.prototype.save.call(this,[this.last,this.target.scrollTop]),this},e.prototype.revoke=function(){var e=this;return t.prototype.revoke.call(this,(function(t){e.target.scrollTop=t[0]}))},e.prototype.restore=function(){var e=this;return t.prototype.restore.call(this,(function(t){e.target.scrollTop=t[1]}))},e}(r.__importDefault(n(99)).default);e.default=o},function(t,e,n){"use strict";var r=n(0)(n(1));(0,r.default)(e,"__esModule",{value:!0});var o=n(2),i=o.__importDefault(n(99)),a=o.__importDefault(n(3)),s=n(6);function l(t){return{start:[t.startContainer,t.startOffset],end:[t.endContainer,t.endOffset],root:t.commonAncestorContainer,collapsed:t.collapsed}}var u=function(t){function e(e){var n=t.call(this,e.config.historyMaxSize)||this;return n.editor=e,n.lastRange=l(document.createRange()),n.root=e.$textElem.elems[0],n.updateLastRange=s.debounce((function(){n.lastRange=l(n.rangeHandle)}),e.config.onchangeTimeout),n}return o.__extends(e,t),(0,r.default)(e.prototype,"rangeHandle",{get:function(){var t=document.getSelection();return t&&t.rangeCount?t.getRangeAt(0):document.createRange()},enumerable:!1,configurable:!0}),e.prototype.observe=function(){var t=this;function e(){var e=t.rangeHandle;(t.root===e.commonAncestorContainer||t.root.contains(e.commonAncestorContainer))&&(t.editor.isComposing||t.updateLastRange())}this.root=this.editor.$textElem.elems[0],this.resetMaxSize(this.editor.config.historyMaxSize),a.default(document).on("selectionchange",e),this.editor.beforeDestroy((function(){a.default(document).off("selectionchange",e)})),t.editor.$textElem.on("keydown",(function(e){"Backspace"!=e.key&&"Delete"!=e.key||t.updateLastRange()}))},e.prototype.save=function(){var e=l(this.rangeHandle);return t.prototype.save.call(this,[this.lastRange,e]),this.lastRange=e,this},e.prototype.set=function(t){try{if(t){var e=this.rangeHandle;return e.setStart.apply(e,t.start),e.setEnd.apply(e,t.end),this.editor.menus.changeActive(),!0}}catch(t){return!1}return!1},e.prototype.revoke=function(){var e=this;return t.prototype.revoke.call(this,(function(t){e.set(t[0])}))},e.prototype.restore=function(){var e=this;return t.prototype.restore.call(this,(function(t){e.set(t[1])}))},e}(i.default);e.default=u},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(29));(0,o.default)(e,"__esModule",{value:!0});var a=n(2).__importDefault(n(3));n(438),e.default=function(t){var e,n,r=!1;return t.txt.eventHooks.changeEvents.push((function(){r&&(0,i.default)(e).call(e,".w-e-content-preview").html(t.$textElem.html())})),{disable:function(){if(!r){t.$textElem.hide();var o=t.zIndex.get("textContainer"),i=t.txt.html();e=a.default('<div class="w-e-content-mantle" style="z-index:'+o+'">\n                <div class="w-e-content-preview w-e-text">'+i+"</div>\n            </div>"),t.$textContainerElem.append(e);var s=t.zIndex.get("menu");n=a.default('<div class="w-e-menue-mantle" style="z-index:'+s+'"></div>'),t.$toolbarElem.append(n),r=!0,t.isEnable=!1}},enable:function(){r&&(e.remove(),n.remove(),t.$textElem.show(),r=!1,t.isEnable=!0)}}}},function(t,e,n){var r=n(20),o=n(439);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);r(o,{insert:"head",singleton:!1}),t.exports=o.locals||{}},function(t,e,n){(e=n(21)(!1)).push([t.i,".w-e-content-mantle {\n  width: 100%;\n  height: 100%;\n  overflow-y: auto;\n}\n.w-e-content-mantle .w-e-content-preview {\n  width: 100%;\n  min-height: 100%;\n  padding: 0 10px;\n  line-height: 1.5;\n}\n.w-e-content-mantle .w-e-content-preview img {\n  cursor: default;\n}\n.w-e-content-mantle .w-e-content-preview img:hover {\n  box-shadow: none;\n}\n.w-e-menue-mantle {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n}\n",""]),t.exports=e},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0});var r=function(){function t(t){var e=this;this.editor=t;var n=function(){document.activeElement===t.$textElem.elems[0]&&e.emit()};window.document.addEventListener("selectionchange",n),this.editor.beforeDestroy((function(){window.document.removeEventListener("selectionchange",n)}))}return t.prototype.emit=function(){var t,e=this.editor.config.onSelectionChange;if(e){var n=this.editor.selection;n.saveRange(),n.isSelectionEmpty()||e({text:n.getSelectionText(),html:null===(t=n.getSelectionContainerElem())||void 0===t?void 0:t.elems[0].innerHTML,selection:n})}},t}();e.default=r},function(t,e,n){"use strict";var r=n(0),o=r(n(1)),i=r(n(128)),a=r(n(94)),s=r(n(4));(0,o.default)(e,"__esModule",{value:!0}),e.registerPlugin=void 0;var l=n(2).__importDefault(n(87)),u=n(6);e.registerPlugin=function(t,e,n){if(!t)throw new TypeError("name is not define");if(!e)throw new TypeError("options is not define");if(!e.intention)throw new TypeError("options.intention is not define");if(e.intention&&"function"!=typeof e.intention)throw new TypeError("options.intention is not function");n[t]&&console.warn("plugin "+t+" 已存在，已覆盖。"),n[t]=e},e.default=function(t){var e=(0,i.default)({},u.deepClone(l.default.globalPluginsFunctionList),u.deepClone(t.pluginsFunctionList)),n=(0,a.default)(e);(0,s.default)(n).call(n,(function(e){var n=e[0],r=e[1];console.info("plugin "+n+" initializing");var o=r.intention,i=r.config;o(t,i),console.info("plugin "+n+" initialization complete")}))}},function(t,e,n){"use strict";(0,n(0)(n(1)).default)(e,"__esModule",{value:!0})}]).default},t.exports=e()}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var n=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t].call(n.exports,n,n.exports,__webpack_require__),n.exports}__webpack_require__.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=(t,e)=>{for(var n in e)__webpack_require__.o(e,n)&&!__webpack_require__.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var __webpack_exports__={};(()=>{"use strict";var t={};__webpack_require__.r(t),__webpack_require__.d(t,{hasBrowserEnv:()=>Ct,hasStandardBrowserEnv:()=>kt,hasStandardBrowserWebWorkerEnv:()=>Mt,navigator:()=>Dt,origin:()=>Nt});const e={login:{title:"登录",formType:"login",formData:[{label:"用户名",query:"username",type:"text",placeholder:"用户名: 2-8位 字母数字"},{label:"密码",query:"password",type:"password",placeholder:"密码: 6-12位 最少包含一位(数字/大小写字母)"}],btns:[{targetName:"close",name:"取消"},{targetName:"confirm",name:"提交",isSubmit:!0}]},register:{title:"注册",formType:"register",formData:[{label:"用户名",query:"username",type:"text",placeholder:"用户名: 6-8位 字母数字"},{label:"密码",query:"password",type:"password",placeholder:"密码: 8-12位 最少包含一位(数字/大小写字母)"},{label:"确认密码",query:"repassword",type:"password",placeholder:"重新输入密码"}],btns:[{targetName:"close",name:"取消"},{targetName:"confirm",name:"提交",isSubmit:!0}]}};var n=__webpack_require__(755),r=__webpack_require__.n(n),o=__webpack_require__(879),i=__webpack_require__.n(o),a=__webpack_require__(77),s=__webpack_require__.n(a);const l={modal:r(),user:i(),write:s()};class u{constructor({wrap:t="body",typeName:e="modal",data:n}={}){this.wrap=$(t),this.name=e,this.data=n}render(){this.wrap.html(this.getHtml())}getHtml(){return l[this.name](this.data)}static render(t,e){return l[t](e)}}class c{constructor({modalWarp:t=$(".blog-modal"),modalType:e}){this.modalWarp=t,this.modalType=e,this.html=""}open(){let t=e[this.modalType];this.html=u.render("modal",t),this.#t()}close(){this.#e()}confirm(){this.modalWarp.find("form")[0]?.submit()}#t(){this.#n(),this.modalWarp.removeAttr("hidden"),this.modalWarp.html(this.html).show()}#n(){this.modalWarp.html("")}#e(){this.modalWarp.hide(),this.modalWarp.attr("hidden",!0)}}const f={register:["username","password","repassword"],login:["username","password"]},d={username:{rules:"required|regexp_username",regexp_username:/^(?!\d+$)(?![a-zA-Z]+$)[a-zA-Z0-9]{2,8}$/,display:"用户名格式：数字+字母，2-8位"},password:{rules:"required|regexp_pwd",regexp_pwd:/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d!.#*?&]{6,12}$/,display:"密码格式：数字+大写字母+小写字母，6-12位"},repassword:{rules:"required|same(password)",display:"密码不一致"}};var p=__webpack_require__(202),h=__webpack_require__.n(p);class v{constructor(t){return this.formType=t,this.generateValidator()}generateValidator(){let t=this.toFormRules();return new Promise(((e,n)=>{new(h())(this.formType,t,((t,r)=>{if(0===t.errors.length){let n=Object.entries(t.fields).reduce(((t,[e,n])=>(t[e]=n.value,t)),{});e(n)}else $("[data-display]").removeAttr("data-error-msg"),$(t.errors[0].element).focus(),t.errors.forEach((({element:t,display:e})=>{$(t).parent().attr("data-error-msg",e)})),n(t.errors)})).validate()}))}toFormRules(){return f[this.formType].map((t=>({name:t,...d[t]})))}}class m{constructor(t){this.wrap=t,this.startPosition={x:0,y:0,DOMLeft:0,DOMTop:0},this.init()}init(){this.keydown=!1;let t=this.wrap.offsetLeft,e=this.wrap.offsetTop;this.wrap.style.margin=0,this.wrap.style.left=t+"px",this.wrap.style.top=e+"px",this.startPosition.DOMLeft=t,this.startPosition.DOMTop=e,this.wrap.style.position="absolute",this.parentPosition={left:this.wrap.offsetParent.offsetLeft,right:this.wrap.offsetParent.offsetLeft+this.wrap.offsetParent.offsetWidth,top:this.wrap.offsetParent.offsetTop,bottom:this.wrap.offsetParent.offsetHeight},this.wrap.querySelector("[data-drag = 'true']").style.cursor="pointer",this.wrap.querySelector("[data-drag = 'true']").addEventListener("mousedown",this.dragEvent.bind(this),!1),document.addEventListener("mousemove",this.dragEvent.bind(this),!1),document.addEventListener("mouseup",this.dragEvent.bind(this),!1)}dragEvent(t){t.preventDefault(),this[t.type]&&this[t.type](t)}mousedown(t){this.startPosition.x=t.clientX,this.startPosition.y=t.clientY,this.keydown=!0}mousemove(t){if(this.keydown){var e=this.startPosition.DOMLeft+(t.clientX-this.startPosition.x),n=this.startPosition.DOMTop+(t.clientY-this.startPosition.y),r=this.wrap.offsetParent.offsetWidth-this.wrap.offsetWidth,o=this.wrap.offsetParent.offsetHeight-this.wrap.offsetHeight;e=Math.max(0,e),e=Math.min(r,e),n=Math.max(0,n),n=Math.min(o,n),this.wrap.style.left=e+"px",this.wrap.style.top=n+"px",(t.clientX<this.parentPosition.left||t.clientY<this.parentPosition.top||t.clientX>this.parentPosition.right||t.clientY>this.parentPosition.bottom)&&(this.keydown=!1,this.startPosition.DOMLeft=this.wrap.offsetLeft,this.startPosition.DOMTop=this.wrap.offsetTop)}}mouseup(t){this.keydown&&(this.startPosition.DOMLeft=this.wrap.offsetLeft,this.startPosition.DOMTop=this.wrap.offsetTop,this.keydown=!1)}}function g(t,e){return function(){return t.apply(e,arguments)}}const{toString:A}=Object.prototype,{getPrototypeOf:y}=Object,w=(b=Object.create(null),t=>{const e=A.call(t);return b[e]||(b[e]=e.slice(8,-1).toLowerCase())});var b;const _=t=>(t=t.toLowerCase(),e=>w(e)===t),x=t=>e=>typeof e===t,{isArray:E}=Array,S=x("undefined"),T=_("ArrayBuffer"),C=x("string"),D=x("function"),k=x("number"),M=t=>null!==t&&"object"==typeof t,N=t=>{if("object"!==w(t))return!1;const e=y(t);return!(null!==e&&e!==Object.prototype&&null!==Object.getPrototypeOf(e)||Symbol.toStringTag in t||Symbol.iterator in t)},R=_("Date"),B=_("File"),P=_("Blob"),O=_("FileList"),I=_("URLSearchParams"),[L,H,F,j]=["ReadableStream","Request","Response","Headers"].map(_);function U(t,e,{allOwnKeys:n=!1}={}){if(null==t)return;let r,o;if("object"!=typeof t&&(t=[t]),E(t))for(r=0,o=t.length;r<o;r++)e.call(null,t[r],r,t);else{const o=n?Object.getOwnPropertyNames(t):Object.keys(t),i=o.length;let a;for(r=0;r<i;r++)a=o[r],e.call(null,t[a],a,t)}}function V(t,e){e=e.toLowerCase();const n=Object.keys(t);let r,o=n.length;for(;o-- >0;)if(r=n[o],e===r.toLowerCase())return r;return null}const Q="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,z=t=>!S(t)&&t!==Q,Y=(q="undefined"!=typeof Uint8Array&&y(Uint8Array),t=>q&&t instanceof q);var q;const G=_("HTMLFormElement"),J=(({hasOwnProperty:t})=>(e,n)=>t.call(e,n))(Object.prototype),K=_("RegExp"),W=(t,e)=>{const n=Object.getOwnPropertyDescriptors(t),r={};U(n,((n,o)=>{let i;!1!==(i=e(n,o,t))&&(r[o]=i||n)})),Object.defineProperties(t,r)},X="abcdefghijklmnopqrstuvwxyz",Z="0123456789",tt={DIGIT:Z,ALPHA:X,ALPHA_DIGIT:X+X.toUpperCase()+Z},et=_("AsyncFunction"),nt=(rt="function"==typeof setImmediate,ot=D(Q.postMessage),rt?setImmediate:ot?(it=`axios@${Math.random()}`,at=[],Q.addEventListener("message",(({source:t,data:e})=>{t===Q&&e===it&&at.length&&at.shift()()}),!1),t=>{at.push(t),Q.postMessage(it,"*")}):t=>setTimeout(t));var rt,ot,it,at;const st="undefined"!=typeof queueMicrotask?queueMicrotask.bind(Q):"undefined"!=typeof process&&process.nextTick||nt,lt={isArray:E,isArrayBuffer:T,isBuffer:function(t){return null!==t&&!S(t)&&null!==t.constructor&&!S(t.constructor)&&D(t.constructor.isBuffer)&&t.constructor.isBuffer(t)},isFormData:t=>{let e;return t&&("function"==typeof FormData&&t instanceof FormData||D(t.append)&&("formdata"===(e=w(t))||"object"===e&&D(t.toString)&&"[object FormData]"===t.toString()))},isArrayBufferView:function(t){let e;return e="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&T(t.buffer),e},isString:C,isNumber:k,isBoolean:t=>!0===t||!1===t,isObject:M,isPlainObject:N,isReadableStream:L,isRequest:H,isResponse:F,isHeaders:j,isUndefined:S,isDate:R,isFile:B,isBlob:P,isRegExp:K,isFunction:D,isStream:t=>M(t)&&D(t.pipe),isURLSearchParams:I,isTypedArray:Y,isFileList:O,forEach:U,merge:function t(){const{caseless:e}=z(this)&&this||{},n={},r=(r,o)=>{const i=e&&V(n,o)||o;N(n[i])&&N(r)?n[i]=t(n[i],r):N(r)?n[i]=t({},r):E(r)?n[i]=r.slice():n[i]=r};for(let t=0,e=arguments.length;t<e;t++)arguments[t]&&U(arguments[t],r);return n},extend:(t,e,n,{allOwnKeys:r}={})=>(U(e,((e,r)=>{n&&D(e)?t[r]=g(e,n):t[r]=e}),{allOwnKeys:r}),t),trim:t=>t.trim?t.trim():t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:t=>(65279===t.charCodeAt(0)&&(t=t.slice(1)),t),inherits:(t,e,n,r)=>{t.prototype=Object.create(e.prototype,r),t.prototype.constructor=t,Object.defineProperty(t,"super",{value:e.prototype}),n&&Object.assign(t.prototype,n)},toFlatObject:(t,e,n,r)=>{let o,i,a;const s={};if(e=e||{},null==t)return e;do{for(o=Object.getOwnPropertyNames(t),i=o.length;i-- >0;)a=o[i],r&&!r(a,t,e)||s[a]||(e[a]=t[a],s[a]=!0);t=!1!==n&&y(t)}while(t&&(!n||n(t,e))&&t!==Object.prototype);return e},kindOf:w,kindOfTest:_,endsWith:(t,e,n)=>{t=String(t),(void 0===n||n>t.length)&&(n=t.length),n-=e.length;const r=t.indexOf(e,n);return-1!==r&&r===n},toArray:t=>{if(!t)return null;if(E(t))return t;let e=t.length;if(!k(e))return null;const n=new Array(e);for(;e-- >0;)n[e]=t[e];return n},forEachEntry:(t,e)=>{const n=(t&&t[Symbol.iterator]).call(t);let r;for(;(r=n.next())&&!r.done;){const n=r.value;e.call(t,n[0],n[1])}},matchAll:(t,e)=>{let n;const r=[];for(;null!==(n=t.exec(e));)r.push(n);return r},isHTMLForm:G,hasOwnProperty:J,hasOwnProp:J,reduceDescriptors:W,freezeMethods:t=>{W(t,((e,n)=>{if(D(t)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=t[n];D(r)&&(e.enumerable=!1,"writable"in e?e.writable=!1:e.set||(e.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(t,e)=>{const n={},r=t=>{t.forEach((t=>{n[t]=!0}))};return E(t)?r(t):r(String(t).split(e)),n},toCamelCase:t=>t.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(t,e,n){return e.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(t,e)=>null!=t&&Number.isFinite(t=+t)?t:e,findKey:V,global:Q,isContextDefined:z,ALPHABET:tt,generateString:(t=16,e=tt.ALPHA_DIGIT)=>{let n="";const{length:r}=e;for(;t--;)n+=e[Math.random()*r|0];return n},isSpecCompliantForm:function(t){return!!(t&&D(t.append)&&"FormData"===t[Symbol.toStringTag]&&t[Symbol.iterator])},toJSONObject:t=>{const e=new Array(10),n=(t,r)=>{if(M(t)){if(e.indexOf(t)>=0)return;if(!("toJSON"in t)){e[r]=t;const o=E(t)?[]:{};return U(t,((t,e)=>{const i=n(t,r+1);!S(i)&&(o[e]=i)})),e[r]=void 0,o}}return t};return n(t,0)},isAsyncFn:et,isThenable:t=>t&&(M(t)||D(t))&&D(t.then)&&D(t.catch),setImmediate:nt,asap:st};function ut(t,e,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=t,this.name="AxiosError",e&&(this.code=e),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o,this.status=o.status?o.status:null)}lt.inherits(ut,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:lt.toJSONObject(this.config),code:this.code,status:this.status}}});const ct=ut.prototype,ft={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((t=>{ft[t]={value:t}})),Object.defineProperties(ut,ft),Object.defineProperty(ct,"isAxiosError",{value:!0}),ut.from=(t,e,n,r,o,i)=>{const a=Object.create(ct);return lt.toFlatObject(t,a,(function(t){return t!==Error.prototype}),(t=>"isAxiosError"!==t)),ut.call(a,t.message,e,n,r,o),a.cause=t,a.name=t.name,i&&Object.assign(a,i),a};const dt=ut;function pt(t){return lt.isPlainObject(t)||lt.isArray(t)}function ht(t){return lt.endsWith(t,"[]")?t.slice(0,-2):t}function vt(t,e,n){return t?t.concat(e).map((function(t,e){return t=ht(t),!n&&e?"["+t+"]":t})).join(n?".":""):e}const mt=lt.toFlatObject(lt,{},null,(function(t){return/^is[A-Z]/.test(t)})),gt=function(t,e,n){if(!lt.isObject(t))throw new TypeError("target must be an object");e=e||new FormData;const r=(n=lt.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(t,e){return!lt.isUndefined(e[t])}))).metaTokens,o=n.visitor||u,i=n.dots,a=n.indexes,s=(n.Blob||"undefined"!=typeof Blob&&Blob)&&lt.isSpecCompliantForm(e);if(!lt.isFunction(o))throw new TypeError("visitor must be a function");function l(t){if(null===t)return"";if(lt.isDate(t))return t.toISOString();if(!s&&lt.isBlob(t))throw new dt("Blob is not supported. Use a Buffer instead.");return lt.isArrayBuffer(t)||lt.isTypedArray(t)?s&&"function"==typeof Blob?new Blob([t]):Buffer.from(t):t}function u(t,n,o){let s=t;if(t&&!o&&"object"==typeof t)if(lt.endsWith(n,"{}"))n=r?n:n.slice(0,-2),t=JSON.stringify(t);else if(lt.isArray(t)&&function(t){return lt.isArray(t)&&!t.some(pt)}(t)||(lt.isFileList(t)||lt.endsWith(n,"[]"))&&(s=lt.toArray(t)))return n=ht(n),s.forEach((function(t,r){!lt.isUndefined(t)&&null!==t&&e.append(!0===a?vt([n],r,i):null===a?n:n+"[]",l(t))})),!1;return!!pt(t)||(e.append(vt(o,n,i),l(t)),!1)}const c=[],f=Object.assign(mt,{defaultVisitor:u,convertValue:l,isVisitable:pt});if(!lt.isObject(t))throw new TypeError("data must be an object");return function t(n,r){if(!lt.isUndefined(n)){if(-1!==c.indexOf(n))throw Error("Circular reference detected in "+r.join("."));c.push(n),lt.forEach(n,(function(n,i){!0===(!(lt.isUndefined(n)||null===n)&&o.call(e,n,lt.isString(i)?i.trim():i,r,f))&&t(n,r?r.concat(i):[i])})),c.pop()}}(t),e};function At(t){const e={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(t).replace(/[!'()~]|%20|%00/g,(function(t){return e[t]}))}function yt(t,e){this._pairs=[],t&&gt(t,this,e)}const wt=yt.prototype;wt.append=function(t,e){this._pairs.push([t,e])},wt.toString=function(t){const e=t?function(e){return t.call(this,e,At)}:At;return this._pairs.map((function(t){return e(t[0])+"="+e(t[1])}),"").join("&")};const bt=yt;function _t(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function xt(t,e,n){if(!e)return t;const r=n&&n.encode||_t,o=n&&n.serialize;let i;if(i=o?o(e,n):lt.isURLSearchParams(e)?e.toString():new bt(e,n).toString(r),i){const e=t.indexOf("#");-1!==e&&(t=t.slice(0,e)),t+=(-1===t.indexOf("?")?"?":"&")+i}return t}const Et=class{constructor(){this.handlers=[]}use(t,e,n){return this.handlers.push({fulfilled:t,rejected:e,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){lt.forEach(this.handlers,(function(e){null!==e&&t(e)}))}},St={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Tt={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:bt,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},Ct="undefined"!=typeof window&&"undefined"!=typeof document,Dt="object"==typeof navigator&&navigator||void 0,kt=Ct&&(!Dt||["ReactNative","NativeScript","NS"].indexOf(Dt.product)<0),Mt="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,Nt=Ct&&window.location.href||"http://localhost",Rt={...t,...Tt},Bt=function(t){function e(t,n,r,o){let i=t[o++];if("__proto__"===i)return!0;const a=Number.isFinite(+i),s=o>=t.length;return i=!i&&lt.isArray(r)?r.length:i,s?(lt.hasOwnProp(r,i)?r[i]=[r[i],n]:r[i]=n,!a):(r[i]&&lt.isObject(r[i])||(r[i]=[]),e(t,n,r[i],o)&&lt.isArray(r[i])&&(r[i]=function(t){const e={},n=Object.keys(t);let r;const o=n.length;let i;for(r=0;r<o;r++)i=n[r],e[i]=t[i];return e}(r[i])),!a)}if(lt.isFormData(t)&&lt.isFunction(t.entries)){const n={};return lt.forEachEntry(t,((t,r)=>{e(function(t){return lt.matchAll(/\w+|\[(\w*)]/g,t).map((t=>"[]"===t[0]?"":t[1]||t[0]))}(t),r,n,0)})),n}return null},Pt={transitional:St,adapter:["xhr","http","fetch"],transformRequest:[function(t,e){const n=e.getContentType()||"",r=n.indexOf("application/json")>-1,o=lt.isObject(t);if(o&&lt.isHTMLForm(t)&&(t=new FormData(t)),lt.isFormData(t))return r?JSON.stringify(Bt(t)):t;if(lt.isArrayBuffer(t)||lt.isBuffer(t)||lt.isStream(t)||lt.isFile(t)||lt.isBlob(t)||lt.isReadableStream(t))return t;if(lt.isArrayBufferView(t))return t.buffer;if(lt.isURLSearchParams(t))return e.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let i;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(t,e){return gt(t,new Rt.classes.URLSearchParams,Object.assign({visitor:function(t,e,n,r){return Rt.isNode&&lt.isBuffer(t)?(this.append(e,t.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},e))}(t,this.formSerializer).toString();if((i=lt.isFileList(t))||n.indexOf("multipart/form-data")>-1){const e=this.env&&this.env.FormData;return gt(i?{"files[]":t}:t,e&&new e,this.formSerializer)}}return o||r?(e.setContentType("application/json",!1),function(t){if(lt.isString(t))try{return(0,JSON.parse)(t),lt.trim(t)}catch(t){if("SyntaxError"!==t.name)throw t}return(0,JSON.stringify)(t)}(t)):t}],transformResponse:[function(t){const e=this.transitional||Pt.transitional,n=e&&e.forcedJSONParsing,r="json"===this.responseType;if(lt.isResponse(t)||lt.isReadableStream(t))return t;if(t&&lt.isString(t)&&(n&&!this.responseType||r)){const n=!(e&&e.silentJSONParsing)&&r;try{return JSON.parse(t)}catch(t){if(n){if("SyntaxError"===t.name)throw dt.from(t,dt.ERR_BAD_RESPONSE,this,null,this.response);throw t}}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Rt.classes.FormData,Blob:Rt.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};lt.forEach(["delete","get","head","post","put","patch"],(t=>{Pt.headers[t]={}}));const Ot=Pt,It=lt.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Lt=Symbol("internals");function Ht(t){return t&&String(t).trim().toLowerCase()}function Ft(t){return!1===t||null==t?t:lt.isArray(t)?t.map(Ft):String(t)}function jt(t,e,n,r,o){return lt.isFunction(r)?r.call(this,e,n):(o&&(e=n),lt.isString(e)?lt.isString(r)?-1!==e.indexOf(r):lt.isRegExp(r)?r.test(e):void 0:void 0)}class Ut{constructor(t){t&&this.set(t)}set(t,e,n){const r=this;function o(t,e,n){const o=Ht(e);if(!o)throw new Error("header name must be a non-empty string");const i=lt.findKey(r,o);(!i||void 0===r[i]||!0===n||void 0===n&&!1!==r[i])&&(r[i||e]=Ft(t))}const i=(t,e)=>lt.forEach(t,((t,n)=>o(t,n,e)));if(lt.isPlainObject(t)||t instanceof this.constructor)i(t,e);else if(lt.isString(t)&&(t=t.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(t.trim()))i((t=>{const e={};let n,r,o;return t&&t.split("\n").forEach((function(t){o=t.indexOf(":"),n=t.substring(0,o).trim().toLowerCase(),r=t.substring(o+1).trim(),!n||e[n]&&It[n]||("set-cookie"===n?e[n]?e[n].push(r):e[n]=[r]:e[n]=e[n]?e[n]+", "+r:r)})),e})(t),e);else if(lt.isHeaders(t))for(const[e,r]of t.entries())o(r,e,n);else null!=t&&o(e,t,n);return this}get(t,e){if(t=Ht(t)){const n=lt.findKey(this,t);if(n){const t=this[n];if(!e)return t;if(!0===e)return function(t){const e=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(t);)e[r[1]]=r[2];return e}(t);if(lt.isFunction(e))return e.call(this,t,n);if(lt.isRegExp(e))return e.exec(t);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,e){if(t=Ht(t)){const n=lt.findKey(this,t);return!(!n||void 0===this[n]||e&&!jt(0,this[n],n,e))}return!1}delete(t,e){const n=this;let r=!1;function o(t){if(t=Ht(t)){const o=lt.findKey(n,t);!o||e&&!jt(0,n[o],o,e)||(delete n[o],r=!0)}}return lt.isArray(t)?t.forEach(o):o(t),r}clear(t){const e=Object.keys(this);let n=e.length,r=!1;for(;n--;){const o=e[n];t&&!jt(0,this[o],o,t,!0)||(delete this[o],r=!0)}return r}normalize(t){const e=this,n={};return lt.forEach(this,((r,o)=>{const i=lt.findKey(n,o);if(i)return e[i]=Ft(r),void delete e[o];const a=t?function(t){return t.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((t,e,n)=>e.toUpperCase()+n))}(o):String(o).trim();a!==o&&delete e[o],e[a]=Ft(r),n[a]=!0})),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){const e=Object.create(null);return lt.forEach(this,((n,r)=>{null!=n&&!1!==n&&(e[r]=t&&lt.isArray(n)?n.join(", "):n)})),e}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([t,e])=>t+": "+e)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...e){const n=new this(t);return e.forEach((t=>n.set(t))),n}static accessor(t){const e=(this[Lt]=this[Lt]={accessors:{}}).accessors,n=this.prototype;function r(t){const r=Ht(t);e[r]||(function(t,e){const n=lt.toCamelCase(" "+e);["get","set","has"].forEach((r=>{Object.defineProperty(t,r+n,{value:function(t,n,o){return this[r].call(this,e,t,n,o)},configurable:!0})}))}(n,t),e[r]=!0)}return lt.isArray(t)?t.forEach(r):r(t),this}}Ut.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),lt.reduceDescriptors(Ut.prototype,(({value:t},e)=>{let n=e[0].toUpperCase()+e.slice(1);return{get:()=>t,set(t){this[n]=t}}})),lt.freezeMethods(Ut);const Vt=Ut;function Qt(t,e){const n=this||Ot,r=e||n,o=Vt.from(r.headers);let i=r.data;return lt.forEach(t,(function(t){i=t.call(n,i,o.normalize(),e?e.status:void 0)})),o.normalize(),i}function zt(t){return!(!t||!t.__CANCEL__)}function Yt(t,e,n){dt.call(this,null==t?"canceled":t,dt.ERR_CANCELED,e,n),this.name="CanceledError"}lt.inherits(Yt,dt,{__CANCEL__:!0});const qt=Yt;function $t(t,e,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?e(new dt("Request failed with status code "+n.status,[dt.ERR_BAD_REQUEST,dt.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):t(n)}const Gt=(t,e,n=3)=>{let r=0;const o=function(t,e){t=t||10;const n=new Array(t),r=new Array(t);let o,i=0,a=0;return e=void 0!==e?e:1e3,function(s){const l=Date.now(),u=r[a];o||(o=l),n[i]=s,r[i]=l;let c=a,f=0;for(;c!==i;)f+=n[c++],c%=t;if(i=(i+1)%t,i===a&&(a=(a+1)%t),l-o<e)return;const d=u&&l-u;return d?Math.round(1e3*f/d):void 0}}(50,250);return function(t,e){let n,r,o=0,i=1e3/e;const a=(e,i=Date.now())=>{o=i,n=null,r&&(clearTimeout(r),r=null),t.apply(null,e)};return[(...t)=>{const e=Date.now(),s=e-o;s>=i?a(t,e):(n=t,r||(r=setTimeout((()=>{r=null,a(n)}),i-s)))},()=>n&&a(n)]}((n=>{const i=n.loaded,a=n.lengthComputable?n.total:void 0,s=i-r,l=o(s);r=i,t({loaded:i,total:a,progress:a?i/a:void 0,bytes:s,rate:l||void 0,estimated:l&&a&&i<=a?(a-i)/l:void 0,event:n,lengthComputable:null!=a,[e?"download":"upload"]:!0})}),n)},Jt=(t,e)=>{const n=null!=t;return[r=>e[0]({lengthComputable:n,total:t,loaded:r}),e[1]]},Kt=t=>(...e)=>lt.asap((()=>t(...e))),Wt=Rt.hasStandardBrowserEnv?function(){const t=Rt.navigator&&/(msie|trident)/i.test(Rt.navigator.userAgent),e=document.createElement("a");let n;function r(n){let r=n;return t&&(e.setAttribute("href",r),r=e.href),e.setAttribute("href",r),{href:e.href,protocol:e.protocol?e.protocol.replace(/:$/,""):"",host:e.host,search:e.search?e.search.replace(/^\?/,""):"",hash:e.hash?e.hash.replace(/^#/,""):"",hostname:e.hostname,port:e.port,pathname:"/"===e.pathname.charAt(0)?e.pathname:"/"+e.pathname}}return n=r(window.location.href),function(t){const e=lt.isString(t)?r(t):t;return e.protocol===n.protocol&&e.host===n.host}}():function(){return!0},Xt=Rt.hasStandardBrowserEnv?{write(t,e,n,r,o,i){const a=[t+"="+encodeURIComponent(e)];lt.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),lt.isString(r)&&a.push("path="+r),lt.isString(o)&&a.push("domain="+o),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read(t){const e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove(t){this.write(t,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function Zt(t,e){return t&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)?function(t,e){return e?t.replace(/\/?\/$/,"")+"/"+e.replace(/^\/+/,""):t}(t,e):e}const te=t=>t instanceof Vt?{...t}:t;function ee(t,e){e=e||{};const n={};function r(t,e,n){return lt.isPlainObject(t)&&lt.isPlainObject(e)?lt.merge.call({caseless:n},t,e):lt.isPlainObject(e)?lt.merge({},e):lt.isArray(e)?e.slice():e}function o(t,e,n){return lt.isUndefined(e)?lt.isUndefined(t)?void 0:r(void 0,t,n):r(t,e,n)}function i(t,e){if(!lt.isUndefined(e))return r(void 0,e)}function a(t,e){return lt.isUndefined(e)?lt.isUndefined(t)?void 0:r(void 0,t):r(void 0,e)}function s(n,o,i){return i in e?r(n,o):i in t?r(void 0,n):void 0}const l={url:i,method:i,data:i,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,withXSRFToken:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:s,headers:(t,e)=>o(te(t),te(e),!0)};return lt.forEach(Object.keys(Object.assign({},t,e)),(function(r){const i=l[r]||o,a=i(t[r],e[r],r);lt.isUndefined(a)&&i!==s||(n[r]=a)})),n}const ne=t=>{const e=ee({},t);let n,{data:r,withXSRFToken:o,xsrfHeaderName:i,xsrfCookieName:a,headers:s,auth:l}=e;if(e.headers=s=Vt.from(s),e.url=xt(Zt(e.baseURL,e.url),t.params,t.paramsSerializer),l&&s.set("Authorization","Basic "+btoa((l.username||"")+":"+(l.password?unescape(encodeURIComponent(l.password)):""))),lt.isFormData(r))if(Rt.hasStandardBrowserEnv||Rt.hasStandardBrowserWebWorkerEnv)s.setContentType(void 0);else if(!1!==(n=s.getContentType())){const[t,...e]=n?n.split(";").map((t=>t.trim())).filter(Boolean):[];s.setContentType([t||"multipart/form-data",...e].join("; "))}if(Rt.hasStandardBrowserEnv&&(o&&lt.isFunction(o)&&(o=o(e)),o||!1!==o&&Wt(e.url))){const t=i&&a&&Xt.read(a);t&&s.set(i,t)}return e},re="undefined"!=typeof XMLHttpRequest&&function(t){return new Promise((function(e,n){const r=ne(t);let o=r.data;const i=Vt.from(r.headers).normalize();let a,s,l,u,c,{responseType:f,onUploadProgress:d,onDownloadProgress:p}=r;function h(){u&&u(),c&&c(),r.cancelToken&&r.cancelToken.unsubscribe(a),r.signal&&r.signal.removeEventListener("abort",a)}let v=new XMLHttpRequest;function m(){if(!v)return;const r=Vt.from("getAllResponseHeaders"in v&&v.getAllResponseHeaders());$t((function(t){e(t),h()}),(function(t){n(t),h()}),{data:f&&"text"!==f&&"json"!==f?v.response:v.responseText,status:v.status,statusText:v.statusText,headers:r,config:t,request:v}),v=null}v.open(r.method.toUpperCase(),r.url,!0),v.timeout=r.timeout,"onloadend"in v?v.onloadend=m:v.onreadystatechange=function(){v&&4===v.readyState&&(0!==v.status||v.responseURL&&0===v.responseURL.indexOf("file:"))&&setTimeout(m)},v.onabort=function(){v&&(n(new dt("Request aborted",dt.ECONNABORTED,t,v)),v=null)},v.onerror=function(){n(new dt("Network Error",dt.ERR_NETWORK,t,v)),v=null},v.ontimeout=function(){let e=r.timeout?"timeout of "+r.timeout+"ms exceeded":"timeout exceeded";const o=r.transitional||St;r.timeoutErrorMessage&&(e=r.timeoutErrorMessage),n(new dt(e,o.clarifyTimeoutError?dt.ETIMEDOUT:dt.ECONNABORTED,t,v)),v=null},void 0===o&&i.setContentType(null),"setRequestHeader"in v&&lt.forEach(i.toJSON(),(function(t,e){v.setRequestHeader(e,t)})),lt.isUndefined(r.withCredentials)||(v.withCredentials=!!r.withCredentials),f&&"json"!==f&&(v.responseType=r.responseType),p&&([l,c]=Gt(p,!0),v.addEventListener("progress",l)),d&&v.upload&&([s,u]=Gt(d),v.upload.addEventListener("progress",s),v.upload.addEventListener("loadend",u)),(r.cancelToken||r.signal)&&(a=e=>{v&&(n(!e||e.type?new qt(null,t,v):e),v.abort(),v=null)},r.cancelToken&&r.cancelToken.subscribe(a),r.signal&&(r.signal.aborted?a():r.signal.addEventListener("abort",a)));const g=function(t){const e=/^([-+\w]{1,25})(:?\/\/|:)/.exec(t);return e&&e[1]||""}(r.url);g&&-1===Rt.protocols.indexOf(g)?n(new dt("Unsupported protocol "+g+":",dt.ERR_BAD_REQUEST,t)):v.send(o||null)}))},oe=(t,e)=>{const{length:n}=t=t?t.filter(Boolean):[];if(e||n){let n,r=new AbortController;const o=function(t){if(!n){n=!0,a();const e=t instanceof Error?t:this.reason;r.abort(e instanceof dt?e:new qt(e instanceof Error?e.message:e))}};let i=e&&setTimeout((()=>{i=null,o(new dt(`timeout ${e} of ms exceeded`,dt.ETIMEDOUT))}),e);const a=()=>{t&&(i&&clearTimeout(i),i=null,t.forEach((t=>{t.unsubscribe?t.unsubscribe(o):t.removeEventListener("abort",o)})),t=null)};t.forEach((t=>t.addEventListener("abort",o)));const{signal:s}=r;return s.unsubscribe=()=>lt.asap(a),s}},ie=function*(t,e){let n=t.byteLength;if(!e||n<e)return void(yield t);let r,o=0;for(;o<n;)r=o+e,yield t.slice(o,r),o=r},ae=(t,e,n,r)=>{const o=async function*(t,e){for await(const n of async function*(t){if(t[Symbol.asyncIterator])return void(yield*t);const e=t.getReader();try{for(;;){const{done:t,value:n}=await e.read();if(t)break;yield n}}finally{await e.cancel()}}(t))yield*ie(n,e)}(t,e);let i,a=0,s=t=>{i||(i=!0,r&&r(t))};return new ReadableStream({async pull(t){try{const{done:e,value:r}=await o.next();if(e)return s(),void t.close();let i=r.byteLength;if(n){let t=a+=i;n(t)}t.enqueue(new Uint8Array(r))}catch(t){throw s(t),t}},cancel:t=>(s(t),o.return())},{highWaterMark:2})},se="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,le=se&&"function"==typeof ReadableStream,ue=se&&("function"==typeof TextEncoder?(ce=new TextEncoder,t=>ce.encode(t)):async t=>new Uint8Array(await new Response(t).arrayBuffer()));var ce;const fe=(t,...e)=>{try{return!!t(...e)}catch(t){return!1}},de=le&&fe((()=>{let t=!1;const e=new Request(Rt.origin,{body:new ReadableStream,method:"POST",get duplex(){return t=!0,"half"}}).headers.has("Content-Type");return t&&!e})),pe=le&&fe((()=>lt.isReadableStream(new Response("").body))),he={stream:pe&&(t=>t.body)};var ve;se&&(ve=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((t=>{!he[t]&&(he[t]=lt.isFunction(ve[t])?e=>e[t]():(e,n)=>{throw new dt(`Response type '${t}' is not supported`,dt.ERR_NOT_SUPPORT,n)})})));const me={http:null,xhr:re,fetch:se&&(async t=>{let{url:e,method:n,data:r,signal:o,cancelToken:i,timeout:a,onDownloadProgress:s,onUploadProgress:l,responseType:u,headers:c,withCredentials:f="same-origin",fetchOptions:d}=ne(t);u=u?(u+"").toLowerCase():"text";let p,h=oe([o,i&&i.toAbortSignal()],a);const v=h&&h.unsubscribe&&(()=>{h.unsubscribe()});let m;try{if(l&&de&&"get"!==n&&"head"!==n&&0!==(m=await(async(t,e)=>{const n=lt.toFiniteNumber(t.getContentLength());return null==n?(async t=>{if(null==t)return 0;if(lt.isBlob(t))return t.size;if(lt.isSpecCompliantForm(t)){const e=new Request(Rt.origin,{method:"POST",body:t});return(await e.arrayBuffer()).byteLength}return lt.isArrayBufferView(t)||lt.isArrayBuffer(t)?t.byteLength:(lt.isURLSearchParams(t)&&(t+=""),lt.isString(t)?(await ue(t)).byteLength:void 0)})(e):n})(c,r))){let t,n=new Request(e,{method:"POST",body:r,duplex:"half"});if(lt.isFormData(r)&&(t=n.headers.get("content-type"))&&c.setContentType(t),n.body){const[t,e]=Jt(m,Gt(Kt(l)));r=ae(n.body,65536,t,e)}}lt.isString(f)||(f=f?"include":"omit");const o="credentials"in Request.prototype;p=new Request(e,{...d,signal:h,method:n.toUpperCase(),headers:c.normalize().toJSON(),body:r,duplex:"half",credentials:o?f:void 0});let i=await fetch(p);const a=pe&&("stream"===u||"response"===u);if(pe&&(s||a&&v)){const t={};["status","statusText","headers"].forEach((e=>{t[e]=i[e]}));const e=lt.toFiniteNumber(i.headers.get("content-length")),[n,r]=s&&Jt(e,Gt(Kt(s),!0))||[];i=new Response(ae(i.body,65536,n,(()=>{r&&r(),v&&v()})),t)}u=u||"text";let g=await he[lt.findKey(he,u)||"text"](i,t);return!a&&v&&v(),await new Promise(((e,n)=>{$t(e,n,{data:g,headers:Vt.from(i.headers),status:i.status,statusText:i.statusText,config:t,request:p})}))}catch(e){if(v&&v(),e&&"TypeError"===e.name&&/fetch/i.test(e.message))throw Object.assign(new dt("Network Error",dt.ERR_NETWORK,t,p),{cause:e.cause||e});throw dt.from(e,e&&e.code,t,p)}})};lt.forEach(me,((t,e)=>{if(t){try{Object.defineProperty(t,"name",{value:e})}catch(t){}Object.defineProperty(t,"adapterName",{value:e})}}));const ge=t=>`- ${t}`,Ae=t=>lt.isFunction(t)||null===t||!1===t,ye=t=>{t=lt.isArray(t)?t:[t];const{length:e}=t;let n,r;const o={};for(let i=0;i<e;i++){let e;if(n=t[i],r=n,!Ae(n)&&(r=me[(e=String(n)).toLowerCase()],void 0===r))throw new dt(`Unknown adapter '${e}'`);if(r)break;o[e||"#"+i]=r}if(!r){const t=Object.entries(o).map((([t,e])=>`adapter ${t} `+(!1===e?"is not supported by the environment":"is not available in the build")));let n=e?t.length>1?"since :\n"+t.map(ge).join("\n"):" "+ge(t[0]):"as no adapter specified";throw new dt("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function we(t){if(t.cancelToken&&t.cancelToken.throwIfRequested(),t.signal&&t.signal.aborted)throw new qt(null,t)}function be(t){return we(t),t.headers=Vt.from(t.headers),t.data=Qt.call(t,t.transformRequest),-1!==["post","put","patch"].indexOf(t.method)&&t.headers.setContentType("application/x-www-form-urlencoded",!1),ye(t.adapter||Ot.adapter)(t).then((function(e){return we(t),e.data=Qt.call(t,t.transformResponse,e),e.headers=Vt.from(e.headers),e}),(function(e){return zt(e)||(we(t),e&&e.response&&(e.response.data=Qt.call(t,t.transformResponse,e.response),e.response.headers=Vt.from(e.response.headers))),Promise.reject(e)}))}const _e={};["object","boolean","number","function","string","symbol"].forEach(((t,e)=>{_e[t]=function(n){return typeof n===t||"a"+(e<1?"n ":" ")+t}}));const xe={};_e.transitional=function(t,e,n){function r(t,e){return"[Axios v1.7.7] Transitional option '"+t+"'"+e+(n?". "+n:"")}return(n,o,i)=>{if(!1===t)throw new dt(r(o," has been removed"+(e?" in "+e:"")),dt.ERR_DEPRECATED);return e&&!xe[o]&&(xe[o]=!0,console.warn(r(o," has been deprecated since v"+e+" and will be removed in the near future"))),!t||t(n,o,i)}};const Ee={assertOptions:function(t,e,n){if("object"!=typeof t)throw new dt("options must be an object",dt.ERR_BAD_OPTION_VALUE);const r=Object.keys(t);let o=r.length;for(;o-- >0;){const i=r[o],a=e[i];if(a){const e=t[i],n=void 0===e||a(e,i,t);if(!0!==n)throw new dt("option "+i+" must be "+n,dt.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new dt("Unknown option "+i,dt.ERR_BAD_OPTION)}},validators:_e},Se=Ee.validators;class Te{constructor(t){this.defaults=t,this.interceptors={request:new Et,response:new Et}}async request(t,e){try{return await this._request(t,e)}catch(t){if(t instanceof Error){let e;Error.captureStackTrace?Error.captureStackTrace(e={}):e=new Error;const n=e.stack?e.stack.replace(/^.+\n/,""):"";try{t.stack?n&&!String(t.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(t.stack+="\n"+n):t.stack=n}catch(t){}}throw t}}_request(t,e){"string"==typeof t?(e=e||{}).url=t:e=t||{},e=ee(this.defaults,e);const{transitional:n,paramsSerializer:r,headers:o}=e;void 0!==n&&Ee.assertOptions(n,{silentJSONParsing:Se.transitional(Se.boolean),forcedJSONParsing:Se.transitional(Se.boolean),clarifyTimeoutError:Se.transitional(Se.boolean)},!1),null!=r&&(lt.isFunction(r)?e.paramsSerializer={serialize:r}:Ee.assertOptions(r,{encode:Se.function,serialize:Se.function},!0)),e.method=(e.method||this.defaults.method||"get").toLowerCase();let i=o&&lt.merge(o.common,o[e.method]);o&&lt.forEach(["delete","get","head","post","put","patch","common"],(t=>{delete o[t]})),e.headers=Vt.concat(i,o);const a=[];let s=!0;this.interceptors.request.forEach((function(t){"function"==typeof t.runWhen&&!1===t.runWhen(e)||(s=s&&t.synchronous,a.unshift(t.fulfilled,t.rejected))}));const l=[];let u;this.interceptors.response.forEach((function(t){l.push(t.fulfilled,t.rejected)}));let c,f=0;if(!s){const t=[be.bind(this),void 0];for(t.unshift.apply(t,a),t.push.apply(t,l),c=t.length,u=Promise.resolve(e);f<c;)u=u.then(t[f++],t[f++]);return u}c=a.length;let d=e;for(f=0;f<c;){const t=a[f++],e=a[f++];try{d=t(d)}catch(t){e.call(this,t);break}}try{u=be.call(this,d)}catch(t){return Promise.reject(t)}for(f=0,c=l.length;f<c;)u=u.then(l[f++],l[f++]);return u}getUri(t){return xt(Zt((t=ee(this.defaults,t)).baseURL,t.url),t.params,t.paramsSerializer)}}lt.forEach(["delete","get","head","options"],(function(t){Te.prototype[t]=function(e,n){return this.request(ee(n||{},{method:t,url:e,data:(n||{}).data}))}})),lt.forEach(["post","put","patch"],(function(t){function e(e){return function(n,r,o){return this.request(ee(o||{},{method:t,headers:e?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}Te.prototype[t]=e(),Te.prototype[t+"Form"]=e(!0)}));const Ce=Te;class De{constructor(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");let e;this.promise=new Promise((function(t){e=t}));const n=this;this.promise.then((t=>{if(!n._listeners)return;let e=n._listeners.length;for(;e-- >0;)n._listeners[e](t);n._listeners=null})),this.promise.then=t=>{let e;const r=new Promise((t=>{n.subscribe(t),e=t})).then(t);return r.cancel=function(){n.unsubscribe(e)},r},t((function(t,r,o){n.reason||(n.reason=new qt(t,r,o),e(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){this.reason?t(this.reason):this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;const e=this._listeners.indexOf(t);-1!==e&&this._listeners.splice(e,1)}toAbortSignal(){const t=new AbortController,e=e=>{t.abort(e)};return this.subscribe(e),t.signal.unsubscribe=()=>this.unsubscribe(e),t.signal}static source(){let t;return{token:new De((function(e){t=e})),cancel:t}}}const ke=De,Me={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Me).forEach((([t,e])=>{Me[e]=t}));const Ne=Me,Re=function t(e){const n=new Ce(e),r=g(Ce.prototype.request,n);return lt.extend(r,Ce.prototype,n,{allOwnKeys:!0}),lt.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return t(ee(e,n))},r}(Ot);Re.Axios=Ce,Re.CanceledError=qt,Re.CancelToken=ke,Re.isCancel=zt,Re.VERSION="1.7.7",Re.toFormData=gt,Re.AxiosError=dt,Re.Cancel=Re.CanceledError,Re.all=function(t){return Promise.all(t)},Re.spread=function(t){return function(e){return t.apply(null,e)}},Re.isAxiosError=function(t){return lt.isObject(t)&&!0===t.isAxiosError},Re.mergeConfig=ee,Re.AxiosHeaders=Vt,Re.formToJSON=t=>Bt(lt.isHTMLForm(t)?new FormData(t):t),Re.getAdapter=ye,Re.HttpStatusCode=Ne,Re.default=Re;const Be=Re;function Pe(t){return"0123456789abcdefghijklmnopqrstuvwxyz".charAt(t)}function Oe(t,e){return t&e}function Ie(t,e){return t|e}function Le(t,e){return t^e}function He(t,e){return t&~e}function Fe(t){if(0==t)return-1;var e=0;return 65535&t||(t>>=16,e+=16),255&t||(t>>=8,e+=8),15&t||(t>>=4,e+=4),3&t||(t>>=2,e+=2),1&t||++e,e}function je(t){for(var e=0;0!=t;)t&=t-1,++e;return e}var Ue,Ve="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function Qe(t){var e,n,r="";for(e=0;e+3<=t.length;e+=3)n=parseInt(t.substring(e,e+3),16),r+=Ve.charAt(n>>6)+Ve.charAt(63&n);for(e+1==t.length?(n=parseInt(t.substring(e,e+1),16),r+=Ve.charAt(n<<2)):e+2==t.length&&(n=parseInt(t.substring(e,e+2),16),r+=Ve.charAt(n>>2)+Ve.charAt((3&n)<<4));(3&r.length)>0;)r+="=";return r}function ze(t){var e,n="",r=0,o=0;for(e=0;e<t.length&&"="!=t.charAt(e);++e){var i=Ve.indexOf(t.charAt(e));i<0||(0==r?(n+=Pe(i>>2),o=3&i,r=1):1==r?(n+=Pe(o<<2|i>>4),o=15&i,r=2):2==r?(n+=Pe(o),n+=Pe(i>>2),o=3&i,r=3):(n+=Pe(o<<2|i>>4),n+=Pe(15&i),r=0))}return 1==r&&(n+=Pe(o<<2)),n}var Ye,qe={decode:function(t){var e;if(void 0===Ye){for(Ye=Object.create(null),e=0;e<64;++e)Ye["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e)]=e;for(Ye["-"]=62,Ye._=63,e=0;e<9;++e)Ye["= \f\n\r\t \u2028\u2029".charAt(e)]=-1}var n=[],r=0,o=0;for(e=0;e<t.length;++e){var i=t.charAt(e);if("="==i)break;if(-1!=(i=Ye[i])){if(void 0===i)throw new Error("Illegal character at offset "+e);r|=i,++o>=4?(n[n.length]=r>>16,n[n.length]=r>>8&255,n[n.length]=255&r,r=0,o=0):r<<=6}}switch(o){case 1:throw new Error("Base64 encoding incomplete: at least 2 bits missing");case 2:n[n.length]=r>>10;break;case 3:n[n.length]=r>>16,n[n.length]=r>>8&255}return n},re:/-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,unarmor:function(t){var e=qe.re.exec(t);if(e)if(e[1])t=e[1];else{if(!e[2])throw new Error("RegExp out of sync");t=e[2]}return qe.decode(t)}},$e=1e13,Ge=function(){function t(t){this.buf=[+t||0]}return t.prototype.mulAdd=function(t,e){var n,r,o=this.buf,i=o.length;for(n=0;n<i;++n)(r=o[n]*t+e)<$e?e=0:r-=(e=0|r/$e)*$e,o[n]=r;e>0&&(o[n]=e)},t.prototype.sub=function(t){var e,n,r=this.buf,o=r.length;for(e=0;e<o;++e)(n=r[e]-t)<0?(n+=$e,t=1):t=0,r[e]=n;for(;0===r[r.length-1];)r.pop()},t.prototype.toString=function(t){if(10!=(t||10))throw new Error("only base 10 is supported");for(var e=this.buf,n=e[e.length-1].toString(),r=e.length-2;r>=0;--r)n+=($e+e[r]).toString().substring(1);return n},t.prototype.valueOf=function(){for(var t=this.buf,e=0,n=t.length-1;n>=0;--n)e=e*$e+t[n];return e},t.prototype.simplify=function(){var t=this.buf;return 1==t.length?t[0]:this},t}(),Je=/^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/,Ke=/^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;function We(t,e){return t.length>e&&(t=t.substring(0,e)+"…"),t}var Xe,Ze=function(){function t(e,n){this.hexDigits="0123456789ABCDEF",e instanceof t?(this.enc=e.enc,this.pos=e.pos):(this.enc=e,this.pos=n)}return t.prototype.get=function(t){if(void 0===t&&(t=this.pos++),t>=this.enc.length)throw new Error("Requesting byte offset ".concat(t," on a stream of length ").concat(this.enc.length));return"string"==typeof this.enc?this.enc.charCodeAt(t):this.enc[t]},t.prototype.hexByte=function(t){return this.hexDigits.charAt(t>>4&15)+this.hexDigits.charAt(15&t)},t.prototype.hexDump=function(t,e,n){for(var r="",o=t;o<e;++o)if(r+=this.hexByte(this.get(o)),!0!==n)switch(15&o){case 7:r+="  ";break;case 15:r+="\n";break;default:r+=" "}return r},t.prototype.isASCII=function(t,e){for(var n=t;n<e;++n){var r=this.get(n);if(r<32||r>176)return!1}return!0},t.prototype.parseStringISO=function(t,e){for(var n="",r=t;r<e;++r)n+=String.fromCharCode(this.get(r));return n},t.prototype.parseStringUTF=function(t,e){for(var n="",r=t;r<e;){var o=this.get(r++);n+=o<128?String.fromCharCode(o):o>191&&o<224?String.fromCharCode((31&o)<<6|63&this.get(r++)):String.fromCharCode((15&o)<<12|(63&this.get(r++))<<6|63&this.get(r++))}return n},t.prototype.parseStringBMP=function(t,e){for(var n,r,o="",i=t;i<e;)n=this.get(i++),r=this.get(i++),o+=String.fromCharCode(n<<8|r);return o},t.prototype.parseTime=function(t,e,n){var r=this.parseStringISO(t,e),o=(n?Je:Ke).exec(r);return o?(n&&(o[1]=+o[1],o[1]+=+o[1]<70?2e3:1900),r=o[1]+"-"+o[2]+"-"+o[3]+" "+o[4],o[5]&&(r+=":"+o[5],o[6]&&(r+=":"+o[6],o[7]&&(r+="."+o[7]))),o[8]&&(r+=" UTC","Z"!=o[8]&&(r+=o[8],o[9]&&(r+=":"+o[9]))),r):"Unrecognized time: "+r},t.prototype.parseInteger=function(t,e){for(var n,r=this.get(t),o=r>127,i=o?255:0,a="";r==i&&++t<e;)r=this.get(t);if(0==(n=e-t))return o?-1:0;if(n>4){for(a=r,n<<=3;!(128&(+a^i));)a=+a<<1,--n;a="("+n+" bit)\n"}o&&(r-=256);for(var s=new Ge(r),l=t+1;l<e;++l)s.mulAdd(256,this.get(l));return a+s.toString()},t.prototype.parseBitString=function(t,e,n){for(var r=this.get(t),o="("+((e-t-1<<3)-r)+" bit)\n",i="",a=t+1;a<e;++a){for(var s=this.get(a),l=a==e-1?r:0,u=7;u>=l;--u)i+=s>>u&1?"1":"0";if(i.length>n)return o+We(i,n)}return o+i},t.prototype.parseOctetString=function(t,e,n){if(this.isASCII(t,e))return We(this.parseStringISO(t,e),n);var r=e-t,o="("+r+" byte)\n";r>(n/=2)&&(e=t+n);for(var i=t;i<e;++i)o+=this.hexByte(this.get(i));return r>n&&(o+="…"),o},t.prototype.parseOID=function(t,e,n){for(var r="",o=new Ge,i=0,a=t;a<e;++a){var s=this.get(a);if(o.mulAdd(128,127&s),i+=7,!(128&s)){if(""===r)if((o=o.simplify())instanceof Ge)o.sub(80),r="2."+o.toString();else{var l=o<80?o<40?0:1:2;r=l+"."+(o-40*l)}else r+="."+o.toString();if(r.length>n)return We(r,n);o=new Ge,i=0}}return i>0&&(r+=".incomplete"),r},t}(),tn=function(){function t(t,e,n,r,o){if(!(r instanceof en))throw new Error("Invalid tag value.");this.stream=t,this.header=e,this.length=n,this.tag=r,this.sub=o}return t.prototype.typeName=function(){switch(this.tag.tagClass){case 0:switch(this.tag.tagNumber){case 0:return"EOC";case 1:return"BOOLEAN";case 2:return"INTEGER";case 3:return"BIT_STRING";case 4:return"OCTET_STRING";case 5:return"NULL";case 6:return"OBJECT_IDENTIFIER";case 7:return"ObjectDescriptor";case 8:return"EXTERNAL";case 9:return"REAL";case 10:return"ENUMERATED";case 11:return"EMBEDDED_PDV";case 12:return"UTF8String";case 16:return"SEQUENCE";case 17:return"SET";case 18:return"NumericString";case 19:return"PrintableString";case 20:return"TeletexString";case 21:return"VideotexString";case 22:return"IA5String";case 23:return"UTCTime";case 24:return"GeneralizedTime";case 25:return"GraphicString";case 26:return"VisibleString";case 27:return"GeneralString";case 28:return"UniversalString";case 30:return"BMPString"}return"Universal_"+this.tag.tagNumber.toString();case 1:return"Application_"+this.tag.tagNumber.toString();case 2:return"["+this.tag.tagNumber.toString()+"]";case 3:return"Private_"+this.tag.tagNumber.toString()}},t.prototype.content=function(t){if(void 0===this.tag)return null;void 0===t&&(t=1/0);var e=this.posContent(),n=Math.abs(this.length);if(!this.tag.isUniversal())return null!==this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+n,t);switch(this.tag.tagNumber){case 1:return 0===this.stream.get(e)?"false":"true";case 2:return this.stream.parseInteger(e,e+n);case 3:return this.sub?"("+this.sub.length+" elem)":this.stream.parseBitString(e,e+n,t);case 4:return this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(e,e+n,t);case 6:return this.stream.parseOID(e,e+n,t);case 16:case 17:return null!==this.sub?"("+this.sub.length+" elem)":"(no elem)";case 12:return We(this.stream.parseStringUTF(e,e+n),t);case 18:case 19:case 20:case 21:case 22:case 26:return We(this.stream.parseStringISO(e,e+n),t);case 30:return We(this.stream.parseStringBMP(e,e+n),t);case 23:case 24:return this.stream.parseTime(e,e+n,23==this.tag.tagNumber)}return null},t.prototype.toString=function(){return this.typeName()+"@"+this.stream.pos+"[header:"+this.header+",length:"+this.length+",sub:"+(null===this.sub?"null":this.sub.length)+"]"},t.prototype.toPrettyString=function(t){void 0===t&&(t="");var e=t+this.typeName()+" @"+this.stream.pos;if(this.length>=0&&(e+="+"),e+=this.length,this.tag.tagConstructed?e+=" (constructed)":!this.tag.isUniversal()||3!=this.tag.tagNumber&&4!=this.tag.tagNumber||null===this.sub||(e+=" (encapsulates)"),e+="\n",null!==this.sub){t+="  ";for(var n=0,r=this.sub.length;n<r;++n)e+=this.sub[n].toPrettyString(t)}return e},t.prototype.posStart=function(){return this.stream.pos},t.prototype.posContent=function(){return this.stream.pos+this.header},t.prototype.posEnd=function(){return this.stream.pos+this.header+Math.abs(this.length)},t.prototype.toHexString=function(){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)},t.decodeLength=function(t){var e=t.get(),n=127&e;if(n==e)return n;if(n>6)throw new Error("Length over 48 bits not supported at position "+(t.pos-1));if(0===n)return null;e=0;for(var r=0;r<n;++r)e=256*e+t.get();return e},t.prototype.getHexStringValue=function(){var t=this.toHexString(),e=2*this.header,n=2*this.length;return t.substr(e,n)},t.decode=function(e){var n;n=e instanceof Ze?e:new Ze(e,0);var r=new Ze(n),o=new en(n),i=t.decodeLength(n),a=n.pos,s=a-r.pos,l=null,u=function(){var e=[];if(null!==i){for(var r=a+i;n.pos<r;)e[e.length]=t.decode(n);if(n.pos!=r)throw new Error("Content size is not correct for container starting at offset "+a)}else try{for(;;){var o=t.decode(n);if(o.tag.isEOC())break;e[e.length]=o}i=a-n.pos}catch(t){throw new Error("Exception while decoding undefined length content: "+t)}return e};if(o.tagConstructed)l=u();else if(o.isUniversal()&&(3==o.tagNumber||4==o.tagNumber))try{if(3==o.tagNumber&&0!=n.get())throw new Error("BIT STRINGs with unused bits cannot encapsulate.");l=u();for(var c=0;c<l.length;++c)if(l[c].tag.isEOC())throw new Error("EOC is not supposed to be actual content.")}catch(t){l=null}if(null===l){if(null===i)throw new Error("We can't skip over an invalid tag with undefined length at offset "+a);n.pos=a+Math.abs(i)}return new t(r,s,i,o,l)},t}(),en=function(){function t(t){var e=t.get();if(this.tagClass=e>>6,this.tagConstructed=!!(32&e),this.tagNumber=31&e,31==this.tagNumber){var n=new Ge;do{e=t.get(),n.mulAdd(128,127&e)}while(128&e);this.tagNumber=n.simplify()}}return t.prototype.isUniversal=function(){return 0===this.tagClass},t.prototype.isEOC=function(){return 0===this.tagClass&&0===this.tagNumber},t}(),nn=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],rn=(1<<26)/nn[nn.length-1],on=function(){function t(t,e,n){null!=t&&("number"==typeof t?this.fromNumber(t,e,n):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}return t.prototype.toString=function(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var n,r=(1<<e)-1,o=!1,i="",a=this.t,s=this.DB-a*this.DB%e;if(a-- >0)for(s<this.DB&&(n=this[a]>>s)>0&&(o=!0,i=Pe(n));a>=0;)s<e?(n=(this[a]&(1<<s)-1)<<e-s,n|=this[--a]>>(s+=this.DB-e)):(n=this[a]>>(s-=e)&r,s<=0&&(s+=this.DB,--a)),n>0&&(o=!0),o&&(i+=Pe(n));return o?i:"0"},t.prototype.negate=function(){var e=cn();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var n=this.t;if(0!=(e=n-t.t))return this.s<0?-e:e;for(;--n>=0;)if(0!=(e=this[n]-t[n]))return e;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+An(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var n=cn();return this.abs().divRemTo(e,null,n),this.s<0&&n.compareTo(t.ZERO)>0&&e.subTo(n,n),n},t.prototype.modPowInt=function(t,e){var n;return n=t<256||e.isEven()?new sn(e):new ln(e),this.exp(t,n)},t.prototype.clone=function(){var t=cn();return this.copyTo(t),t},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var t=this.t,e=[];e[0]=this.s;var n,r=this.DB-t*this.DB%8,o=0;if(t-- >0)for(r<this.DB&&(n=this[t]>>r)!=(this.s&this.DM)>>r&&(e[o++]=n|this.s<<this.DB-r);t>=0;)r<8?(n=(this[t]&(1<<r)-1)<<8-r,n|=this[--t]>>(r+=this.DB-8)):(n=this[t]>>(r-=8)&255,r<=0&&(r+=this.DB,--t)),128&n&&(n|=-256),0==o&&(128&this.s)!=(128&n)&&++o,(o>0||n!=this.s)&&(e[o++]=n);return e},t.prototype.equals=function(t){return 0==this.compareTo(t)},t.prototype.min=function(t){return this.compareTo(t)<0?this:t},t.prototype.max=function(t){return this.compareTo(t)>0?this:t},t.prototype.and=function(t){var e=cn();return this.bitwiseTo(t,Oe,e),e},t.prototype.or=function(t){var e=cn();return this.bitwiseTo(t,Ie,e),e},t.prototype.xor=function(t){var e=cn();return this.bitwiseTo(t,Le,e),e},t.prototype.andNot=function(t){var e=cn();return this.bitwiseTo(t,He,e),e},t.prototype.not=function(){for(var t=cn(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},t.prototype.shiftLeft=function(t){var e=cn();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},t.prototype.shiftRight=function(t){var e=cn();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},t.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+Fe(this[t]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,n=0;n<this.t;++n)t+=je(this[n]^e);return t},t.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:!!(this[e]&1<<t%this.DB)},t.prototype.setBit=function(t){return this.changeBit(t,Ie)},t.prototype.clearBit=function(t){return this.changeBit(t,He)},t.prototype.flipBit=function(t){return this.changeBit(t,Le)},t.prototype.add=function(t){var e=cn();return this.addTo(t,e),e},t.prototype.subtract=function(t){var e=cn();return this.subTo(t,e),e},t.prototype.multiply=function(t){var e=cn();return this.multiplyTo(t,e),e},t.prototype.divide=function(t){var e=cn();return this.divRemTo(t,e,null),e},t.prototype.remainder=function(t){var e=cn();return this.divRemTo(t,null,e),e},t.prototype.divideAndRemainder=function(t){var e=cn(),n=cn();return this.divRemTo(t,e,n),[e,n]},t.prototype.modPow=function(t,e){var n,r,o=t.bitLength(),i=gn(1);if(o<=0)return i;n=o<18?1:o<48?3:o<144?4:o<768?5:6,r=o<8?new sn(e):e.isEven()?new un(e):new ln(e);var a=[],s=3,l=n-1,u=(1<<n)-1;if(a[1]=r.convert(this),n>1){var c=cn();for(r.sqrTo(a[1],c);s<=u;)a[s]=cn(),r.mulTo(c,a[s-2],a[s]),s+=2}var f,d,p=t.t-1,h=!0,v=cn();for(o=An(t[p])-1;p>=0;){for(o>=l?f=t[p]>>o-l&u:(f=(t[p]&(1<<o+1)-1)<<l-o,p>0&&(f|=t[p-1]>>this.DB+o-l)),s=n;!(1&f);)f>>=1,--s;if((o-=s)<0&&(o+=this.DB,--p),h)a[f].copyTo(i),h=!1;else{for(;s>1;)r.sqrTo(i,v),r.sqrTo(v,i),s-=2;s>0?r.sqrTo(i,v):(d=i,i=v,v=d),r.mulTo(v,a[f],i)}for(;p>=0&&!(t[p]&1<<o);)r.sqrTo(i,v),d=i,i=v,v=d,--o<0&&(o=this.DB-1,--p)}return r.revert(i)},t.prototype.modInverse=function(e){var n=e.isEven();if(this.isEven()&&n||0==e.signum())return t.ZERO;for(var r=e.clone(),o=this.clone(),i=gn(1),a=gn(0),s=gn(0),l=gn(1);0!=r.signum();){for(;r.isEven();)r.rShiftTo(1,r),n?(i.isEven()&&a.isEven()||(i.addTo(this,i),a.subTo(e,a)),i.rShiftTo(1,i)):a.isEven()||a.subTo(e,a),a.rShiftTo(1,a);for(;o.isEven();)o.rShiftTo(1,o),n?(s.isEven()&&l.isEven()||(s.addTo(this,s),l.subTo(e,l)),s.rShiftTo(1,s)):l.isEven()||l.subTo(e,l),l.rShiftTo(1,l);r.compareTo(o)>=0?(r.subTo(o,r),n&&i.subTo(s,i),a.subTo(l,a)):(o.subTo(r,o),n&&s.subTo(i,s),l.subTo(a,l))}return 0!=o.compareTo(t.ONE)?t.ZERO:l.compareTo(e)>=0?l.subtract(e):l.signum()<0?(l.addTo(e,l),l.signum()<0?l.add(e):l):l},t.prototype.pow=function(t){return this.exp(t,new an)},t.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),n=t.s<0?t.negate():t.clone();if(e.compareTo(n)<0){var r=e;e=n,n=r}var o=e.getLowestSetBit(),i=n.getLowestSetBit();if(i<0)return e;for(o<i&&(i=o),i>0&&(e.rShiftTo(i,e),n.rShiftTo(i,n));e.signum()>0;)(o=e.getLowestSetBit())>0&&e.rShiftTo(o,e),(o=n.getLowestSetBit())>0&&n.rShiftTo(o,n),e.compareTo(n)>=0?(e.subTo(n,e),e.rShiftTo(1,e)):(n.subTo(e,n),n.rShiftTo(1,n));return i>0&&n.lShiftTo(i,n),n},t.prototype.isProbablePrime=function(t){var e,n=this.abs();if(1==n.t&&n[0]<=nn[nn.length-1]){for(e=0;e<nn.length;++e)if(n[0]==nn[e])return!0;return!1}if(n.isEven())return!1;for(e=1;e<nn.length;){for(var r=nn[e],o=e+1;o<nn.length&&r<rn;)r*=nn[o++];for(r=n.modInt(r);e<o;)if(r%nn[e++]==0)return!1}return n.millerRabin(t)},t.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},t.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},t.prototype.fromString=function(e,n){var r;if(16==n)r=4;else if(8==n)r=3;else if(256==n)r=8;else if(2==n)r=1;else if(32==n)r=5;else{if(4!=n)return void this.fromRadix(e,n);r=2}this.t=0,this.s=0;for(var o=e.length,i=!1,a=0;--o>=0;){var s=8==r?255&+e[o]:mn(e,o);s<0?"-"==e.charAt(o)&&(i=!0):(i=!1,0==a?this[this.t++]=s:a+r>this.DB?(this[this.t-1]|=(s&(1<<this.DB-a)-1)<<a,this[this.t++]=s>>this.DB-a):this[this.t-1]|=s<<a,(a+=r)>=this.DB&&(a-=this.DB))}8==r&&128&+e[0]&&(this.s=-1,a>0&&(this[this.t-1]|=(1<<this.DB-a)-1<<a)),this.clamp(),i&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},t.prototype.dlShiftTo=function(t,e){var n;for(n=this.t-1;n>=0;--n)e[n+t]=this[n];for(n=t-1;n>=0;--n)e[n]=0;e.t=this.t+t,e.s=this.s},t.prototype.drShiftTo=function(t,e){for(var n=t;n<this.t;++n)e[n-t]=this[n];e.t=Math.max(this.t-t,0),e.s=this.s},t.prototype.lShiftTo=function(t,e){for(var n=t%this.DB,r=this.DB-n,o=(1<<r)-1,i=Math.floor(t/this.DB),a=this.s<<n&this.DM,s=this.t-1;s>=0;--s)e[s+i+1]=this[s]>>r|a,a=(this[s]&o)<<n;for(s=i-1;s>=0;--s)e[s]=0;e[i]=a,e.t=this.t+i+1,e.s=this.s,e.clamp()},t.prototype.rShiftTo=function(t,e){e.s=this.s;var n=Math.floor(t/this.DB);if(n>=this.t)e.t=0;else{var r=t%this.DB,o=this.DB-r,i=(1<<r)-1;e[0]=this[n]>>r;for(var a=n+1;a<this.t;++a)e[a-n-1]|=(this[a]&i)<<o,e[a-n]=this[a]>>r;r>0&&(e[this.t-n-1]|=(this.s&i)<<o),e.t=this.t-n,e.clamp()}},t.prototype.subTo=function(t,e){for(var n=0,r=0,o=Math.min(t.t,this.t);n<o;)r+=this[n]-t[n],e[n++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r-=t.s;n<this.t;)r+=this[n],e[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<t.t;)r-=t[n],e[n++]=r&this.DM,r>>=this.DB;r-=t.s}e.s=r<0?-1:0,r<-1?e[n++]=this.DV+r:r>0&&(e[n++]=r),e.t=n,e.clamp()},t.prototype.multiplyTo=function(e,n){var r=this.abs(),o=e.abs(),i=r.t;for(n.t=i+o.t;--i>=0;)n[i]=0;for(i=0;i<o.t;++i)n[i+r.t]=r.am(0,o[i],n,i,0,r.t);n.s=0,n.clamp(),this.s!=e.s&&t.ZERO.subTo(n,n)},t.prototype.squareTo=function(t){for(var e=this.abs(),n=t.t=2*e.t;--n>=0;)t[n]=0;for(n=0;n<e.t-1;++n){var r=e.am(n,e[n],t,2*n,0,1);(t[n+e.t]+=e.am(n+1,2*e[n],t,2*n+1,r,e.t-n-1))>=e.DV&&(t[n+e.t]-=e.DV,t[n+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(n,e[n],t,2*n,0,1)),t.s=0,t.clamp()},t.prototype.divRemTo=function(e,n,r){var o=e.abs();if(!(o.t<=0)){var i=this.abs();if(i.t<o.t)return null!=n&&n.fromInt(0),void(null!=r&&this.copyTo(r));null==r&&(r=cn());var a=cn(),s=this.s,l=e.s,u=this.DB-An(o[o.t-1]);u>0?(o.lShiftTo(u,a),i.lShiftTo(u,r)):(o.copyTo(a),i.copyTo(r));var c=a.t,f=a[c-1];if(0!=f){var d=f*(1<<this.F1)+(c>1?a[c-2]>>this.F2:0),p=this.FV/d,h=(1<<this.F1)/d,v=1<<this.F2,m=r.t,g=m-c,A=null==n?cn():n;for(a.dlShiftTo(g,A),r.compareTo(A)>=0&&(r[r.t++]=1,r.subTo(A,r)),t.ONE.dlShiftTo(c,A),A.subTo(a,a);a.t<c;)a[a.t++]=0;for(;--g>=0;){var y=r[--m]==f?this.DM:Math.floor(r[m]*p+(r[m-1]+v)*h);if((r[m]+=a.am(0,y,r,g,0,c))<y)for(a.dlShiftTo(g,A),r.subTo(A,r);r[m]<--y;)r.subTo(A,r)}null!=n&&(r.drShiftTo(c,n),s!=l&&t.ZERO.subTo(n,n)),r.t=c,r.clamp(),u>0&&r.rShiftTo(u,r),s<0&&t.ZERO.subTo(r,r)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(!(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,n){if(e>4294967295||e<1)return t.ONE;var r=cn(),o=cn(),i=n.convert(this),a=An(e)-1;for(i.copyTo(r);--a>=0;)if(n.sqrTo(r,o),(e&1<<a)>0)n.mulTo(o,i,r);else{var s=r;r=o,o=s}return n.revert(r)},t.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},t.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),n=Math.pow(t,e),r=gn(n),o=cn(),i=cn(),a="";for(this.divRemTo(r,o,i);o.signum()>0;)a=(n+i.intValue()).toString(t).substr(1)+a,o.divRemTo(r,o,i);return i.intValue().toString(t)+a},t.prototype.fromRadix=function(e,n){this.fromInt(0),null==n&&(n=10);for(var r=this.chunkSize(n),o=Math.pow(n,r),i=!1,a=0,s=0,l=0;l<e.length;++l){var u=mn(e,l);u<0?"-"==e.charAt(l)&&0==this.signum()&&(i=!0):(s=n*s+u,++a>=r&&(this.dMultiply(o),this.dAddOffset(s,0),a=0,s=0))}a>0&&(this.dMultiply(Math.pow(n,a)),this.dAddOffset(s,0)),i&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,n,r){if("number"==typeof n)if(e<2)this.fromInt(1);else for(this.fromNumber(e,r),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),Ie,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(n);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var o=[],i=7&e;o.length=1+(e>>3),n.nextBytes(o),i>0?o[0]&=(1<<i)-1:o[0]=0,this.fromString(o,256)}},t.prototype.bitwiseTo=function(t,e,n){var r,o,i=Math.min(t.t,this.t);for(r=0;r<i;++r)n[r]=e(this[r],t[r]);if(t.t<this.t){for(o=t.s&this.DM,r=i;r<this.t;++r)n[r]=e(this[r],o);n.t=this.t}else{for(o=this.s&this.DM,r=i;r<t.t;++r)n[r]=e(o,t[r]);n.t=t.t}n.s=e(this.s,t.s),n.clamp()},t.prototype.changeBit=function(e,n){var r=t.ONE.shiftLeft(e);return this.bitwiseTo(r,n,r),r},t.prototype.addTo=function(t,e){for(var n=0,r=0,o=Math.min(t.t,this.t);n<o;)r+=this[n]+t[n],e[n++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r+=t.s;n<this.t;)r+=this[n],e[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<t.t;)r+=t[n],e[n++]=r&this.DM,r>>=this.DB;r+=t.s}e.s=r<0?-1:0,r>0?e[n++]=r:r<-1&&(e[n++]=this.DV+r),e.t=n,e.clamp()},t.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},t.prototype.multiplyLowerTo=function(t,e,n){var r=Math.min(this.t+t.t,e);for(n.s=0,n.t=r;r>0;)n[--r]=0;for(var o=n.t-this.t;r<o;++r)n[r+this.t]=this.am(0,t[r],n,r,0,this.t);for(o=Math.min(t.t,e);r<o;++r)this.am(0,t[r],n,r,0,e-r);n.clamp()},t.prototype.multiplyUpperTo=function(t,e,n){--e;var r=n.t=this.t+t.t-e;for(n.s=0;--r>=0;)n[r]=0;for(r=Math.max(e-this.t,0);r<t.t;++r)n[this.t+r-e]=this.am(e-r,t[r],n,0,0,this.t+r-e);n.clamp(),n.drShiftTo(1,n)},t.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,n=this.s<0?t-1:0;if(this.t>0)if(0==e)n=this[0]%t;else for(var r=this.t-1;r>=0;--r)n=(e*n+this[r])%t;return n},t.prototype.millerRabin=function(e){var n=this.subtract(t.ONE),r=n.getLowestSetBit();if(r<=0)return!1;var o=n.shiftRight(r);(e=e+1>>1)>nn.length&&(e=nn.length);for(var i=cn(),a=0;a<e;++a){i.fromInt(nn[Math.floor(Math.random()*nn.length)]);var s=i.modPow(o,this);if(0!=s.compareTo(t.ONE)&&0!=s.compareTo(n)){for(var l=1;l++<r&&0!=s.compareTo(n);)if(0==(s=s.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=s.compareTo(n))return!1}}return!0},t.prototype.square=function(){var t=cn();return this.squareTo(t),t},t.prototype.gcda=function(t,e){var n=this.s<0?this.negate():this.clone(),r=t.s<0?t.negate():t.clone();if(n.compareTo(r)<0){var o=n;n=r,r=o}var i=n.getLowestSetBit(),a=r.getLowestSetBit();if(a<0)e(n);else{i<a&&(a=i),a>0&&(n.rShiftTo(a,n),r.rShiftTo(a,r));var s=function(){(i=n.getLowestSetBit())>0&&n.rShiftTo(i,n),(i=r.getLowestSetBit())>0&&r.rShiftTo(i,r),n.compareTo(r)>=0?(n.subTo(r,n),n.rShiftTo(1,n)):(r.subTo(n,r),r.rShiftTo(1,r)),n.signum()>0?setTimeout(s,0):(a>0&&r.lShiftTo(a,r),setTimeout((function(){e(r)}),0))};setTimeout(s,10)}},t.prototype.fromNumberAsync=function(e,n,r,o){if("number"==typeof n)if(e<2)this.fromInt(1);else{this.fromNumber(e,r),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),Ie,this),this.isEven()&&this.dAddOffset(1,0);var i=this,a=function(){i.dAddOffset(2,0),i.bitLength()>e&&i.subTo(t.ONE.shiftLeft(e-1),i),i.isProbablePrime(n)?setTimeout((function(){o()}),0):setTimeout(a,0)};setTimeout(a,0)}else{var s=[],l=7&e;s.length=1+(e>>3),n.nextBytes(s),l>0?s[0]&=(1<<l)-1:s[0]=0,this.fromString(s,256)}},t}(),an=function(){function t(){}return t.prototype.convert=function(t){return t},t.prototype.revert=function(t){return t},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n)},t.prototype.sqrTo=function(t,e){t.squareTo(e)},t}(),sn=function(){function t(t){this.m=t}return t.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),ln=function(){function t(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}return t.prototype.convert=function(t){var e=cn();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(on.ZERO)>0&&this.m.subTo(e,e),e},t.prototype.revert=function(t){var e=cn();return t.copyTo(e),this.reduce(e),e},t.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var n=32767&t[e],r=n*this.mpl+((n*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[n=e+this.m.t]+=this.m.am(0,r,t,e,0,this.m.t);t[n]>=t.DV;)t[n]-=t.DV,t[++n]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),un=function(){function t(t){this.m=t,this.r2=cn(),this.q3=cn(),on.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t)}return t.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=cn();return t.copyTo(e),this.reduce(e),e},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}();function cn(){return new on(null)}function fn(t,e){return new on(t,e)}var dn="undefined"!=typeof navigator;dn&&"Microsoft Internet Explorer"==navigator.appName?(on.prototype.am=function(t,e,n,r,o,i){for(var a=32767&e,s=e>>15;--i>=0;){var l=32767&this[t],u=this[t++]>>15,c=s*l+u*a;o=((l=a*l+((32767&c)<<15)+n[r]+(1073741823&o))>>>30)+(c>>>15)+s*u+(o>>>30),n[r++]=1073741823&l}return o},Xe=30):dn&&"Netscape"!=navigator.appName?(on.prototype.am=function(t,e,n,r,o,i){for(;--i>=0;){var a=e*this[t++]+n[r]+o;o=Math.floor(a/67108864),n[r++]=67108863&a}return o},Xe=26):(on.prototype.am=function(t,e,n,r,o,i){for(var a=16383&e,s=e>>14;--i>=0;){var l=16383&this[t],u=this[t++]>>14,c=s*l+u*a;o=((l=a*l+((16383&c)<<14)+n[r]+o)>>28)+(c>>14)+s*u,n[r++]=268435455&l}return o},Xe=28),on.prototype.DB=Xe,on.prototype.DM=(1<<Xe)-1,on.prototype.DV=1<<Xe,on.prototype.FV=Math.pow(2,52),on.prototype.F1=52-Xe,on.prototype.F2=2*Xe-52;var pn,hn,vn=[];for(pn="0".charCodeAt(0),hn=0;hn<=9;++hn)vn[pn++]=hn;for(pn="a".charCodeAt(0),hn=10;hn<36;++hn)vn[pn++]=hn;for(pn="A".charCodeAt(0),hn=10;hn<36;++hn)vn[pn++]=hn;function mn(t,e){var n=vn[t.charCodeAt(e)];return null==n?-1:n}function gn(t){var e=cn();return e.fromInt(t),e}function An(t){var e,n=1;return 0!=(e=t>>>16)&&(t=e,n+=16),0!=(e=t>>8)&&(t=e,n+=8),0!=(e=t>>4)&&(t=e,n+=4),0!=(e=t>>2)&&(t=e,n+=2),0!=(e=t>>1)&&(t=e,n+=1),n}on.ZERO=gn(0),on.ONE=gn(1);var yn,wn,bn=function(){function t(){this.i=0,this.j=0,this.S=[]}return t.prototype.init=function(t){var e,n,r;for(e=0;e<256;++e)this.S[e]=e;for(n=0,e=0;e<256;++e)n=n+this.S[e]+t[e%t.length]&255,r=this.S[e],this.S[e]=this.S[n],this.S[n]=r;this.i=0,this.j=0},t.prototype.next=function(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]},t}(),_n=null;if(null==_n){_n=[],wn=0;var xn=void 0;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues){var En=new Uint32Array(256);for(window.crypto.getRandomValues(En),xn=0;xn<En.length;++xn)_n[wn++]=255&En[xn]}var Sn=0,Tn=function(t){if((Sn=Sn||0)>=256||wn>=256)window.removeEventListener?window.removeEventListener("mousemove",Tn,!1):window.detachEvent&&window.detachEvent("onmousemove",Tn);else try{var e=t.x+t.y;_n[wn++]=255&e,Sn+=1}catch(t){}};"undefined"!=typeof window&&(window.addEventListener?window.addEventListener("mousemove",Tn,!1):window.attachEvent&&window.attachEvent("onmousemove",Tn))}function Cn(){if(null==yn){for(yn=new bn;wn<256;){var t=Math.floor(65536*Math.random());_n[wn++]=255&t}for(yn.init(_n),wn=0;wn<_n.length;++wn)_n[wn]=0;wn=0}return yn.next()}var Dn=function(){function t(){}return t.prototype.nextBytes=function(t){for(var e=0;e<t.length;++e)t[e]=Cn()},t}(),kn=function(){function t(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}return t.prototype.doPublic=function(t){return t.modPowInt(this.e,this.n)},t.prototype.doPrivate=function(t){if(null==this.p||null==this.q)return t.modPow(this.d,this.n);for(var e=t.mod(this.p).modPow(this.dmp1,this.p),n=t.mod(this.q).modPow(this.dmq1,this.q);e.compareTo(n)<0;)e=e.add(this.p);return e.subtract(n).multiply(this.coeff).mod(this.p).multiply(this.q).add(n)},t.prototype.setPublic=function(t,e){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=fn(t,16),this.e=parseInt(e,16)):console.error("Invalid RSA public key")},t.prototype.encrypt=function(t){var e=this.n.bitLength()+7>>3,n=function(t,e){if(e<t.length+11)return console.error("Message too long for RSA"),null;for(var n=[],r=t.length-1;r>=0&&e>0;){var o=t.charCodeAt(r--);o<128?n[--e]=o:o>127&&o<2048?(n[--e]=63&o|128,n[--e]=o>>6|192):(n[--e]=63&o|128,n[--e]=o>>6&63|128,n[--e]=o>>12|224)}n[--e]=0;for(var i=new Dn,a=[];e>2;){for(a[0]=0;0==a[0];)i.nextBytes(a);n[--e]=a[0]}return n[--e]=2,n[--e]=0,new on(n)}(t,e);if(null==n)return null;var r=this.doPublic(n);if(null==r)return null;for(var o=r.toString(16),i=o.length,a=0;a<2*e-i;a++)o="0"+o;return o},t.prototype.setPrivate=function(t,e,n){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=fn(t,16),this.e=parseInt(e,16),this.d=fn(n,16)):console.error("Invalid RSA private key")},t.prototype.setPrivateEx=function(t,e,n,r,o,i,a,s){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=fn(t,16),this.e=parseInt(e,16),this.d=fn(n,16),this.p=fn(r,16),this.q=fn(o,16),this.dmp1=fn(i,16),this.dmq1=fn(a,16),this.coeff=fn(s,16)):console.error("Invalid RSA private key")},t.prototype.generate=function(t,e){var n=new Dn,r=t>>1;this.e=parseInt(e,16);for(var o=new on(e,16);;){for(;this.p=new on(t-r,1,n),0!=this.p.subtract(on.ONE).gcd(o).compareTo(on.ONE)||!this.p.isProbablePrime(10););for(;this.q=new on(r,1,n),0!=this.q.subtract(on.ONE).gcd(o).compareTo(on.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)<=0){var i=this.p;this.p=this.q,this.q=i}var a=this.p.subtract(on.ONE),s=this.q.subtract(on.ONE),l=a.multiply(s);if(0==l.gcd(o).compareTo(on.ONE)){this.n=this.p.multiply(this.q),this.d=o.modInverse(l),this.dmp1=this.d.mod(a),this.dmq1=this.d.mod(s),this.coeff=this.q.modInverse(this.p);break}}},t.prototype.decrypt=function(t){var e=fn(t,16),n=this.doPrivate(e);return null==n?null:function(t,e){for(var n=t.toByteArray(),r=0;r<n.length&&0==n[r];)++r;if(n.length-r!=e-1||2!=n[r])return null;for(++r;0!=n[r];)if(++r>=n.length)return null;for(var o="";++r<n.length;){var i=255&n[r];i<128?o+=String.fromCharCode(i):i>191&&i<224?(o+=String.fromCharCode((31&i)<<6|63&n[r+1]),++r):(o+=String.fromCharCode((15&i)<<12|(63&n[r+1])<<6|63&n[r+2]),r+=2)}return o}(n,this.n.bitLength()+7>>3)},t.prototype.generateAsync=function(t,e,n){var r=new Dn,o=t>>1;this.e=parseInt(e,16);var i=new on(e,16),a=this,s=function(){var e=function(){if(a.p.compareTo(a.q)<=0){var t=a.p;a.p=a.q,a.q=t}var e=a.p.subtract(on.ONE),r=a.q.subtract(on.ONE),o=e.multiply(r);0==o.gcd(i).compareTo(on.ONE)?(a.n=a.p.multiply(a.q),a.d=i.modInverse(o),a.dmp1=a.d.mod(e),a.dmq1=a.d.mod(r),a.coeff=a.q.modInverse(a.p),setTimeout((function(){n()}),0)):setTimeout(s,0)},l=function(){a.q=cn(),a.q.fromNumberAsync(o,1,r,(function(){a.q.subtract(on.ONE).gcda(i,(function(t){0==t.compareTo(on.ONE)&&a.q.isProbablePrime(10)?setTimeout(e,0):setTimeout(l,0)}))}))},u=function(){a.p=cn(),a.p.fromNumberAsync(t-o,1,r,(function(){a.p.subtract(on.ONE).gcda(i,(function(t){0==t.compareTo(on.ONE)&&a.p.isProbablePrime(10)?setTimeout(l,0):setTimeout(u,0)}))}))};setTimeout(u,0)};setTimeout(s,0)},t.prototype.sign=function(t,e,n){var r=function(t,e){if(e<t.length+22)return console.error("Message too long for RSA"),null;for(var n=e-t.length-6,r="",o=0;o<n;o+=2)r+="ff";return fn("0001"+r+"00"+t,16)}((Mn[n]||"")+e(t).toString(),this.n.bitLength()/4);if(null==r)return null;var o=this.doPrivate(r);if(null==o)return null;var i=o.toString(16);return 1&i.length?"0"+i:i},t.prototype.verify=function(t,e,n){var r=fn(e,16),o=this.doPublic(r);return null==o?null:function(t){for(var e in Mn)if(Mn.hasOwnProperty(e)){var n=Mn[e],r=n.length;if(t.substr(0,r)==n)return t.substr(r)}return t}(o.toString(16).replace(/^1f+00/,""))==n(t).toString()},t}(),Mn={md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",ripemd160:"3021300906052b2403020105000414"},Nn={};Nn.lang={extend:function(t,e,n){if(!e||!t)throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");var r=function(){};if(r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t,t.superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e),n){var o;for(o in n)t.prototype[o]=n[o];var i=function(){},a=["toString","valueOf"];try{/MSIE/.test(navigator.userAgent)&&(i=function(t,e){for(o=0;o<a.length;o+=1){var n=a[o],r=e[n];"function"==typeof r&&r!=Object.prototype[n]&&(t[n]=r)}})}catch(t){}i(t.prototype,n)}}};var Rn={};void 0!==Rn.asn1&&Rn.asn1||(Rn.asn1={}),Rn.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e="0"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if("-"!=e.substr(0,1))e.length%2==1?e="0"+e:e.match(/^[0-7]/)||(e="00"+e);else{var n=e.substr(1).length;n%2==1?n+=1:e.match(/^[0-7]/)||(n+=2);for(var r="",o=0;o<n;o++)r+="f";e=new on(r,16).xor(t).add(on.ONE).toString(16).replace(/^-/,"")}return e},this.getPEMStringFromHex=function(t,e){return hextopem(t,e)},this.newObject=function(t){var e=Rn.asn1,n=e.DERBoolean,r=e.DERInteger,o=e.DERBitString,i=e.DEROctetString,a=e.DERNull,s=e.DERObjectIdentifier,l=e.DEREnumerated,u=e.DERUTF8String,c=e.DERNumericString,f=e.DERPrintableString,d=e.DERTeletexString,p=e.DERIA5String,h=e.DERUTCTime,v=e.DERGeneralizedTime,m=e.DERSequence,g=e.DERSet,A=e.DERTaggedObject,y=e.ASN1Util.newObject,w=Object.keys(t);if(1!=w.length)throw"key of param shall be only one.";var b=w[0];if(-1==":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:".indexOf(":"+b+":"))throw"undefined key: "+b;if("bool"==b)return new n(t[b]);if("int"==b)return new r(t[b]);if("bitstr"==b)return new o(t[b]);if("octstr"==b)return new i(t[b]);if("null"==b)return new a(t[b]);if("oid"==b)return new s(t[b]);if("enum"==b)return new l(t[b]);if("utf8str"==b)return new u(t[b]);if("numstr"==b)return new c(t[b]);if("prnstr"==b)return new f(t[b]);if("telstr"==b)return new d(t[b]);if("ia5str"==b)return new p(t[b]);if("utctime"==b)return new h(t[b]);if("gentime"==b)return new v(t[b]);if("seq"==b){for(var _=t[b],x=[],E=0;E<_.length;E++){var S=y(_[E]);x.push(S)}return new m({array:x})}if("set"==b){for(_=t[b],x=[],E=0;E<_.length;E++)S=y(_[E]),x.push(S);return new g({array:x})}if("tag"==b){var T=t[b];if("[object Array]"===Object.prototype.toString.call(T)&&3==T.length){var C=y(T[2]);return new A({tag:T[0],explicit:T[1],obj:C})}var D={};if(void 0!==T.explicit&&(D.explicit=T.explicit),void 0!==T.tag&&(D.tag=T.tag),void 0===T.obj)throw"obj shall be specified for 'tag'.";return D.obj=y(T.obj),new A(D)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},Rn.asn1.ASN1Util.oidHexToInt=function(t){for(var e="",n=parseInt(t.substr(0,2),16),r=(e=Math.floor(n/40)+"."+n%40,""),o=2;o<t.length;o+=2){var i=("00000000"+parseInt(t.substr(o,2),16).toString(2)).slice(-8);r+=i.substr(1,7),"0"==i.substr(0,1)&&(e=e+"."+new on(r,2).toString(10),r="")}return e},Rn.asn1.ASN1Util.oidIntToHex=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},n=function(t){var n="",r=new on(t,10).toString(2),o=7-r.length%7;7==o&&(o=0);for(var i="",a=0;a<o;a++)i+="0";for(r=i+r,a=0;a<r.length-1;a+=7){var s=r.substr(a,7);a!=r.length-7&&(s="1"+s),n+=e(parseInt(s,2))}return n};if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var r="",o=t.split("."),i=40*parseInt(o[0])+parseInt(o[1]);r+=e(i),o.splice(0,2);for(var a=0;a<o.length;a++)r+=n(o[a]);return r},Rn.asn1.ASN1Object=function(){this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw"this.hV is null or undefined.";if(this.hV.length%2==1)throw"value hex must be even length: n=0,v="+this.hV;var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e="0"+e),t<128)return e;var n=e.length/2;if(n>15)throw"ASN.1 length too long to represent by 8x: n = "+t.toString(16);return(128+n).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return""}},Rn.asn1.DERAbstractString=function(t){Rn.asn1.DERAbstractString.superclass.constructor.call(this),this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(this.s)},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},Nn.lang.extend(Rn.asn1.DERAbstractString,Rn.asn1.ASN1Object),Rn.asn1.DERAbstractTime=function(t){Rn.asn1.DERAbstractTime.superclass.constructor.call(this),this.localDateToUTC=function(t){return utc=t.getTime()+6e4*t.getTimezoneOffset(),new Date(utc)},this.formatDate=function(t,e,n){var r=this.zeroPadding,o=this.localDateToUTC(t),i=String(o.getFullYear());"utc"==e&&(i=i.substr(2,2));var a=i+r(String(o.getMonth()+1),2)+r(String(o.getDate()),2)+r(String(o.getHours()),2)+r(String(o.getMinutes()),2)+r(String(o.getSeconds()),2);if(!0===n){var s=o.getMilliseconds();if(0!=s){var l=r(String(s),3);a=a+"."+(l=l.replace(/[0]+$/,""))}}return a+"Z"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join("0")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(t)},this.setByDateValue=function(t,e,n,r,o,i){var a=new Date(Date.UTC(t,e-1,n,r,o,i,0));this.setByDate(a)},this.getFreshValueHex=function(){return this.hV}},Nn.lang.extend(Rn.asn1.DERAbstractTime,Rn.asn1.ASN1Object),Rn.asn1.DERAbstractStructured=function(t){Rn.asn1.DERAbstractString.superclass.constructor.call(this),this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},Nn.lang.extend(Rn.asn1.DERAbstractStructured,Rn.asn1.ASN1Object),Rn.asn1.DERBoolean=function(){Rn.asn1.DERBoolean.superclass.constructor.call(this),this.hT="01",this.hTLV="0101ff"},Nn.lang.extend(Rn.asn1.DERBoolean,Rn.asn1.ASN1Object),Rn.asn1.DERInteger=function(t){Rn.asn1.DERInteger.superclass.constructor.call(this),this.hT="02",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=Rn.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new on(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},Nn.lang.extend(Rn.asn1.DERInteger,Rn.asn1.ASN1Object),Rn.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=Rn.asn1.ASN1Util.newObject(t.obj);t.hex="00"+e.getEncodedHex()}Rn.asn1.DERBitString.superclass.constructor.call(this),this.hT="03",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw"unused bits shall be from 0 to 7: u = "+t;var n="0"+t;this.hTLV=null,this.isModified=!0,this.hV=n+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,"")).length%8;8==e&&(e=0);for(var n=0;n<=e;n++)t+="0";var r="";for(n=0;n<t.length-1;n+=8){var o=t.substr(n,8),i=parseInt(o,2).toString(16);1==i.length&&(i="0"+i),r+=i}this.hTLV=null,this.isModified=!0,this.hV="0"+e+r},this.setByBooleanArray=function(t){for(var e="",n=0;n<t.length;n++)1==t[n]?e+="1":e+="0";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},Nn.lang.extend(Rn.asn1.DERBitString,Rn.asn1.ASN1Object),Rn.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=Rn.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}Rn.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT="04"},Nn.lang.extend(Rn.asn1.DEROctetString,Rn.asn1.DERAbstractString),Rn.asn1.DERNull=function(){Rn.asn1.DERNull.superclass.constructor.call(this),this.hT="05",this.hTLV="0500"},Nn.lang.extend(Rn.asn1.DERNull,Rn.asn1.ASN1Object),Rn.asn1.DERObjectIdentifier=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},n=function(t){var n="",r=new on(t,10).toString(2),o=7-r.length%7;7==o&&(o=0);for(var i="",a=0;a<o;a++)i+="0";for(r=i+r,a=0;a<r.length-1;a+=7){var s=r.substr(a,7);a!=r.length-7&&(s="1"+s),n+=e(parseInt(s,2))}return n};Rn.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT="06",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var r="",o=t.split("."),i=40*parseInt(o[0])+parseInt(o[1]);r+=e(i),o.splice(0,2);for(var a=0;a<o.length;a++)r+=n(o[a]);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=r},this.setValueName=function(t){var e=Rn.asn1.x509.OID.name2oid(t);if(""===e)throw"DERObjectIdentifier oidName undefined: "+t;this.setValueOidString(e)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t):void 0!==t.oid?this.setValueOidString(t.oid):void 0!==t.hex?this.setValueHex(t.hex):void 0!==t.name&&this.setValueName(t.name))},Nn.lang.extend(Rn.asn1.DERObjectIdentifier,Rn.asn1.ASN1Object),Rn.asn1.DEREnumerated=function(t){Rn.asn1.DEREnumerated.superclass.constructor.call(this),this.hT="0a",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=Rn.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new on(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},Nn.lang.extend(Rn.asn1.DEREnumerated,Rn.asn1.ASN1Object),Rn.asn1.DERUTF8String=function(t){Rn.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT="0c"},Nn.lang.extend(Rn.asn1.DERUTF8String,Rn.asn1.DERAbstractString),Rn.asn1.DERNumericString=function(t){Rn.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT="12"},Nn.lang.extend(Rn.asn1.DERNumericString,Rn.asn1.DERAbstractString),Rn.asn1.DERPrintableString=function(t){Rn.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT="13"},Nn.lang.extend(Rn.asn1.DERPrintableString,Rn.asn1.DERAbstractString),Rn.asn1.DERTeletexString=function(t){Rn.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT="14"},Nn.lang.extend(Rn.asn1.DERTeletexString,Rn.asn1.DERAbstractString),Rn.asn1.DERIA5String=function(t){Rn.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="16"},Nn.lang.extend(Rn.asn1.DERIA5String,Rn.asn1.DERAbstractString),Rn.asn1.DERUTCTime=function(t){Rn.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT="17",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"utc"),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},Nn.lang.extend(Rn.asn1.DERUTCTime,Rn.asn1.DERAbstractTime),Rn.asn1.DERGeneralizedTime=function(t){Rn.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT="18",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},Nn.lang.extend(Rn.asn1.DERGeneralizedTime,Rn.asn1.DERAbstractTime),Rn.asn1.DERSequence=function(t){Rn.asn1.DERSequence.superclass.constructor.call(this,t),this.hT="30",this.getFreshValueHex=function(){for(var t="",e=0;e<this.asn1Array.length;e++)t+=this.asn1Array[e].getEncodedHex();return this.hV=t,this.hV}},Nn.lang.extend(Rn.asn1.DERSequence,Rn.asn1.DERAbstractStructured),Rn.asn1.DERSet=function(t){Rn.asn1.DERSet.superclass.constructor.call(this,t),this.hT="31",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var n=this.asn1Array[e];t.push(n.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(""),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},Nn.lang.extend(Rn.asn1.DERSet,Rn.asn1.DERAbstractStructured),Rn.asn1.DERTaggedObject=function(t){Rn.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT="a0",this.hV="",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,n){this.hT=e,this.isExplicit=t,this.asn1Object=n,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=n.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.tag&&(this.hT=t.tag),void 0!==t.explicit&&(this.isExplicit=t.explicit),void 0!==t.obj&&(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},Nn.lang.extend(Rn.asn1.DERTaggedObject,Rn.asn1.ASN1Object);var Bn,Pn,On=(Bn=function(t,e){return Bn=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},Bn(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}Bn(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),In=function(t){function e(n){var r=t.call(this)||this;return n&&("string"==typeof n?r.parseKey(n):(e.hasPrivateKeyProperty(n)||e.hasPublicKeyProperty(n))&&r.parsePropertiesFrom(n)),r}return On(e,t),e.prototype.parseKey=function(t){try{var e=0,n=0,r=/^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(t)?function(t){var e;if(void 0===Ue){var n="0123456789ABCDEF";for(Ue={},e=0;e<16;++e)Ue[n.charAt(e)]=e;for(n=n.toLowerCase(),e=10;e<16;++e)Ue[n.charAt(e)]=e;for(e=0;e<8;++e)Ue[" \f\n\r\t \u2028\u2029".charAt(e)]=-1}var r=[],o=0,i=0;for(e=0;e<t.length;++e){var a=t.charAt(e);if("="==a)break;if(-1!=(a=Ue[a])){if(void 0===a)throw new Error("Illegal character at offset "+e);o|=a,++i>=2?(r[r.length]=o,o=0,i=0):o<<=4}}if(i)throw new Error("Hex encoding incomplete: 4 bits missing");return r}(t):qe.unarmor(t),o=tn.decode(r);if(3===o.sub.length&&(o=o.sub[2].sub[0]),9===o.sub.length){e=o.sub[1].getHexStringValue(),this.n=fn(e,16),n=o.sub[2].getHexStringValue(),this.e=parseInt(n,16);var i=o.sub[3].getHexStringValue();this.d=fn(i,16);var a=o.sub[4].getHexStringValue();this.p=fn(a,16);var s=o.sub[5].getHexStringValue();this.q=fn(s,16);var l=o.sub[6].getHexStringValue();this.dmp1=fn(l,16);var u=o.sub[7].getHexStringValue();this.dmq1=fn(u,16);var c=o.sub[8].getHexStringValue();this.coeff=fn(c,16)}else{if(2!==o.sub.length)return!1;if(o.sub[0].sub){var f=o.sub[1].sub[0];e=f.sub[0].getHexStringValue(),this.n=fn(e,16),n=f.sub[1].getHexStringValue(),this.e=parseInt(n,16)}else e=o.sub[0].getHexStringValue(),this.n=fn(e,16),n=o.sub[1].getHexStringValue(),this.e=parseInt(n,16)}return!0}catch(t){return!1}},e.prototype.getPrivateBaseKey=function(){var t={array:[new Rn.asn1.DERInteger({int:0}),new Rn.asn1.DERInteger({bigint:this.n}),new Rn.asn1.DERInteger({int:this.e}),new Rn.asn1.DERInteger({bigint:this.d}),new Rn.asn1.DERInteger({bigint:this.p}),new Rn.asn1.DERInteger({bigint:this.q}),new Rn.asn1.DERInteger({bigint:this.dmp1}),new Rn.asn1.DERInteger({bigint:this.dmq1}),new Rn.asn1.DERInteger({bigint:this.coeff})]};return new Rn.asn1.DERSequence(t).getEncodedHex()},e.prototype.getPrivateBaseKeyB64=function(){return Qe(this.getPrivateBaseKey())},e.prototype.getPublicBaseKey=function(){var t=new Rn.asn1.DERSequence({array:[new Rn.asn1.DERObjectIdentifier({oid:"1.2.840.113549.1.1.1"}),new Rn.asn1.DERNull]}),e=new Rn.asn1.DERSequence({array:[new Rn.asn1.DERInteger({bigint:this.n}),new Rn.asn1.DERInteger({int:this.e})]}),n=new Rn.asn1.DERBitString({hex:"00"+e.getEncodedHex()});return new Rn.asn1.DERSequence({array:[t,n]}).getEncodedHex()},e.prototype.getPublicBaseKeyB64=function(){return Qe(this.getPublicBaseKey())},e.wordwrap=function(t,e){if(!t)return t;var n="(.{1,"+(e=e||64)+"})( +|$\n?)|(.{1,"+e+"})";return t.match(RegExp(n,"g")).join("\n")},e.prototype.getPrivateKey=function(){var t="-----BEGIN RSA PRIVATE KEY-----\n";return(t+=e.wordwrap(this.getPrivateBaseKeyB64())+"\n")+"-----END RSA PRIVATE KEY-----"},e.prototype.getPublicKey=function(){var t="-----BEGIN PUBLIC KEY-----\n";return(t+=e.wordwrap(this.getPublicBaseKeyB64())+"\n")+"-----END PUBLIC KEY-----"},e.hasPublicKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")},e.hasPrivateKeyProperty=function(t){return(t=t||{}).hasOwnProperty("n")&&t.hasOwnProperty("e")&&t.hasOwnProperty("d")&&t.hasOwnProperty("p")&&t.hasOwnProperty("q")&&t.hasOwnProperty("dmp1")&&t.hasOwnProperty("dmq1")&&t.hasOwnProperty("coeff")},e.prototype.parsePropertiesFrom=function(t){this.n=t.n,this.e=t.e,t.hasOwnProperty("d")&&(this.d=t.d,this.p=t.p,this.q=t.q,this.dmp1=t.dmp1,this.dmq1=t.dmq1,this.coeff=t.coeff)},e}(kn),Ln="undefined"!=typeof process?null===(Pn=process.env)||void 0===Pn?void 0:Pn.npm_package_version:void 0;const Hn=function(){function t(t){void 0===t&&(t={}),t=t||{},this.default_key_size=t.default_key_size?parseInt(t.default_key_size,10):1024,this.default_public_exponent=t.default_public_exponent||"010001",this.log=t.log||!1,this.key=null}return t.prototype.setKey=function(t){this.log&&this.key&&console.warn("A key was already set, overriding existing."),this.key=new In(t)},t.prototype.setPrivateKey=function(t){this.setKey(t)},t.prototype.setPublicKey=function(t){this.setKey(t)},t.prototype.decrypt=function(t){try{return this.getKey().decrypt(ze(t))}catch(t){return!1}},t.prototype.encrypt=function(t){try{return Qe(this.getKey().encrypt(t))}catch(t){return!1}},t.prototype.sign=function(t,e,n){try{return Qe(this.getKey().sign(t,e,n))}catch(t){return!1}},t.prototype.verify=function(t,e,n){try{return this.getKey().verify(t,ze(e),n)}catch(t){return!1}},t.prototype.getKey=function(t){if(!this.key){if(this.key=new In,t&&"[object Function]"==={}.toString.call(t))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,t);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key},t.prototype.getPrivateKey=function(){return this.getKey().getPrivateKey()},t.prototype.getPrivateKeyB64=function(){return this.getKey().getPrivateBaseKeyB64()},t.prototype.getPublicKey=function(){return this.getKey().getPublicKey()},t.prototype.getPublicKeyB64=function(){return this.getKey().getPublicBaseKeyB64()},t.version=Ln,t}();var Fn=__webpack_require__(53),jn=__webpack_require__.n(Fn);const Un="http://127.0.0.1:3001",Vn="ua_pubKey",Qn="ua_ZZTK",zn={login:{url:"/login",withToken:!1,method:"post",rsaKey:"password"},register:{url:"/register",withToken:!1,method:"post",rsaKey:"password"},user:{url:"/",withToken:!0,method:"get"}};class Yn{constructor({type:t="user",data:e}={}){this.type=t,this.data=e,this.#r(),this.#o()}#r(){this.requset=Be.create({baseURL:Un});let t=zn[this.type];t&&Object.assign(this,t),this.withToken&&(this.requset.defaults.headers.common.Authorization=`Bearer ${jn().get(Qn)}`)}send(){return new Promise((async(t,e)=>{let{url:n,data:r}=this;try{let o=await this.requset[this.method](n,r);o?t(o):e(new Error("请求失败"))}catch(t){e(new Error(t.message))}}))}#o(){this.requset.interceptors.request.use((async t=>{if("rsaKey"in this){let e=this.rsaKey;t.data[e]&&(t.data[e]=await Yn.encrty(t.data[e]))}return t}),(function(t){return Promise.reject(t)})),this.requset.interceptors.response.use((t=>{let e=t.data;if("200"!=e.statusCode)return console.warn("错误信息:",e.errMsg),!1;if(e.data.token){let t=e.data.token;delete e.data.token,jn().set(Qn,t)}return console.log("请求结果:",e.errMsg),e}),(function(t){return Promise.reject(t)}))}static async encrty(t){let e=await Yn.getPublicKey(),n=new Hn;return n.setPublicKey(e),n.encrypt(t)}static async getPublicKey(){let t=jn().get(Vn);if(!t||"undefined"===t)try{t=(await Be.get(`${Un}/publickey`)).data.data.key,jn().set(Vn,t)}catch(t){return console.log(t),""}return t}}const qn={modal:r(),user:i(),write:s()};class $n{constructor({wrap:t="body",typeName:e="modal",data:n}={}){this.wrap=$(t),this.name=e,this.data=n}render(){this.wrap.html(this.getHtml())}getHtml(){return qn[this.name](this.data)}static render(t,e){return qn[t](e)}}var Gn=__webpack_require__(233),Jn=__webpack_require__.n(Gn),Kn=__webpack_require__(903),Wn=__webpack_require__.n(Kn);const Xn={login:{wrap:".blog-login"},user:{wrap:".blog-login"},write:{wrap:".blog-content"}},Zn=new(Jn())("page");Zn.use((function(t){let e=t.body.routerName;Xn[e].wrap&&(Zn._mount=document.querySelector(Xn[e].wrap))})),Zn.route("*",((t,e,n)=>{t.body.routerName||Zn.go("/login",{routerName:"login"})})),Zn.route("/user",(async(t,e,n)=>{try{await new Yn({type:"user"}).send();let t=$n.render("user",{isLogin:!0});e.render(t)}catch{Zn.go("/login",{routerName:"login"})}})),Zn.route("/login",((t,e,n)=>{let r=$n.render("user",{isLogin:!1});e.render(r)})),Zn.route("/write",((t,e,n)=>{let r=$n.render("write");e.render(r),new(Wn())(Xn.write.wrap).create()}));const tr=Zn,er={login(){this.index()},register(){this.index()},index(){tr.go("/user",{isLogin:!0})}};new class{constructor(){this.ModalAgency(),this.validaoeAgency(),this.routeAgency(),this.init()}init(){tr.go("/user",{routerName:"user"})}ModalAgency(){$(document).on("click","[data-modal]",(t=>{t.preventDefault();let e=$(t.target).data("modal");if(!e||0===e.length)return!1;this.modal=new c({modalWarp:$(".blog-modal"),modalType:e}),this.modal.open();let n=$(".blog-modal-wrap").get(0);new m(n)})),$(document).on("click","[data-modal-btn]",(t=>{let e=$(t.target).data("modal-btn");this.modal&&this.modal[e]&&this.modal[e]()}))}validaoeAgency(){$(document).on("submit","form",(async t=>{let e=$(t.target)[0].id;try{let t=await new v(e),n=await new Yn({type:e,data:t}).send();this.modal&&this.modal.close(),er[e]&&er[e](n)}catch(t){console.log(t)}}))}routeAgency(){$(document).on("click","[data-router]",(function(t){let e=$(this).data("router");tr.go(`/${e}`,{routerName:e})}))}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,