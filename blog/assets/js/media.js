(() => { "use strict"; const e = class { constructor(e = "local") { this.storage = "local" === e ? localStorage : sessionStorage, this.history = {} } setStorage(...e) { const t = e.length; if (0 === t) return !1; if (2 === t) return e.every((e => "object" != typeof e)) && (this.history[e[0]] = e[1], this.storage.setItem(String(e[0]), String(e[1]))), { [e[0]]: e[1] }; if (1 === t && "[object Object]" === Object.prototype.toString.call(e[0])) { let t = e[0]; return Object.assign(this.history, t), Object.entries(t).map((([e, t]) => (this.storage.setItem(e, t), e))) } return this.history } getStorage(...e) { const t = e.length; return 0 === t ? this.history : 1 === t && "[object Array]" === Object.prototype.toString.call(e[0]) && e[0].length ? e[0].slice().reduce(((e, t) => (e[t] = this.storage.getItem(t), e)), {}) : 1 === t && "[object String]" === Object.prototype.toString.call(e[0]) && e[0].length ? this.storage.getItem(e[0]) : void 0 } removeStorage(...e) { (e = e.flat(1 / 0)).forEach((e => { "object" != typeof e && (this.history[e] && delete this.history[e], this.storage.removeItem(String(e))) })) } clearStorage() { this.history = {}, this.storage.clear() } }; function t(e) { return document.querySelector(e) } function s(e, t, s, r, i) { s = s || 500, r = r || "linear", e.style.transition = `${s}ms ${r}`, function (e, t) { for (var s in t) e.style[s] = t[s] }(e, t), e.addEventListener("transitionend", (function t() { e.removeEventListener("transitionend", t), e.style.transition = "0ms", setTimeout((function () { i && i() }), 0) })) } function r(e) { return ("0" + e).slice(-2) } new class { #e = !0; #t = !1; constructor(s = t(".media-player video")) { this.storage = new e, this.player = s, this.$ele = { $main: t(".media-container"), $screen: t(".media-player"), $controls: t(".media-controls"), $contr_play: t("#contr-play"), $totalTime: t(".media-time-total"), $currentTime: t(".media-time-current"), $progressMain: t(".media-progress"), $progress: t(".media-progress .line"), $unit: t(".unit"), $fullscreen: t("#contr-full"), $loop: t("#contr-loop"), $volumn: t("#contr-volume"), $mute: t("#contr-mute") }, this.progress = { isDown: !1, maxWidth: t(".media-progress").offsetWidth }, this.canPlay = !1, this.eventListener() } set isPaused(e) { e ? this.myPause() : this.myPlay(), this.#e = e } get isPaused() { return this.#e } eventListener() { let e, { $controls: t, $screen: s, $contr_play: r, $fullscreen: i, $progressMain: n, $loop: o, $volumn: l, $mute: a } = this.$ele; s.addEventListener("mouseenter", (e => { this.controlShow() })), s.addEventListener("mousemove", (t => { this.controlShow(), clearTimeout(e), e = setTimeout((() => { this.controlHide() }), 1e3) })), t.addEventListener("mouseenter", (t => { clearTimeout(e) })), t.addEventListener("mouseleave", (t => { e = setTimeout((() => { this.controlHide() }), 1e3) })), this.player.addEventListener("canplay", (() => { this.initPlayer() })), r.addEventListener("click", (e => { if (!this.canPlay) return !1; this.isPaused = !this.player.paused })), this.player.addEventListener("timeupdate", (() => { this.setCurrentTime() })); const c = { mousedown: e => { if (this.progress.isDown = !0, this.isPaused = !0, e.target.classList.contains("unit")) return !1; let t = this.getCurrentTime(e); this.setCurrentTime(t) }, mousemove: e => { if (!this.progress.isDown) return !1; let t = this.getCurrentTime(e); this.setCurrentTime(t) }, mouseup: e => { if (!this.progress.isDown) return !1; this.progress.isDown = !1, this.isPaused = !1 } }; function u(e) { e.preventDefault(); let t = e.type; c[t] && c[t](e) } n.addEventListener("mousedown", u.bind(this)), document.addEventListener("mousemove", u.bind(this)), document.addEventListener("mouseup", u.bind(this)), i.addEventListener("click", (e => { let t = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement; e.target.classList.toggle("highlight"), t ? this.myExitFullscreen() : this.myRequestFullscreen() })), o.addEventListener("click", (e => { this.controlLoop(e) })), l.addEventListener("change", (e => { let t = e.target.value / 100; this.setVolumn(t) })), a.addEventListener("click", (e => { e.target.classList.toggle("highlight"), this.player.muted = !this.player.muted })), document.addEventListener("visibilitychange", (e => { if (document.hidden) { let e = this.player.src, t = this.player.currentTime; this.storage.setStorage(e, t) } })) } initPlayer() { if (this.canPlay) return !1; this.canPlay = !0, this.$ele.$totalTime.innerText = this.formatTime(this.player.duration); let e = this.player.volume; this.setVolumn(e), this.setHistory() } setHistory() { let e = this.player.src, t = ~~Number(this.storage.getStorage(e)); if (!t) return !1; this.setCurrentTime(t) } setVolumn(e) { this.player.volume = e, this.$ele.$volumn.value = 100 * e } controlLoop(e) { this.player.loop = !this.player.loop, e.target.classList.toggle("highlight") } setProgress() { let e = this.player.currentTime / this.player.duration * 100; this.$ele.$progress.style.width = `${e}%` } getCurrentTime(e) { let { x: t } = function (e) { for (var t = { x: 0, y: 0 }; e.offsetParent;)t.x += e.offsetLeft, t.y += e.offsetTop, e = e.offsetParent, t.x += e.clientLeft, t.y += e.clientTop; return t }(this.$ele.$progress), s = (e.clientX - t) / this.progress.maxWidth; return s = Math.min(1, Math.max(0, s)), s * this.player.duration } setCurrentTime(e) { e ? this.player.currentTime = e : e = this.player.currentTime, this.$ele.$currentTime.innerText = this.formatTime(e), this.setProgress() } myPlay() { this.$ele.$contr_play.classList.remove("icon-player"), this.player.play() } myPause() { this.$ele.$contr_play.classList.add("icon-player"), this.player.pause() } myRequestFullscreen() { const e = ["requestFullscreen", "webkitRequestFullScreen", "mozRequestFullScreen", "msRequestFullscreen"]; let t = this.$ele.$main; for (let s = 0; s < e.length; s++) { let r = e[s]; if (t[r]) return t[r](), !1 } } myExitFullscreen() { const e = ["exitFullscreen", "webkitCancelFullScreen", "mozCancelFullScreen", "msExitFullscreen"]; for (let t = 0; t < e.length; t++) { let s = e[t]; if (console.log(), document[s]) return document[s](), !1 } } controlShow() { let e = (r = "bottom", (t = this.$ele.$controls).currentStyle ? t.currentStyle[r] : getComputedStyle(t, !1)[r]); var t, r; if (0 === Number(e)) return !1; s(this.$ele.$controls, { bottom: 0 }, 300, "linear") } controlHide() { s(this.$ele.$controls, { bottom: "-54px" }, 300, "linear") } formatTime(e) { let [t, s, i] = [~~(e / 3600), ~~(e / 60), ~~(e % 60)].map(r); return `${t}:${s}:${i}` } } })();